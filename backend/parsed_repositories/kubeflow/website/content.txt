(Files content cropped to 300k characters, download full ingest to see more)
================================================
File: README.md
================================================
# Kubeflow Website

[![Netlify Status](https://api.netlify.com/api/v1/badges/80644d22-0685-44d0-83bd-187d55464321/deploy-status)](https://app.netlify.com/sites/competent-brattain-de2d6d/deploys)

Welcome to the GitHub repository for Kubeflow's public website!

The docs website is hosted at https://www.kubeflow.org.

We use [Hugo](https://gohugo.io/) with the [google/docsy](https://github.com/google/docsy)
theme for styling and site structure, and [Netlify](https://www.netlify.com/) to manage the deployment of the site.

## Quickstart

Here's a quick guide to updating the docs:

1. Fork the [kubeflow/website repository](https://github.com/kubeflow/website) on GitHub.

2. Make your changes and send a pull request (PR).

3. If you're not yet ready for a review, add "WIP" to the PR name to indicate it's a work in progress. 
   Alternatively, you use the `/hold` [prow command](https://prow.k8s.io/command-help) in a comment to mark the PR as not ready for merge.

4. Wait for the automated PR workflow to do some checks. 
   When it's ready, you should see a comment like this: `deploy/netlify — Deploy preview ready!`

5. Click **Details** to the right of "Deploy preview ready" to see a preview of your updates.

6. Continue updating your doc and pushing your changes until you're happy with the content.

7. When you're ready for a review, add a comment to the PR, remove any holds or "WIP" markers, and assign a reviewer/approver. 
   See the [Kubeflow contributor guide](https://www.kubeflow.org/docs/about/contributing/).

If you need more help with the GitHub workflow, follow
this [guide to a standard GitHub workflow](https://github.com/kubeflow/website/blob/master/quick-github-guide.md).

## Local development

This section will show you how to develop the website locally, by running a local Hugo server.

### Install Hugo

To install Hugo, follow the [instructions for your system type](https://gohugo.io/getting-started/installing/).

**NOTE:** we recommend that you use Hugo version `0.124.1`, as this is currently the version we deploy to Netlify.

For example, using homebrew to install hugo on macOS or linux:

```bash
# WARNING: using `brew install hugo` will install the latest version of hugo
#          which may not be compatible with the website

# TIP: to install hugo run the following commands
HOMEBREW_COMMIT="9d025105a8be086b2eeb3b1b2697974f848dbaac" # 0.124.1
curl -fL -o "hugo.rb" "https://raw.githubusercontent.com/Homebrew/homebrew-core/${HOMEBREW_COMMIT}/Formula/h/hugo.rb"
brew install ./hugo.rb
brew pin hugo
```

### Install Node Packages

If you plan to make changes to the site styling, you need to install some **node libraries** as well.
(See the [Docsy setup guide](https://www.docsy.dev/docs/getting-started/#install-postcss) for more information)

You can install the same versions we use in Netlify (defined in `package.json`) with the following command:

```bash
npm install -D
```

### Run local hugo server

Follow the usual GitHub workflow of forking the repository on GitHub and then cloning your fork to your local machine.

1. **Fork** the [kubeflow/website repository](https://github.com/kubeflow/website) in the GitHub UI.

2. Clone your fork locally:

    ```bash
    git clone git@github.com:<your-github-username>/website.git
    cd website/
    ```

3. Initialize the Docsy submodule:

    ```bash
    git submodule update --init --recursive
    ```

4. Install Docsy dependencies:

    ```bash
    # NOTE: ensure you have node 18 installed
    (cd themes/docsy/ && npm install)
    ```

5. Start your local Hugo server:

    ```bash
    # NOTE: You should ensure that you are in the root directory of the repository.
    hugo server -D
    ```

6. You can access your website at [http://localhost:1313/](http://localhost:1313/)

### Useful docs

* [User guide for the Docsy theme](https://www.docsy.dev/docs/getting-started/)
* [Hugo installation guide](https://gohugo.io/getting-started/installing/)
* [Hugo basic usage](https://gohugo.io/getting-started/usage/)
* [Hugo site directory structure](https://gohugo.io/getting-started/directory-structure/)
* [hugo server reference](https://gohugo.io/commands/hugo_server/)

## Menu structure

The site theme has one Hugo menu (`main`), which defines the top navigation bar. You can find and adjust the definition
of the menu in the [site configuration file](https://github.com/kubeflow/website/blob/master/config.toml).

The left-hand navigation panel is defined by the directory structure under the [`docs` directory](https://github.com/kubeflow/website/tree/master/content/en/docs).

A `weight` property in the _front matter_ of each page determines the position of the page relative to the others in the same directory.
The lower the weight, the earlier the page appears in the section.

Here is an example `_index.md` file:

```md
+++
title = "Getting Started with Kubeflow"
description = "Overview"
weight = 1
+++
```

## Docsy Theme

We use the [Docsy](https://www.docsy.dev/) theme for the website. 
The theme files are managed with a [git submodule](https://git-scm.com/book/en/v2/Git-Tools-Submodules) in the `themes/docsy` directory.

**Do not change these files**, they are not actually inside this repo, but are part of the [google/docsy](https://github.com/google/docsy) repo.

To update referenced docsy commit, run the following command at the root of the repo:

```bash
# for example, to update docsy to v0.6.0
# WARNING: updating the docsy version will require you to update our overrides
#          check under: `layouts/partials` and `assets/scss`
git -C themes/docsy fetch --tags
git -C themes/docsy checkout tags/v0.6.0
```

## Documentation style guide

For guidance on writing effective documentation, see
the [style guide for the Kubeflow docs](https://kubeflow.org/docs/about/style-guide/).

## Styling your content

The theme holds its styles in the [`assets/scss` directory](https://github.com/kubeflow/website/tree/master/themes/docsy/assets/scss).

**Do not change these files**, they are not actually inside this repo, but are part of the [google/docsy](https://github.com/google/docsy) repo.

You can override the default styles and add new ones:

* In general, put your files in the project directory structure under `website` rather than in the theme directory. 
  Use the same file name as the theme does, and put the file in the same relative position.
  Hugo looks first at the file in the main project directories, if present, then at the files under the theme directory. 
  For example, the Kubeflow website's [`layouts/partials/navbar.html`](https://github.com/kubeflow/website/blob/master/layouts/partials/navbar.html)
  overrides the theme's [`layouts/partials/navbar.html`](https://github.com/kubeflow/website/blob/master/themes/docsy/layouts/partials/navbar.html)

* You can update the Kubeflow website's project variables in the [`_variables_project.scss` file](https://github.com/kubeflow/website/blob/master/assets/scss/_variables_project.scss).
  Values in that file override the [Docsy variables](https://github.com/kubeflow/website/blob/master/themes/docsy/assets/scss/_variables.scss). 
  You can also use `_variables_project.scss` to specify your own values for any of the default [Bootstrap 4 variables](https://getbootstrap.com/docs/4.0/getting-started/theming/).

* Custom styles [`_styles_project` file](https://github.com/kubeflow/website/blob/master/assets/scss/_styles_project.scss)

Styling of images:

* To see some examples of styled images, take a look at the [OAuth setup page](https://googlecloudplatform.github.io/kubeflow-gke-docs/docs/deploy/oauth-setup/) in the Kubeflow docs. 
  Search for `.png` in the [page source](https://raw.githubusercontent.com/GoogleCloudPlatform/kubeflow-gke-docs/main/content/en/docs/deploy/oauth-setup.md).

* For more help, see the guide to
  [Bootstrap image styling](https://getbootstrap.com/docs/4.0/content/images/).

* Also see the Bootstrap utilities, such as
  [borders](https://getbootstrap.com/docs/4.0/utilities/borders/).

The site's [front page](https://www.kubeflow.org/):

* See the [page source](https://github.com/kubeflow/website/blob/master/content/en/_index.html).

* The CSS styles are in the [project variables file](https://github.com/kubeflow/website/blob/master/assets/scss/_variables_project.scss).

* The page uses the [cover block](https://www.docsy.dev/docs/adding-content/shortcodes/#blocks-cover) defined by the theme.

* The page also uses the [linkdown block](https://www.docsy.dev/docs/adding-content/shortcodes/#blocks-link-down).

## Using Hugo shortcodes

Sometimes it's useful to define a snippet of information in one place and reuse it wherever we need it. 
For example, we want to be able to refer to the minimum version of various frameworks/libraries throughout the docs, 
without causing a maintenance nightmare.

For this purpose, we use Hugo's "shortcodes". 
Shortcodes are similar to Django variables. You define a shortcode in a file, then use a specific markup 
to invoke the shortcode in the docs. That markup is replaced by the content of the shortcode file when the page is built.

To create a shortcode:

1. Add an HTML file in the `/website/layouts/shortcodes/` directory. 
   The file name must be short and meaningful, as it determines the shortcode you and others use in the docs.

2. For the file content, add the text and HTML markup that should replace the shortcode markup when the web page is built.

To use a shortcode in a document, wrap the name of the shortcode in braces and percent signs like this:

  ```
  {{% shortcode-name %}}
  ```

The shortcode name is the file name minus the `.html` file extension.

**Example:** The following shortcode defines the minimum required version of Kubernetes:

* File name of the shortcode:

  ```
  kubernetes-min-version.html
  ```

* Content of the shortcode:

  ```
  1.8
  ```

* Usage in a document:

  ```
  You need Kubernetes version {{% kubernetes-min-version %}} or later.
  ```

Useful Hugo docs:

* [Shortcode templates](https://gohugo.io/templates/shortcode-templates/)
* [Shortcodes](https://gohugo.io/content-management/shortcodes/)

## Versioning of the docs

For each stable release, we create a new branch for the relevant documentation. 
For example, the documentation for the v0.2 stable release is maintained in the [v0.2-branch](https://github.com/kubeflow/website/tree/v0.2-branch).
Each branch has a corresponding Netlify website that automatically syncs each merged PR.

The versioned sites follow this convention:

* `www.kubeflow.org` always points to the current *master branch*
* `master.kubeflow.org` always points to GitHub head
* `vXXX-YYY.kubeflow.org` points to the release at vXXX.YYY-branch

We also hook up each version to the dropdown on the website menu bar. 


Whenever any documents reference any source code, you should use the version shortcode in the links, like so:

```
https://github.com/kubeflow/kubeflow/blob/{{< params "githubbranch" >}}/scripts/gke/deploy.sh
```

This ensures that all the links in a versioned webpage point to the correct branch.



================================================
File: config.toml
================================================
baseURL = "/"
title = "Kubeflow"
description = "Kubeflow makes deployment of ML Workflows on Kubernetes straightforward and automated"

enableRobotsTXT = true

theme = ["docsy"]

###############################################################################
# Docsy
###############################################################################
enableGitInfo = true

# language settings
contentDir = "content/en"
defaultContentLanguage = "en"
# tell Hugo not to include the /en/ element in the URL path for English docs
defaultContentLanguageInSubdir = false
# useful when translating
enableMissingTranslationPlaceholders = true
# disable taxonomies
disableKinds = ["taxonomy"]
# deprecated directories
ignoreFiles = []

###############################################################################
# Hugo - Top-level navigation (horizontal)
###############################################################################
[menu]
  [[menu.main]]
    name = "Kubeflow Summit"
    weight = -1000
    pre = "<i class='fas fa-calendar pr-2' style='color: #FFC107'></i>"
    post = "<br><span class='badge badge-warning'>April 1st, 2025</span> <span class='badge badge-warning'>London, England</span> "
    url = "https://events.linuxfoundation.org/kubecon-cloudnativecon-europe/co-located-events/kubeflow-summit/"
  [[menu.main]]
    name = "GSoC 2025"
    weight = -900
    pre = "<i class='fas pr-2'><img src='/docs/images/logos/gsoc.svg' style='height: 1.22em;'></i>"
      post = "<br><span class='badge badge-info'>Coming Soon</span>"
    url = "/events/gsoc-2025/"
  [[menu.main]]
    name = "Docs"
    weight = -102
    pre = "<i class='fas fa-book pr-2'></i>"
    url = "/docs/"
  [[menu.main]]
    name = "Events"
    weight = -101
    pre = "<i class='fas fa-calendar pr-2'></i>"
    url = "/events/"
  [[menu.main]]
    name = "Blog"
    weight = -100
    pre = "<i class='fas fa-rss pr-2'></i>"
    url = "https://blog.kubeflow.org/"
  [[menu.main]]
    name = "GitHub"
    weight = -99
    pre = "<i class='fab fa-github pr-2'></i>"
    url = "https://github.com/kubeflow/"

###############################################################################
# Docsy - Output Formats
###############################################################################
[outputs]
section = [ "HTML" ]

###############################################################################
# Docsy - Goldmark markdown parser
###############################################################################
[markup]
  [markup.goldmark]
    [markup.goldmark.renderer]
      unsafe = true

    # For MathJax
    # https://gohugo.io/content-management/mathematics/#setup
    [markup.goldmark.extensions]
      [markup.goldmark.extensions.passthrough]
        enable = true
        [markup.goldmark.extensions.passthrough.delimiters]
          block = [['\[', '\]'], ['$$', '$$']]
          inline = [['\(', '\)']]

  [markup.highlight]
    # See a complete list of available styles at https://xyproto.github.io/splash/docs/all.html
    style = "tango"
    guessSyntax = "true"

###############################################################################
# Docsy - DrawIO configuration
###############################################################################
[params.drawio]
enable = true

###############################################################################
# Docsy - Image processing configuration
###############################################################################
[imaging]
  resampleFilter = "CatmullRom"
  quality = 75
  anchor = "smart"

###############################################################################
# Docsy - Services configuration
###############################################################################
[services]
  [services.googleAnalytics]
  id = "G-Y2KDEK0998"

###############################################################################
# Docsy - Language configuration
###############################################################################
[languages]
  [languages.en]
    title = "Kubeflow"
    languageName ="English"
    weight = 1

    [languages.en.params]
      description = "Kubeflow makes deployment of ML Workflows on Kubernetes straightforward and automated"

###############################################################################
# Docsy - Site Parameters
###############################################################################
[params]
  github_repo = "https://github.com/kubeflow/website"
  github_project_repo = "https://github.com/kubeflow/kubeflow"

  RSSLink = "/index.xml"
  author = "kubeflow.org"
  github = "kubeflow"

  copyright = "The Kubeflow Authors."
  privacy_policy = "https://policies.google.com/privacy"
  trademark = "https://www.linuxfoundation.org/trademark-usage/"

  # Google Custom Search Engine ID.
  gcs_engine_id = "007239566369470735695:624rglujm-w"

  # Text label for the version menu in the top bar of the website.
  version_menu = "Version"

  # The major.minor version tag for the version of the docs represented in this
  # branch of the repository. Used in the "version-banner" partial to display a
  # version number for this doc set.
  version = "master"

  # Flag used in the "version-banner" partial to decide whether to display a
  # banner on every page indicating that this is an archived version of the docs.
  archived_version = false

  # A link to latest version of the docs. Used in the "version-banner" partial to
  # point people to the main doc site.
  url_latest_version = "https://kubeflow.org/docs/"

  # A variable used in various docs to determine URLs for config files etc.
  # To find occurrences, search the repo for 'params "githubbranch"'.
  github_branch = "master"

  # Disable MathJax by default
  # NOTE: enable it per-page with `mathjax: true` in front matter
  mathjax = false

  # Disable Swagger UI by default
  # NOTE: enable it per-page with `swaggerui: true` in front matter
  swaggerui = false

  # Social media accounts
  [params.social]

    # Twitter account (used to set `twitter:site` in the SEO partial)
    twitter = "kubeflow"

  # These entries appear in the drop-down menu at the top of the website.
  [[params.versions]]
    version = "master"
    githubbranch = "master"
    url = "https://master.kubeflow.org"
  [[params.versions]]
    version = "v1.9"
    githubbranch = "v1.9-branch"
    url = "https://v1-9-branch.kubeflow.org"
  [[params.versions]]
    version = "v1.8"
    githubbranch = "v1.8-branch"
    url = "https://v1-8-branch.kubeflow.org"
  [[params.versions]]
    version = "v1.7"
    githubbranch = "v1.7-branch"
    url = "https://v1-7-branch.kubeflow.org"
  [[params.versions]]
    version = "v1.6"
    githubbranch = "v1.6-branch"
    url = "https://v1-6-branch.kubeflow.org"
  [[params.versions]]
    version = "v1.5"
    githubbranch = "v1.5-branch"
    url = "https://v1-5-branch.kubeflow.org"
  [[params.versions]]
    version = "v1.4"
    githubbranch = "v1.4-branch"
    url = "https://v1-4-branch.kubeflow.org"
  [[params.versions]]
    version = "v1.3"
    githubbranch = "v1.3-branch"
    url = "https://v1-3-branch.kubeflow.org"
  [[params.versions]]
    version = "v1.2"
    githubbranch = "v1.2-branch"
    url = "https://v1-2-branch.kubeflow.org"
  [[params.versions]]
    version = "v1.1"
    githubbranch = "v1.1-branch"
    url = "https://v1-1-branch.kubeflow.org"
  [[params.versions]]
    version = "v1.0"
    githubbranch = "v1.0-branch"
    url = "https://v1-0-branch.kubeflow.org"
  [[params.versions]]
    version = "v0.7"
    githubbranch = "v0.7-branch"
    url = "https://v0-7.kubeflow.org"
  [[params.versions]]
    version = "v0.6"
    githubbranch = "v0.6-branch"
    url = "https://v0-6.kubeflow.org"
  [[params.versions]]
    version = "v0.5"
    githubbranch = "v0.5-branch"
    url = "https://v0-5.kubeflow.org"
  [[params.versions]]
    version = "v0.4"
    githubbranch = "v0.4-branch"
    url = "https://v0-4.kubeflow.org"
  [[params.versions]]
    version = "v0.3"
    githubbranch = "v0.3-branch"
    url = "https://v0-3.kubeflow.org"

  # User interface configuration
  [params.ui]
    # Enable the logo
    navbar_logo = true
    # Enable to show the side bar menu in its compact state.
    sidebar_menu_compact = true
    # Enable the search box in the side bar.
    sidebar_search_disable = false
    # Set to true to disable breadcrumb navigation.
    breadcrumb_disable = false
    # Show expand/collapse icon for sidebar sections
    sidebar_menu_foldable = true
    # Disable about button in footer
    footer_about_disable = true

      # Adds a H2 section titled "Feedback" to the bottom of each doc. The responses are sent to Google Analytics as events.
      # This feature depends on [services.googleAnalytics] and will be disabled if "services.googleAnalytics.id" is not set.
      # If you want this feature, but occasionally need to remove the "Feedback" section from a single page,
      # add "hide_feedback: true" to the page's front matter.
      [params.ui.feedback]
        enable = true
        # The responses that the user sees after clicking "yes" (the page was helpful) or "no" (the page was not helpful).
        # NOTE: the actual content of the responses is set in the "layouts/partials/feedback.html" file.
        yes = ""
        no = ""

  # Links in footer
  [params.links]
    [[params.links.user]]
      name = "Twitter"
      url = "https://twitter.com/kubeflow/"
      icon = "fab fa-twitter"
      desc = "Follow us on Twitter to get the latest news!"
    [[params.links.user]]
      name = "Kubeflow Slack"
      url = "/docs/about/community/#kubeflow-slack-channels"
      icon = "fab fa-slack"
      desc = "Join the Kubeflow Slack Workspace!"
    [[params.links.user]]
      name = "Kubeflow Mailing List"
      url = "/docs/about/community/#kubeflow-mailing-list"
      icon = "fa fa-envelope"
      desc = "Join the Kubeflow Mailing List!"
    [[params.links.user]]
      name = "Kubeflow Community Calendars"
      url = "/docs/about/community/#kubeflow-community-meetings"
      icon = "fa fa-calendar"
      desc = "View the Kubeflow Community Calendars!"



================================================
File: LICENSE
================================================
Attribution 4.0 International

=======================================================================

Creative Commons Corporation ("Creative Commons") is not a law firm and
does not provide legal services or legal advice. Distribution of
Creative Commons public licenses does not create a lawyer-client or
other relationship. Creative Commons makes its licenses and related
information available on an "as-is" basis. Creative Commons gives no
warranties regarding its licenses, any material licensed under their
terms and conditions, or any related information. Creative Commons
disclaims all liability for damages resulting from their use to the
fullest extent possible.

Using Creative Commons Public Licenses

Creative Commons public licenses provide a standard set of terms and
conditions that creators and other rights holders may use to share
original works of authorship and other material subject to copyright
and certain other rights specified in the public license below. The
following considerations are for informational purposes only, are not
exhaustive, and do not form part of our licenses.

     Considerations for licensors: Our public licenses are
     intended for use by those authorized to give the public
     permission to use material in ways otherwise restricted by
     copyright and certain other rights. Our licenses are
     irrevocable. Licensors should read and understand the terms
     and conditions of the license they choose before applying it.
     Licensors should also secure all rights necessary before
     applying our licenses so that the public can reuse the
     material as expected. Licensors should clearly mark any
     material not subject to the license. This includes other CC-
     licensed material, or material used under an exception or
     limitation to copyright. More considerations for licensors:
	wiki.creativecommons.org/Considerations_for_licensors

     Considerations for the public: By using one of our public
     licenses, a licensor grants the public permission to use the
     licensed material under specified terms and conditions. If
     the licensor's permission is not necessary for any reason--for
     example, because of any applicable exception or limitation to
     copyright--then that use is not regulated by the license. Our
     licenses grant only permissions under copyright and certain
     other rights that a licensor has authority to grant. Use of
     the licensed material may still be restricted for other
     reasons, including because others have copyright or other
     rights in the material. A licensor may make special requests,
     such as asking that all changes be marked or described.
     Although not required by our licenses, you are encouraged to
     respect those requests where reasonable. More_considerations
     for the public: 
	wiki.creativecommons.org/Considerations_for_licensees

=======================================================================

Creative Commons Attribution 4.0 International Public License

By exercising the Licensed Rights (defined below), You accept and agree
to be bound by the terms and conditions of this Creative Commons
Attribution 4.0 International Public License ("Public License"). To the
extent this Public License may be interpreted as a contract, You are
granted the Licensed Rights in consideration of Your acceptance of
these terms and conditions, and the Licensor grants You such rights in
consideration of benefits the Licensor receives from making the
Licensed Material available under these terms and conditions.


Section 1 -- Definitions.

  a. Adapted Material means material subject to Copyright and Similar
     Rights that is derived from or based upon the Licensed Material
     and in which the Licensed Material is translated, altered,
     arranged, transformed, or otherwise modified in a manner requiring
     permission under the Copyright and Similar Rights held by the
     Licensor. For purposes of this Public License, where the Licensed
     Material is a musical work, performance, or sound recording,
     Adapted Material is always produced where the Licensed Material is
     synched in timed relation with a moving image.

  b. Adapter's License means the license You apply to Your Copyright
     and Similar Rights in Your contributions to Adapted Material in
     accordance with the terms and conditions of this Public License.

  c. Copyright and Similar Rights means copyright and/or similar rights
     closely related to copyright including, without limitation,
     performance, broadcast, sound recording, and Sui Generis Database
     Rights, without regard to how the rights are labeled or
     categorized. For purposes of this Public License, the rights
     specified in Section 2(b)(1)-(2) are not Copyright and Similar
     Rights.

  d. Effective Technological Measures means those measures that, in the
     absence of proper authority, may not be circumvented under laws
     fulfilling obligations under Article 11 of the WIPO Copyright
     Treaty adopted on December 20, 1996, and/or similar international
     agreements.

  e. Exceptions and Limitations means fair use, fair dealing, and/or
     any other exception or limitation to Copyright and Similar Rights
     that applies to Your use of the Licensed Material.

  f. Licensed Material means the artistic or literary work, database,
     or other material to which the Licensor applied this Public
     License.

  g. Licensed Rights means the rights granted to You subject to the
     terms and conditions of this Public License, which are limited to
     all Copyright and Similar Rights that apply to Your use of the
     Licensed Material and that the Licensor has authority to license.

  h. Licensor means the individual(s) or entity(ies) granting rights
     under this Public License.

  i. Share means to provide material to the public by any means or
     process that requires permission under the Licensed Rights, such
     as reproduction, public display, public performance, distribution,
     dissemination, communication, or importation, and to make material
     available to the public including in ways that members of the
     public may access the material from a place and at a time
     individually chosen by them.

  j. Sui Generis Database Rights means rights other than copyright
     resulting from Directive 96/9/EC of the European Parliament and of
     the Council of 11 March 1996 on the legal protection of databases,
     as amended and/or succeeded, as well as other essentially
     equivalent rights anywhere in the world.

  k. You means the individual or entity exercising the Licensed Rights
     under this Public License. Your has a corresponding meaning.


Section 2 -- Scope.

  a. License grant.

       1. Subject to the terms and conditions of this Public License,
          the Licensor hereby grants You a worldwide, royalty-free,
          non-sublicensable, non-exclusive, irrevocable license to
          exercise the Licensed Rights in the Licensed Material to:

            a. reproduce and Share the Licensed Material, in whole or
               in part; and

            b. produce, reproduce, and Share Adapted Material.

       2. Exceptions and Limitations. For the avoidance of doubt, where
          Exceptions and Limitations apply to Your use, this Public
          License does not apply, and You do not need to comply with
          its terms and conditions.

       3. Term. The term of this Public License is specified in Section
          6(a).

       4. Media and formats; technical modifications allowed. The
          Licensor authorizes You to exercise the Licensed Rights in
          all media and formats whether now known or hereafter created,
          and to make technical modifications necessary to do so. The
          Licensor waives and/or agrees not to assert any right or
          authority to forbid You from making technical modifications
          necessary to exercise the Licensed Rights, including
          technical modifications necessary to circumvent Effective
          Technological Measures. For purposes of this Public License,
          simply making modifications authorized by this Section 2(a)
          (4) never produces Adapted Material.

       5. Downstream recipients.

            a. Offer from the Licensor -- Licensed Material. Every
               recipient of the Licensed Material automatically
               receives an offer from the Licensor to exercise the
               Licensed Rights under the terms and conditions of this
               Public License.

            b. No downstream restrictions. You may not offer or impose
               any additional or different terms or conditions on, or
               apply any Effective Technological Measures to, the
               Licensed Material if doing so restricts exercise of the
               Licensed Rights by any recipient of the Licensed
               Material.

       6. No endorsement. Nothing in this Public License constitutes or
          may be construed as permission to assert or imply that You
          are, or that Your use of the Licensed Material is, connected
          with, or sponsored, endorsed, or granted official status by,
          the Licensor or others designated to receive attribution as
          provided in Section 3(a)(1)(A)(i).

  b. Other rights.

       1. Moral rights, such as the right of integrity, are not
          licensed under this Public License, nor are publicity,
          privacy, and/or other similar personality rights; however, to
          the extent possible, the Licensor waives and/or agrees not to
          assert any such rights held by the Licensor to the limited
          extent necessary to allow You to exercise the Licensed
          Rights, but not otherwise.

       2. Patent and trademark rights are not licensed under this
          Public License.

       3. To the extent possible, the Licensor waives any right to
          collect royalties from You for the exercise of the Licensed
          Rights, whether directly or through a collecting society
          under any voluntary or waivable statutory or compulsory
          licensing scheme. In all other cases the Licensor expressly
          reserves any right to collect such royalties.


Section 3 -- License Conditions.

Your exercise of the Licensed Rights is expressly made subject to the
following conditions.

  a. Attribution.

       1. If You Share the Licensed Material (including in modified
          form), You must:

            a. retain the following if it is supplied by the Licensor
               with the Licensed Material:

                 i. identification of the creator(s) of the Licensed
                    Material and any others designated to receive
                    attribution, in any reasonable manner requested by
                    the Licensor (including by pseudonym if
                    designated);

                ii. a copyright notice;

               iii. a notice that refers to this Public License;

                iv. a notice that refers to the disclaimer of
                    warranties;

                 v. a URI or hyperlink to the Licensed Material to the
                    extent reasonably practicable;

            b. indicate if You modified the Licensed Material and
               retain an indication of any previous modifications; and

            c. indicate the Licensed Material is licensed under this
               Public License, and include the text of, or the URI or
               hyperlink to, this Public License.

       2. You may satisfy the conditions in Section 3(a)(1) in any
          reasonable manner based on the medium, means, and context in
          which You Share the Licensed Material. For example, it may be
          reasonable to satisfy the conditions by providing a URI or
          hyperlink to a resource that includes the required
          information.

       3. If requested by the Licensor, You must remove any of the
          information required by Section 3(a)(1)(A) to the extent
          reasonably practicable.

       4. If You Share Adapted Material You produce, the Adapter's
          License You apply must not prevent recipients of the Adapted
          Material from complying with this Public License.


Section 4 -- Sui Generis Database Rights.

Where the Licensed Rights include Sui Generis Database Rights that
apply to Your use of the Licensed Material:

  a. for the avoidance of doubt, Section 2(a)(1) grants You the right
     to extract, reuse, reproduce, and Share all or a substantial
     portion of the contents of the database;

  b. if You include all or a substantial portion of the database
     contents in a database in which You have Sui Generis Database
     Rights, then the database in which You have Sui Generis Database
     Rights (but not its individual contents) is Adapted Material; and

  c. You must comply with the conditions in Section 3(a) if You Share
     all or a substantial portion of the contents of the database.

For the avoidance of doubt, this Section 4 supplements and does not
replace Your obligations under this Public License where the Licensed
Rights include other Copyright and Similar Rights.


Section 5 -- Disclaimer of Warranties and Limitation of Liability.

  a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE
     EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS
     AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF
     ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,
     IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,
     WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR
     PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,
     ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT
     KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT
     ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.

  b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE
     TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,
     NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,
     INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,
     COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR
     USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR
     DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR
     IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.

  c. The disclaimer of warranties and limitation of liability provided
     above shall be interpreted in a manner that, to the extent
     possible, most closely approximates an absolute disclaimer and
     waiver of all liability.


Section 6 -- Term and Termination.

  a. This Public License applies for the term of the Copyright and
     Similar Rights licensed here. However, if You fail to comply with
     this Public License, then Your rights under this Public License
     terminate automatically.

  b. Where Your right to use the Licensed Material has terminated under
     Section 6(a), it reinstates:

       1. automatically as of the date the violation is cured, provided
          it is cured within 30 days of Your discovery of the
          violation; or

       2. upon express reinstatement by the Licensor.

     For the avoidance of doubt, this Section 6(b) does not affect any
     right the Licensor may have to seek remedies for Your violations
     of this Public License.

  c. For the avoidance of doubt, the Licensor may also offer the
     Licensed Material under separate terms or conditions or stop
     distributing the Licensed Material at any time; however, doing so
     will not terminate this Public License.

  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public
     License.


Section 7 -- Other Terms and Conditions.

  a. The Licensor shall not be bound by any additional or different
     terms or conditions communicated by You unless expressly agreed.

  b. Any arrangements, understandings, or agreements regarding the
     Licensed Material not stated herein are separate from and
     independent of the terms and conditions of this Public License.


Section 8 -- Interpretation.

  a. For the avoidance of doubt, this Public License does not, and
     shall not be interpreted to, reduce, limit, restrict, or impose
     conditions on any use of the Licensed Material that could lawfully
     be made without permission under this Public License.

  b. To the extent possible, if any provision of this Public License is
     deemed unenforceable, it shall be automatically reformed to the
     minimum extent necessary to make it enforceable. If the provision
     cannot be reformed, it shall be severed from this Public License
     without affecting the enforceability of the remaining terms and
     conditions.

  c. No term or condition of this Public License will be waived and no
     failure to comply consented to unless expressly agreed to by the
     Licensor.

  d. Nothing in this Public License constitutes or may be interpreted
     as a limitation upon, or waiver of, any privileges and immunities
     that apply to the Licensor or You, including from the legal
     processes of any jurisdiction or authority.


=======================================================================

Creative Commons is not a party to its public
licenses. Notwithstanding, Creative Commons may elect to apply one of
its public licenses to material it publishes and in those instances
will be considered the "Licensor." The text of the Creative Commons
public licenses is dedicated to the public domain under the CC0 Public
Domain Dedication. Except for the limited purpose of indicating that
material is shared under a Creative Commons public license or as
otherwise permitted by the Creative Commons policies published at
creativecommons.org/policies, Creative Commons does not authorize the
use of the trademark "Creative Commons" or any other trademark or logo
of Creative Commons without its prior written consent including,
without limitation, in connection with any unauthorized modifications
to any of its public licenses or any other arrangements,
understandings, or agreements concerning use of licensed material. For
the avoidance of doubt, this paragraph does not form part of the
public licenses.

Creative Commons may be contacted at creativecommons.org.



================================================
File: netlify.toml
================================================
[build]
  publish = "public"
  # setting baseURL is required for `PAGE.Permalink` to correctly include the full `https://DOMAIN/` prefix
  # which is required for things like `twitter:image` meta tags to work correctly
  command = "cd themes/docsy && git submodule update -f --init && npm install && cd ../.. && hugo --gc --minify"

[context.deploy-preview]
  # for deploy previews, the domain will be `https://deploy-preview-PR_NUMBER--competent-brattain-de2d6d.netlify.app/`
  # which can be read from the `DEPLOY_PRIME_URL` environment variable in Netlify
  command = "cd themes/docsy && git submodule update -f --init && npm install && cd ../.. && hugo --gc --minify --baseURL $DEPLOY_PRIME_URL"

[context.production]
  # for production, the domain will be `https://www.kubeflow.org/`
  command = "cd themes/docsy && git submodule update -f --init && npm install && cd ../.. && hugo --gc --minify --baseURL https://www.kubeflow.org/"

[[context.deploy-preview.plugins]]
package = "netlify-plugin-checklinks"

  [context.deploy-preview.plugins.inputs]

  # If a link contains these patterns it will be ignored.
  skipPatterns = [
    # ignore absolute links, which are only found in tags like `<meta property="og:url" content="URL_HERE">`
    # https://github.com/Munter/netlify-plugin-checklinks/issues/388
    "competent-brattain-de2d6d.netlify.app",
    "public/docs/examples/shared-resources",
  ]

[context.deploy-preview.environment]
  HUGO_ENV = "development"
  HUGO_VERSION = "0.124.1"
  NODE_VERSION = "18"

[context.production.environment]
  HUGO_ENV = "production"
  HUGO_VERSION = "0.124.1"
  NODE_VERSION = "18"

[context.branch-deploy.environment]
  HUGO_ENV = "development"
  HUGO_VERSION = "0.124.1"
  NODE_VERSION = "18"



================================================
File: OWNERS
================================================
approvers:
  - andreyvelich
  - franciscojavierarceo
  - juliusvonkohout 
  - johnugeorge
  - terrytangyuan
  - zijianjoy

reviewers:
  - varodrig

emeritus_approvers:
  - james-jwu
  - jbottum




================================================
File: package.json
================================================
{
  "name": "website",
  "devDependencies": {
    "autoprefixer": "^10.4.0",
    "netlify-plugin-checklinks": "^4.1.1",
    "postcss": "^8.4.1",
    "postcss-cli": "^9.1.0"
  }
}



================================================
File: prow_config.yaml
================================================
workflows: []


================================================
File: quick-github-guide.md
================================================
# Quick guide to working with a GitHub repository

This page is intended for people who want to update the
[Kubeflow docs](https://www.kubeflow.org/docs/) and
who don't use Git or GitHub often. The page gives you a quick guide to
get going with a GitHub repository, using either the GitHub web user interface 
(UI) or Git on the command line.

## Using the GitHub web UI

**Note:** The GitHub web UI is suitable for quick updates to a single file. If
your update is more complex or you need to update more than one file within one
pull request (PR), then the command line provides a better experience.

Follow these steps to edit a page using the GitHub UI:

1. Sign in to GitHub if you haven't yet done so.

1. Go to the page that you want to edit on the
  [Kubeflow website](https://www.kubeflow.org/docs/).

1. Click **Edit this page**.

1. If this is the first time you're updating a file in the Kubeflow
  website repository, a screen opens asking you to *fork* the repository. A
  fork is a copy of the repository where you can make your updates before
  submitting them for review. You only have to fork the repository once:

    * Click **Fork this repository**.
    * If GitHub asks you **Where should we fork website** and offers your
      username as an option, click the link on your username.	
    * Wait a few seconds while GitHub makes a copy of the repository at	
     `https://github.com/yourusername/website`. This copy is your *fork*	
     of the `kubeflow/website` repository.

1. The GitHub editor interface opens for the selected page.
  Make your updates to the content.

1. Click **Preview changes** at the top of the editing area to see the effect of your changes.

1. If you need to make more changes, click **Edit file** at the top of the preview area.

1. When you are ready to submit your changes, scroll down to the 
  **Propose file change**
   section at the bottom of the editing area.

      * Enter a short description of your update. This short description becomes the 
        title of your pull request (PR).

      * In the second text box (for the extended description), enter a more detailed
        description.

1. Click **Propose file change**. A new screen appears, offering you the 
  opportunity to open a pull request.

1. Click **Create pull request**. 

1. Optionally, edit the pull request title and description.

1. Make sure **Allow edits from maintainers** remains checked.

1. Click **Create pull request** again. You have now sent a request to the repository
  maintainers to review your change.

1. Check the online preview of your changes:

      * Wait for the automated PR workflow to do some checks. When it's ready,
        you should see a comment like this: **deploy/netlify — Deploy preview ready!**
      * Click **Details** to the right of "Deploy preview ready" to see a preview
        of your updates.

## Using the command line

Here's a quick guide to a fairly standard GitHub workflow using Git on the command line:

1. Fork the kubeflow/website repository:

    * Go to the [kubeflow/website 
      repository](https://github.com/kubeflow/website) on GitHub.
    * Click **Fork** to make your own copy of the repository. GitHub creates a 
      copy at `https://github.com/<your-github-username>/website`.

1. Open a command window on your local machine.

1. Clone your forked repository, to copy the files down to your local machine.
  This example creates a directory called `kubeflow` and uses SSH cloning to
  download the files:

    ```
    mkdir kubeflow
    cd kubeflow/
    git clone git@github.com:<your-github-username>/website.git
    cd website/
    ```

1. Add the upstream repository as a Git remote repository:

    ```
    git remote add upstream https://github.com/kubeflow/website.git
    ```

1. Check your remotes:

    ```
    git remote -vv
    ```

    You should have 2 remote repositories:

      -  `origin` - points to your own fork of the repository on gitHub -
         that is, the one you cloned your local repository from.
      -  `upstream` - points to the actual repository on gitHub.

1. Create a branch. In this example, replace `doc-updates` with any branch name
  you like. Choose a branch name that helps you recognize the updates you plan
  to make in that branch:

    ```
    git checkout -b doc-updates
    ```

1. Add and edit the files as you like. The doc pages are in the
  `/website/content/docs/` directory.

1. Run `git status` at any time, to check the status of your local files.
  Git tells you which files need adding or committing to your local repository.

1. Commit your updated files to your local Git repository. Example commit:

    ```
    git commit -a -m "Fixed some doc errors."
    ```

    Or:

    ```
    git add add-this-doc.md
    git commit -a -m "Added a shiny new doc."
    ```

1. Push from your branch (for example, `doc-updates`) to **the relevant branch
  on your fork on GitHub:**

    ```
    git checkout doc-updates
    git push origin doc-updates
    ```

1. When you're ready to start the review process, create a pull request (PR)
  **in the branch** on **your fork** on the GitHub UI, based on the above push.
  The PR is auto-sent to the upstream repository - that is, the one you forked 
  from.

1. If you need to change the files in your PR, continue changing them
  locally in the same branch, then push them again in the same way. GitHub
  automatically sends them through to the same PR on the upstream repository!

1. **Hint:** If you're authenticating to GitHub via SSH, use `ssh-add` to add
  your SSH key passphrase to the managing agent, so that you don't have to
  keep authenticating to GitHub. You need to do this again after every reboot.

## More information

For further information about the GitHub workflow, refer to the
[GitHub guide to pull requests](https://help.github.com/en/articles/creating-a-pull-request).


================================================
File: .hugo_build.lock
================================================



================================================
File: assets/fonts/Inter-Medium.ttf
================================================
[Non-text file]



================================================
File: assets/scss/_styles_project.scss
================================================
// --------------------------------------------------
// popover styles
// --------------------------------------------------
.popover-header {
  color: #fff;
  font-weight: 600;
  background-color: $dark;
  padding: 0.75rem;
}

// --------------------------------------------------
// reduce padding for small screens
// --------------------------------------------------
@include media-breakpoint-down(md) {
  .td-main {
    main {
      padding-top: 1rem;
    }
  }
}

// --------------------------------------------------
// increase 80% content width limit for large screens
// --------------------------------------------------
.td-max-width-on-larger-screens {
    @include media-breakpoint-up(lg) {
        max-width: 90%;
    }
}

// --------------------------------------------------
// color the sidebars darker than main content area
// --------------------------------------------------
@include media-breakpoint-down(sm) {
  .td-main {
    padding-left: 0;
    padding-right: 0;
  }
  .td-sidebar {
    background-color: $td-sidebar-bg-color;
  }
}
@include media-breakpoint-up(md) {
  .td-outer {
    background-color: $td-sidebar-bg-color;
    height: unset;
  }
  .td-sidebar, .td-sidebar-toc {
    background-color: unset;
  }
  .td-main {
    padding-left: 0;
    padding-right: 0;
  }
  main {
    background-color: #ffffff;
  }
}

// --------------------------------------------------
// add border below search on small devices
// --------------------------------------------------
@include media-breakpoint-down(md) {
   .td-sidebar {
     border-bottom: 0.1rem solid $border-color;
   }
}

// --------------------------------------------------
// fix positions
// --------------------------------------------------
@include media-breakpoint-up(md) {
  .td-main {
    .td-main_inner {
      // note, this is required to ensure the footer not visible for short pages
      // which is important to prevent the "search" and "toc" sidebars from being
      // underneath the the header
      min-height: 100vh;

      // ensure the background color is not visible because of left-right padding
      // note that there is a default left-right margin of -15px, which we are
      // selectively overwriting depending on the screen width
      //  - there is a left sidebar for md and above
      //  - there is a right sidebar for xl and above
      margin-left: 0;
      @include media-breakpoint-up(xl) {
        margin-right: 0;
      }
    }

    // left-hand sidebar
    .td-sidebar {
      padding-left: 0;
      padding-right: 0.25rem;
      padding-top: 7rem;
      padding-bottom: 0;

      .td-sidebar__inner {
        position: sticky;
        top: 7rem;
        height: calc(100vh - 7rem);

        padding-left: 0;
        padding-right: 0;
      }
    }

    // main content area
    main {
      padding-top: 7rem;
      padding-bottom: 3rem;
    }

    // right hand sidebar
    .td-sidebar-toc {
      height: unset;
      padding-left: 0;
      padding-right: 0;
      padding-top: 7rem;
      padding-bottom: 0;

      // the default theme makes the outer div stickey, but we use the inner div
      position: relative;
      top: unset;
      overflow-y: unset;

      .td-sidebar-toc__inner {
        position: sticky;
        top: 7rem;
        height: calc(100vh - 7rem);

        padding-left: 1rem;
        padding-right: 1.5rem;

        // allow the toc to scroll
        overflow-y: auto;
      }

      // add separator line before toc list
      .td-toc {
        padding-top: 1rem;
        border-top: 0.1rem solid $border-color;

        // fix the padding of the toc list
        ul {
          margin-bottom: 0;
        }
        a {
          padding-top: 0.2rem;
          padding-bottom: 0.2rem;
        }
      }
    }
  }
}

// --------------------------------------------------
// prevent sidebar from appearing over the footer
// --------------------------------------------------
footer {
  z-index: 1000;
}

// --------------------------------------------------
// remove whitespace after footer
// --------------------------------------------------
footer {
  min-height: auto;

  p {
    margin-bottom: 0.4rem;
    line-height: 1.0rem;
  }

  small {
    font-size: 0.7rem;
  }
}

// --------------------------------------------------
// sidebar styling
// --------------------------------------------------
.td-sidebar {
  padding-left: 0.5rem;
  padding-right: 0.5rem;
  padding-bottom: 0.5rem;

  @include media-breakpoint-down(md) {
    padding-top: 2rem;
  }
}

// sidebar search styling
.td-sidebar__search {
  padding-top: 0;
  padding-bottom: 0.5rem;

  margin: 0;

  .td-search {
    width: 100%;
  }

  @include media-breakpoint-down(md) {
    padding-left: 0.75rem;
    padding-right: 0.75rem;
    .td-search {
      padding-right: 0.25rem;
    }
  }

  @include media-breakpoint-up(md) {
    padding-left: 0;
    padding-right: 0;
    .td-search {
      padding-right: 0.5rem;
    }
  }
}

.td-sidebar-nav {
  padding-left: 0;
  padding-right: 0.75rem;
  padding-top: 0;
  padding-bottom: 2rem;

  margin-left: 0;
  margin-right: 0;
  margin-top: 1rem;
  margin-bottom: 0;

  // extra padding on mobile (in collapsible menu)
  @include media-breakpoint-down(sm) {
    padding-left: 1rem;
    padding-right: 1rem;
    padding-bottom: 1.5rem;

    margin-top: 0.5rem;
  }
}

// reduce padding for the root level of the sidebar
nav.foldable-nav .with-child, nav.foldable-nav .without-child {
  padding-left: 0;
  position: unset;
}

// style the sidebar like a folder tree
nav.foldable-nav {

  // apply styles to the main sidebar sections
  .ul-1 {

    // reduce padding of the sidebar links
    .with-child {
      padding-left: 1.5rem;
      position: relative;
    }
    .without-child {
      padding-left: 0.7rem;
      position: relative;
    }

    // make the active link bold
    a.active {
      color: $primary !important;
      font-weight: 700 !important;
    }

    // bold the chain of pages leading to the active page
    .with-child.active-path > label a {
      font-weight: 700;
    }

    // show a border on the left of open sections
    .with-child > input:checked ~ ul {
      border-left: .1rem dotted $gray-400;

      // round the bottom left corner
      border-bottom-left-radius: 1rem;

      // position the border correctly
      padding-bottom: 0.25rem;
      margin-bottom: 0.5rem;
      margin-left: -0.77rem;
    }

    // color the border for the active path
    .with-child.active-path > ul {
      border-left: .1rem solid rgb(190, 212, 255) !important;
    }

    // make the arrow for open non-active sections gray
    .with-child > input:checked ~ label:before {
      color: $gray-900;
    }

    // make the arrow for open active sections blue
    .with-child.active-path > input:checked ~ label:before {
      color: $primary;
    }
  }
}

// prevent overflow of long names in sidebar
.td-sidebar-nav__section > ul {
  overflow-wrap: break-word;
}

// --------------------------------------------------
// fix the arrow transform animation on desktop
// --------------------------------------------------
@media (hover: hover) and (pointer: fine) {
    nav.foldable-nav {
        .ul-1 .with-child > label:hover:before {
            transition: transform 0.3s;
        }

        .ul-1 .with-child > input:checked ~ label:hover:before {
            transition: transform 0.3s;
        }
    }
}

// --------------------------------------------------
// custom navbar with larger logo, dropdown on mobile
// --------------------------------------------------
.td-navbar {
  min-height: auto;

  .navbar-brand {
    margin: 0;
    padding: 0;

    .text-uppercase {
      display: none;
    }

    .navbar-logo {
      svg {
        display: inline-block;
        position: absolute;
        top: 0;
        z-index: 33;
        padding: 10px;
        margin: 0;
        height: 95px;
        background: white;
        border: 2px solid #4279f4;
        border-top: none;

        @include media-breakpoint-down(md) {
          width: 80px;
          height: auto;
          padding: 6px;
        }
      }
    }
  }

  // this filler ensures that the navbar links are on the right
  // and the links do not go under the logo (which uses absolute positioning)
  .filler {
      flex-grow: 1;
      min-width: 120px;

      @include media-breakpoint-down(md) {
        min-width: 100px;
      }
  }

  // extra padding on mobile (in collapsible menu)
  @include media-breakpoint-down(sm) {
    .navbar-collapse {
      padding-left: 0.5rem;
      padding-right: 0.5rem;
    }
  }

  .navbar-nav {
    // allow wrapping of navbar links
    white-space: normal;
    .dropdown-toggle {
      white-space: normal;
    }

    // prevent long links from taking up too much space
    @include media-breakpoint-between(sm, lg) {
      .nav-item.long-content {
        font-size: 70%;
      }
    }

    @include media-breakpoint-down(md) {
      font-size: .875rem;
      .dropdown {
        min-width: inherit;
      }
    }
  }
}

// --------------------------------------------------
// Home page
// --------------------------------------------------
.td-home {

  // dont color the outer div with the sidebar color
  // as there is no sidebar on the main page
  .td-outer {
      background-color: unset;
  }

  // animate the background color change of navbar
  .td-navbar {
    transition: background-color 75ms linear;
  }

  .card-img-top {
    object-fit: scale-down;
  }

  .text-white {
    font-weight: 400;
  }

  .bg-primary-dark {
    background-color: $dark;

    a {
      border-bottom: 0.1em dotted paleturquoise;

      color: paleturquoise !important;
      font-weight: 600;
      padding: 0 0.2em 0.05em 0.2em;
      text-decoration: none;

      &:hover {
        border-bottom: 1px dotted #fff;

        color: #fff !important;
      }
    }
  }

  .border-primary-dark {
    border-color: $info !important;
  }

  .section-head {
    color: $primary;
    font-weight: bold;
    padding: 0 0 1.9rem 0;
  }

  .image {
    display: block;
  }

  .image img {
    display: block;
    width: 100%;
    height: auto;
  }

  .image.left, .image.right {
    max-width: 45%;
  }

  .image.left::after, .image.right::after {
    clear: both;
    content: "";
    display: block;
  }

  .image.left {
    float: left;
    margin: 0 1.5em 1.5em 0;
  }

  .image.right {
    float: right;
    margin: 0 0 1.5em 1.5em;
  }

  #overview, #pageContent, #cncf, #community {
    padding: 4rem 0 4rem 0 !important;
  }

  #overview p, #community p {
    font-size: 1.125em;
  }

  #overview {
    border-bottom: 0.1rem solid #b6d0ff;
  }

  #pageContent .container {
    max-width: 70rem;
  }

  #community {
    border-top: 0.1rem solid #b6d0ff;
    border-bottom: 0.1rem solid #b6d0ff;
  }

  #cncf {
    margin-top: 1.5rem;
    margin-bottom: 1.5rem;

    .cncf-title {
      color: #6b7281;
      font-weight: bold;
      padding-top: 1.6rem;
    }
  }

  #pageContent .lead {
    margin: 0 1.5em 3em 1.5em;
  }

  #pageContent .lead > .image {
    padding: 0 1.5em;
    max-width: 60%;
    margin-bottom: 1.5em;
  }

  #pageContent .lead > .text p {
    font-size: 1em;
  }

  @include media-breakpoint-up(sm) {
    #overview, #community {
      font-size: 1.125em;
    }
    #pageContent .lead > .image {
      max-width: 35%;
      margin-bottom: 3em;
    }
    #pageContent .lead > .text p {
      font-size: 1em;
    }
  }

  @include media-breakpoint-up(md) {
    #pageContent .lead {
      margin-top: 1em;
      display: -ms-flexbox;
      display: flex;
      -ms-flex-direction: row;
      flex-direction: row;
      -ms-flex-wrap: nowrap;
      flex-wrap: nowrap;
      -ms-flex-pack: justify;
      justify-content: space-between;
      -ms-flex-align: stretch;
      align-items: stretch;
    }
    #pageContent .lead > * {
      -ms-flex: 0 1 auto;
      flex: 0 1 auto;
    }
    #pageContent .lead > .image {
      display: block;
      margin: 0 auto;
      max-width: 100%;
    }
    #pageContent .lead > .image > img {
      max-width: 80%;
      margin: 0 auto;
    }
    #pageContent .lead > .text {
      -ms-flex-preferred-size: 70%;
      flex-basis: 70%;
    }
    #pageContent .lead:nth-child(2n+0) > .image {
      -ms-flex-order: 2;
      order: 2;
    }
    #pageContent .lead:nth-child(2n+0) > .text {
      -ms-flex-order: 1;
      order: 1;
    }
  }
}

// --------------------------------------------------
// Installing Kubeflow page
// --------------------------------------------------
.distributions-table thead {
  background-color: $primary;
  color: $secondary;
}

// --------------------------------------------------
// 404 page
// --------------------------------------------------
.error-page {
  margin-top: 120px;

  ul {
    margin-bottom: 50px;
    list-style-type: none;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-wrap: wrap;
    padding-left: 0;
  }

  li {
    margin-left: 10px;
    margin-right: 10px;
  }

  h1 {
    text-align: center;
    margin-bottom: 20px;
  }

  @include media-breakpoint-between(md, lg) {
    margin-top: 100px;
  }

  @include media-breakpoint-down(md) {
    margin-top: 50px;
  }
}

// --------------------------------------------------
// for tabbed code blocks
// https://github.com/kubeflow/website/pull/2779
// --------------------------------------------------
.nav-tabs {
  border-bottom: none !important;
}

.td-content > ul li,
.td-content > ol li.nav-item {
  margin-bottom: 0px;
}

.td-content .tab-content .highlight {
  margin: 0;
}

.tab-pane {
  border-radius: 0.25rem;
  padding: 0 16px 16px;

  border: 1px solid #dee2e6;

  &:first-of-type.active {
    border-top-left-radius: 0;
  }
}


================================================
File: assets/scss/_variables_project.scss
================================================
/*
Add styles or override the theme's variables here.
*/

html.smooth-scroll {
  scroll-behavior: smooth;
}

// Bootstrap container-max-widths
// NOTE: we increase the max-widths to make the content wider compared to the Bootstrap defaults
$container-max-widths: (
  sm: 768px, // default: 540px, breakpoint: 576px
  md: 992px, // default: 720px, breakpoint: 768px
  lg: 1200px, // default: 960px, breakpoint: 992px
  xl: 1440px // default: 1140px, breakpoint: 1200px
);

// Theme colors
$primary: #4279f4;
$secondary: #fff;
$dark: #213d7a;
$info: #adb5bd;
$light: #dee2e6;

// Nav bar colors
$white: #fff;
$navbar-dark-color: rgba($white, 1);
$navbar-dark-hover-color: rgba($white, 0.75);
$navbar-dark-active-color: $navbar-dark-color;

// Fonts
$google_font_family: "Open+Sans:300,300i,400,400i,600,600i,700,700i&display=swap" !default;



================================================
File: content/en/_index.html
================================================
+++
title = "Kubeflow"
+++

<!-- Hero section -->
{{<blocks/cover title="Kubeflow" image_anchor="center" color="dark">}}
<div class="px-2">
  <p class="lead mt-5 mb-3">The Machine Learning Toolkit for Kubernetes</p>
  <div class="mx-auto">
    <a class="btn btn-lg btn-primary mr-1 mb-4" href="/docs/started/">
      Get Started <i class="fas fa-arrow-alt-circle-right ml-2"></i>
    </a>
    <a class="btn btn-lg btn-secondary ml-1 mb-4" href="/docs/about/contributing/">
      Contribute <i class="fas fa-pencil-alt ml-2"></i>
    </a>
  </div>
  <div class="mt-5">
    {{<blocks/link-down color="light">}}
  </div>
</div>
{{</blocks/cover>}}

<div id="overview" class="text-center">
  <h3 class="section-head">What is Kubeflow?</h3>
  <div class="container">
    <p class="mx-auto col-11 col-xl-7 px-0">
      Kubeflow makes artificial intelligence and machine learning simple, portable, and scalable.
      We are an <i>ecosystem</i> of <a href="https://kubernetes.io/" target="_blank">Kubernetes</a>
      based components for each stage in
      <a href="/docs/started/architecture/#kubeflow-components-in-the-ml-lifecycle" target="_blank">the AI/ML Lifecycle</a>
      with support for best-in-class open source <a href="/docs/started/architecture/#kubeflow-ecosystem" target="_blank">tools and frameworks</a>.
      <br><br>
      <a href="/docs/started/installing-kubeflow/" target="_blank">Deploy Kubeflow</a> anywhere you run Kubernetes.
    </p>
  </div>
</div>

<section id="pageContent">
  <h3 class="section-head text-center">Kubeflow Components</h3>
  <div class="container">
    <div class="card-deck">
      <div class="card border-primary-dark">
        <a href="/docs/components/pipelines/overview/" target="_blank" rel="noopener" >
          <img
            src="/docs/images/logos/kubeflow.png"
            class="card-img-top"
            draggable="false"
            style="padding: 2rem;"
            alt="Kubeflow Pipelines Logo"
          />
        </a>
        <div class="card-body bg-primary-dark">
          <h5 class="card-title text-white section-head">Pipelines</h5>
          <p class="card-text text-white">
            <a target="_blank" rel="noopener" href="/docs/components/pipelines/overview/">Kubeflow Pipelines</a> (KFP) is a platform for building then deploying portable and scalable machine learning workflows using Kubernetes.
          </p>
        </div>
      </div>
      <div class="card border-primary-dark">
        <a href="/docs/components/notebooks/overview/" target="_blank" rel="noopener" >
          <img
            src="/docs/images/logos/jupyter-vscode-rlang.png"
            class="card-img-top"
            draggable="false"
            style="padding: 2rem;"
            alt="Jupyter + VSCode + RLang Logo"
          />
        </a>
        <div class="card-body bg-primary-dark">
          <h5 class="card-title text-white section-head">Notebooks</h5>
          <p class="card-text text-white">
            <a target="_blank" rel="noopener" href="/docs/components/notebooks/overview/">Kubeflow Notebooks</a> lets you run web-based development environments on your Kubernetes cluster by running them inside Pods.
          </p>
        </div>
      </div>
      <div class="card border-primary-dark">
        <a href="/docs/components/central-dash/overview/" target="_blank" rel="noopener" >
          <img
            src="/docs/images/logos/dashboard.png"
            class="card-img-top"
            draggable="false"
            style="padding: 2rem;"
            alt="People Icon"
          />
        </a>
        <div class="card-body bg-primary-dark">
          <h5 class="card-title text-white section-head">Dashboard</h5>
          <p class="card-text text-white">
            <a href="/docs/components/central-dash/overview/" target="_blank" rel="noopener">Kubeflow Central Dashboard</a> is our hub which connects the authenticated web interfaces of Kubeflow and other ecosystem components.
          </p>
        </div>
      </div>
    </div>
    <br />
    <div class="card-deck">
      <div class="card border-primary-dark">
         <a href="/docs/components/trainer/overview/" target="_blank" rel="noopener" >
           <img
             src="/docs/images/logos/kubeflow-trainer.png"
             class="card-img-top"
             draggable="false"
             style="padding: 2rem;"
             alt="Kubeflow Trainer logo"
           />
         </a>
         <div class="card-body bg-primary-dark">
           <h5 class="card-title text-white section-head">Model Training</h5>
           <p class="card-text text-white">
             <a href="/docs/components/trainer/overview/" target="_blank" rel="noopener" >Kubeflow Trainer</a> is a Kubernetes-native project
             designed for LLMs fine-tuning and enabling scalable, distributed training of ML models across
             various frameworks, including PyTorch, JAX, TensorFlow, and others.
           </p>
         </div>
       </div>
      <div class="card border-primary-dark">
        <a href="/docs/components/katib/overview/" target="_blank" rel="noopener" >
          <img
            src="/docs/images/logos/katib.png"
            class="card-img-top"
            draggable="false"
            style="padding: 2rem;"
            alt="Katib Logo"
          />
        </a>
        <div class="card-body bg-primary-dark">
          <h5 class="card-title text-white section-head">AutoML</h5>
          <p class="card-text text-white">
            <a target="_blank" rel="noopener" href="/docs/components/katib/overview/">Katib</a> is a Kubernetes-native project for automated machine learning (AutoML) with support for hyperparameter tuning, early stopping and neural architecture search.
          </p>
        </div>
      </div>
      <div class="card border-primary-dark">
        <a href="https://kserve.github.io/website/" target="_blank" rel="noopener" >
          <img
            src="/docs/images/logos/kserve.png"
            class="card-img-top"
            draggable="false"
            style="padding: 2rem;"
            alt="KServe Logo"
          />
        </a>
        <div class="card-body bg-primary-dark">
          <h5 class="card-title text-white section-head">Model Serving</h5>
          <p class="card-text text-white">
            <a href="/docs/external-add-ons/kserve/introduction/" target="_blank" rel="noopener">KServe</a> <small>(previously <em>KFServing</em>)</small> solves production model serving on Kubernetes.
            It delivers high-abstraction and performant interfaces for frameworks like Tensorflow, XGBoost, ScikitLearn, PyTorch, and ONNX.
          </p>
        </div>
      </div>
    </div>
    <br />
    <!-- For future editors: If you are adding cards not in multiples of 3, wrap them in a 'card-columns' div instead of card-deck.
         It will look more pleasing to the eye. -->
  </div>
</section>

<div id="community" class="text-center">
  <h3 class="section-head">Join our Community</h3>
  <div class="container">
    <p class="mx-auto col-md-7 px-0">
      We are an open and welcoming <a href="/docs/about/community/" target="_blank" rel="noopener">community</a> of software developers, data scientists, and organizations!
      Check out the <a href="/docs/about/community/#list-of-available-meetings">weekly community calls</a>, get involved in discussions on the <a href="/docs/about/community/#kubeflow-mailing-list">mailing list</a> or chat with others on the <a href="/docs/about/community/#kubeflow-slack-channels">Slack Workspace</a>!
    </p>
  </div>
</div>

<div id="cncf" class="text-center">
  <div class="container">
    <div class="mx-auto col-md-4">
      <img
          src="/docs/images/logos/cncf.svg"
          draggable="false"
          class="img-fluid"
          alt="Cloud Native Computing Foundation Logo"
      />
    </div>
    <h5 class="cncf-title">We are a Cloud Native Computing Foundation project.</h5>
  </div>
</div>


================================================
File: content/en/_redirects
================================================
# Redirects from what the browser requests to what we serve
# Info: https://www.netlify.com/docs/redirects/

/version/stable/gke/scripts/deploy.sh  https://raw.githubusercontent.com/kubeflow/kubeflow/v0.2.2/scripts/gke/deploy.sh
/version/stable/scripts/deploy.sh      https://raw.githubusercontent.com/kubeflow/kubeflow/v0.2.2/scripts/deploy.sh
/version/stable/source.tar.gz          https://github.com/kubeflow/kubeflow/archive/v0.2.2.tar.gz
/blog/                                 https://blog.kubeflow.org
/blog/why_kubeflow/                    https://medium.com/kubeflow/why-kubeflow-in-your-infrastructure-56b8fabf1f3e
/blog/announcing_kubeflow_0.3/         https://medium.com/kubeflow/kubeflow-0-3-simplifies-setup-improves-ml-development-98b8ca10bd69
/blog/blog_posts/                      https://medium.com/kubeflow/blog-posts-about-kubeflow-7068688359f3
/blog/nvidia_tensorrt/                 https://medium.com/kubeflow/gpu-accelerated-inference-for-kubernetes-with-the-nvidia-tensorrt-inference-server-and-kubeflow-63061305fff2
/blog/kaggle_on_kubeflow/              https://medium.com/kubeflow/kaggle-on-kubeflow-185a29e27c53
/blog/announcing_kubeflow_0.2/         https://medium.com/kubeflow/kubeflow-0-2-offers-new-components-and-simplified-setup-735e4c56988d

/docs/guides/components/components     /docs/components/
/docs/guides/pipelines/deploy-pipelines-service/  /docs/components/pipelines/pipelines-quickstart/

# https://github.com/kubeflow/website/pull/3786
/docs/components/pipelines/legacy-v1/overview/multi-user    /docs/components/pipelines/operator-guides/multi-user

# Merged duplicate page pipelines-samples.md into build-pipeline.md
/docs/pipelines/pipelines-samples/	   /docs/components/pipelines/legacy-v1/sdk/build-pipeline/

# Removed redundant UI guide. Quickstart is a better destination.
/docs/pipelines/pipelines-ui/	         /docs/components/pipelines/pipelines-quickstart/

# Restructured the pipelines docs.
/docs/pipelines/                                    /docs/components/pipelines
/docs/pipelines/output-viewer/                      /docs/components/pipelines/legacy-v1/sdk/output-viewer/
/docs/pipelines/pipelines-metrics/                  /docs/components/pipelines/legacy-v1/sdk/output-viewer/#v2-sdk-use-sdk-visualization-apis
/docs/pipelines/build-component/                    /docs/components/pipelines/legacy-v1/sdk/component-development/
/docs/pipelines/install-sdk/                        /docs/components/pipelines/legacy-v1/sdk/install-sdk/
/docs/pipelines/lightweight-python-components/      /docs/components/pipelines/legacy-v1/sdk/python-function-components/
/docs/pipelines/sdk/lightweight-python-components/  /docs/components/pipelines/legacy-v1/sdk/python-function-components/
/docs/pipelines/build-pipeline/                     /docs/components/pipelines/legacy-v1/tutorials/build-pipeline/
/docs/pipelines/pipelines-tutorial/                 /docs/components/pipelines/legacy-v1/tutorials/cloud-tutorials/
/docs/pipelines/tutorials/pipelines-tutorial/       /docs/components/pipelines/legacy-v1/tutorials/cloud-tutorials/
/docs/gke/pipelines-tutorial/                       /docs/components/pipelines/legacy-v1/tutorials/cloud-tutorials/
/docs/gke/pipelines/pipelines-tutorial/             /docs/components/pipelines/legacy-v1/tutorials/cloud-tutorials/
/docs/gke/authentication-pipelines/                 /docs/distributions/gke/pipelines/authentication-pipelines/

/docs/pipelines/metrics/                            /docs/components/pipelines/legacy-v1/sdk/output-viewer/#v2-sdk-use-sdk-visualization-apis
/docs/pipelines/metrics/pipelines-metrics/          /docs/components/pipelines/legacy-v1/sdk/output-viewer/#v2-sdk-use-sdk-visualization-apis
/docs/pipelines/metrics/output-viewer/              /docs/components/pipelines/legacy-v1/sdk/output-viewer/
/docs/pipelines/pipelines-overview/                 /docs/components/pipelines/overview/pipelines-overview/
/docs/pipelines/enable-gpu-and-tpu/                 /docs/distributions/gke/pipelines/enable-gpu-and-tpu/
/docs/pipelines/sdk/enable-gpu-and-tpu/             /docs/distributions/gke/pipelines/enable-gpu-and-tpu/
/docs/pipelines/sdk/gcp/enable-gpu-and-tpu/         /docs/distributions/gke/pipelines/enable-gpu-and-tpu/
/docs/pipelines/preemptible/                        /docs/distributions/gke/pipelines/preemptible/
/docs/pipelines/sdk/gcp/preemptible/                /docs/distributions/gke/pipelines/preemptible/
/docs/pipelines/reusable-components/                /docs/examples/shared-resources/
/docs/pipelines/sdk/reusable-components/            /docs/examples/shared-resources/
/docs/pipelines/sdk/build-component/                /docs/components/pipelines/legacy-v1/sdk/build-pipeline/
/docs/components/pipelines/sdk/build-component/     /docs/components/pipelines/legacy-v1/sdk/build-pipeline/
/docs/components/pipelines/upgrade/                 /docs/components/pipelines/legacy-v1/installation/upgrade/

# Moved the guide to monitoring GKE deployments.
/docs/other-guides/monitoring/                 /docs/distributions/gke/monitoring/

# Created a new section for pipeline concepts.
/docs/pipelines/pipelines-concepts/            /docs/components/pipelines/concepts/

# Replaces Pipelines DSL overview with SDK overview
/docs/pipelines/sdk/dsl-overview/              /docs/components/pipelines/legacy-v1/sdk/sdk-overview/

# Created a new section for pipelines installation.
/docs/pipelines/standalone-deployment-gcp/    /docs/components/pipelines/operator-guides/installation/

# Removed the downloads page from Reference to Getting Started with Kubeflow
/docs/reference/downloads/                     /docs/started/getting-started/

# Adding the content of Requirements to Getting Started and removing Requirements
docs/started/requirements/                    /docs/started/getting-started/

# Created a new components layout
/docs/components/chainer                       /docs/components/training/chainer
/docs/components/modeldb                       /docs/components/misc/modeldb
/docs/components/mpi                           /docs/components/training/mpi
/docs/components/mxnet                         /docs/components/training/mxnet
/docs/components/pytorch                       /docs/components/training/pytorch
/docs/components/nuclio                        /docs/components/misc/nuclio
/docs/components/seldon                        /docs/external-add-ons/serving/seldon
/docs/components/trtinferenceserver            /docs/external-add-ons/serving/tritoninferenceserver
/docs/components/tfbatchpredict                /docs/external-add-ons/serving/tfbatchpredict
/docs/components/tftraining                    /docs/components/training/user-guides/tensorflow
/docs/components/training/pytorch              /docs/components/training/user-guides/pytorch
/docs/components/training/mpi                  /docs/components/training/user-guides/mpi
/docs/components/training/mxnet                /docs/components/training/user-guides/mxnet
/docs/components/training/paddlepaddle         /docs/components/training/user-guides/paddle
/docs/components/training/xgboost              /docs/components/training/user-guides/xgboost
/docs/components/training/tftraining           /docs/components/training/user-guides/tensorflow
/docs/components/tfserving_new                 /docs/external-add-ons/serving/tfserving_new

# Deleted the PyTorch serving page
/docs/components/pytorchserving/               /docs/external-add-ons/serving/overview/
/docs/components/serving/pytorchserving/       /docs/external-add-ons/serving/overview/

# Restructured the getting-started and other-guides sections.
/docs/started/getting-started-k8s/             /docs/started/k8s/
/docs/started/getting-started-minikube/                    /docs/started/distributions/kfctl/minikube/
/docs/use-cases/kubeflow-on-multinode-cluster/ /docs/other-guides/kubeflow-on-multinode-cluster/
/docs/use-cases/job-scheduling/                /docs/other-guides/job-scheduling/

# Remove examples docs
/docs/examples/*                                /docs/started/kubeflow-examples

# Move the kustomize guide to the config section
/docs/components/misc/kustomize/              /docs/distributions/kfctl/kustomize/

# Merged the UIs page with the new central dashboard page
/docs/other-guides/accessing-uis/             /docs/components/central-dash/overview/

# Refactored multi-user docs
/docs/other-guides/multi-user-overview/       /docs/components/multi-tenancy/

# Rename TensorRT Inference Server to Triton Inference Server
/docs/components/serving/trtinferenceserver   /docs/external-add-ons/serving/tritoninferenceserver

# Kubeflow Operator move to under distributions
/docs/operator                      /docs/distributions/operator
/docs/operator/introduction         /docs/distributions/operator/introduction
/docs/operator/install-operator     /docs/distributions/operator/install-operator
/docs/operator/install-kubeflow     /docs/distributions/operator/install-kubeflow
/docs/operator/uninstall-kubeflow   /docs/distributions/operator/uninstall-kubeflow
/docs/operator/uninstall-operator   /docs/distributions/operator/uninstall-operator
/docs/operator/troubleshooting      /docs/distributions/operator/troubleshooting

# kfctl move to under distributions
/docs/started/workstation/minikube-linux        /docs/distributions/kfctl/minikube
/docs/other-guides/kustomize                    /docs/distributions/kfctl/kustomize
/docs/started/k8s/kfctl-istio-dex               /docs/distributions/kfctl/multi-user
/docs/started/k8s/kfctl-k8s-istio               /docs/distributions/kfctl/deployment

# Moved Job scheduling under Training
/docs/other-guides/job-scheduling/    /docs/components/training/job-scheduling/

# Moved KFServing
/docs/components/serving/kfserving/         /docs/components/kfserving

# Moved KServe/KFserving Docs to External Addons
/docs/components/kfserving/ /docs/external-add-ons/kserve
/docs/components/kfserving/kfserving/ /docs/external-add-ons/kserve/kserve
/docs/components/kfserving/webapp/ /docs/external-add-ons/kserve/webapp

# Moved MicroK8s to distributions
/docs/started/workstation/kubeflow-on-microk8s    /docs/distributions/microk8s/kubeflow-on-microk8s

# Moved K8s deployment overview to under kfctl
/docs/started/k8s/overview              /docs/distributions/kfctl/overview

# Moved MiniKF to distributions
/docs/started/workstation/getting-started-minikf        /docs/distributions/minikf/getting-started-minikf
/docs/started/workstation/minikf-aws                    /docs/distributions/minikf/minikf-aws
/docs/started/workstation/minikf-gcp                    /docs/distributions/minikf/minikf-gcp

# Distinguish components from external add-ons
/docs/components/fairing                       /docs/external-add-ons/fairing
/docs/components/istio                         /docs/external-add-ons/istio
/docs/components/feature-store                 /docs/external-add-ons/feature-store
/docs/components/serving                       /docs/external-add-ons/serving
/docs/components/metadata                      /docs

# Rename Getting Started to Installing Kubeflow
/docs/started/getting-started           /docs/started/installing-kubeflow

# Remove Reference section
/docs/reference/notebook/*         /docs/components/notebooks/api-reference
/docs/reference/mpijob/*           /docs/components/training
/docs/reference/pytorchjob/*       /docs/components/training
/docs/reference/tfjob/*            /docs/components/training

# Cleanup of Notebooks Docs
/docs/components/notebooks/custom-notebook                /docs/components/notebooks/container-images
/docs/components/notebooks/setup                          /docs/components/notebooks/quickstart-guide
/docs/components/notebooks/troubleshoot                   /docs/components/notebooks/troubleshooting
/docs/components/notebooks/why-use-jupyter-notebook       /docs/components/notebooks/overview

# Refactor Pipelines section
/docs/components/pipelines/caching                            /docs/components/pipelines/legacy-v1/overview/caching
/docs/components/pipelines/caching-v2                         /docs/components/pipelines/user-guides/core-functions/caching
/docs/components/pipelines/multi-user                         /docs/components/pipelines/operator-guides/multi-user
/docs/components/pipelines/pipeline-root                      /docs/components/pipelines/concepts/pipeline-root
/docs/components/pipelines/overview/pipelines-overview        /docs/components/pipelines/overview
/docs/components/pipelines/pipelines-quickstart               /docs/components/pipelines/overview/quickstart

# Restructure About section
/docs/about/kubeflow             /docs/started/introduction
/docs/started/kubeflow-overview  /docs/started/architecture

# move istio from external-add-ons to multi-tenancy component
/docs/external-add-ons/istio/*    /docs/components/multi-tenancy/istio

# merge multi-tenancy/getting-started with profiles
/docs/components/multi-tenancy/getting-started /docs/components/central-dash/profiles

# move multi-tenancy to concepts
/docs/components/multi-tenancy/design          /docs/concepts/multi-tenancy/design
/docs/components/multi-tenancy/istio           /docs/concepts/multi-tenancy/istio
/docs/components/multi-tenancy/overview        /docs/concepts/multi-tenancy/overview
/docs/components/multi-tenancy                 /docs/concepts/multi-tenancy

# remove registration-flow page
/docs/components/central-dash/registration-flow /docs/components/central-dash/profiles

# rename customize dashboard page
/docs/components/central-dash/customizing-menu /docs/components/central-dash/customize

# rename feature-store to feast
/docs/external-add-ons/feature-store/overview/        /docs/external-add-ons/feast/introduction
/docs/external-add-ons/feature-store/getting-started/ /docs/external-add-ons/feast/introduction
/docs/external-add-ons/feature-store/                 /docs/external-add-ons/feast

# rename kserve/kserve to kserve/introduction
/docs/external-add-ons/kserve/kserve/ /docs/external-add-ons/kserve/introduction

# redirect kserve pages to kserve website
/docs/external-add-ons/kserve/first_isvc_kserve/ https://kserve.github.io/website/latest/get_started/first_isvc/
/docs/external-add-ons/kserve/migration/         https://kserve.github.io/website/latest/admin/migration/

# ===============
# IMPORTANT NOTE:
# Catch-all redirects should be added at the end of this file as redirects happen from top to bottom
# ===============
/docs/guides/*                      /docs/:splat
/docs/pipelines/concepts/*          /docs/components/pipelines/concepts
/docs/pipelines/*                   /docs/components/pipelines
/docs/aws/*                         /docs/distributions/aws/
/docs/azure/*                       /docs/distributions/azure/:splat
/docs/gke/*                         /docs/distributions/gke/:splat
/docs/ibm/*                         /docs/distributions/ibm/:splat
/docs/openshift/*                   /docs/distributions/openshift/:splat
/docs/components/fairing/*          /docs/external-add-ons/fairing/:splat
/docs/components/istio/*            /docs/external-add-ons/istio/:splat
/docs/components/feature-store/*    /docs/external-add-ons/feature-store/:splat
/docs/components/serving/*          /docs/external-add-ons/serving/:splat

# redirect distribution pages to external websites
/docs/distributions/aws/*           https://awslabs.github.io/kubeflow-manifests/
/docs/distributions/azure/*         https://azure.github.io/kubeflow-aks/main/
/docs/distributions/charmed/*       https://charmed-kubeflow.io/
/docs/distributions/ekf/*           https://www.arrikto.com/enterprise-kubeflow/
/docs/distributions/gke/*           https://googlecloudplatform.github.io/kubeflow-gke-docs/docs/:splat
/docs/distributions/ibm/*           https://ibm.github.io/manifests/
/docs/distributions/nutanix/*       https://nutanix.github.io/kubeflow-manifests/

# Refactor Katib docs
/docs/components/hyperparameter                /docs/components/katib/overview
/docs/components/katib/hyperparameter          /docs/components/katib/getting-started
/docs/components/katib/experiment              /docs/components/katib/user-guides/hp-tuning/configure-experiment
/docs/components/katib/early-stopping          /docs/components/katib/user-guides/early-stopping
/docs/components/katib/resume-experiment       /docs/components/katib/user-guides/resume-experiment
/docs/components/katib/trial-template          /docs/components/katib/user-guides/trial-template

# Restructured the pipeline docs (https://github.com/kubeflow/website/issues/3716)
/docs/components/pipelines/overview/quickstart/                             /docs/components/pipelines/overview/
/docs/components/pipelines/v1/                                              /docs/components/pipelines/legacy-v1/
/docs/components/pipelines/v1/concepts/                                     /docs/components/pipelines/concepts/
/docs/components/pipelines/v1/concepts/component/                           /docs/components/pipelines/concepts/component/
/docs/components/pipelines/v1/concepts/experiment/                          /docs/components/pipelines/concepts/experiment/
/docs/components/pipelines/v1/concepts/graph/                               /docs/components/pipelines/concepts/graph/
/docs/components/pipelines/v1/concepts/metadata/                            /docs/components/pipelines/concepts/metadata/
/docs/components/pipelines/v1/concepts/output-artifact/                     /docs/components/pipelines/concepts/output-artifact/
/docs/components/pipelines/v1/concepts/pipeline/                            /docs/components/pipelines/concepts/pipeline/
/docs/components/pipelines/v1/concepts/run-trigger/                         /docs/components/pipelines/concepts/run-trigger/
/docs/components/pipelines/v1/concepts/run/                                 /docs/components/pipelines/concepts/run/
/docs/components/pipelines/v1/concepts/step/                                /docs/components/pipelines/concepts/step/
/docs/components/pipelines/v1/installation/                                 /docs/components/pipelines/legacy-v1/installation/
/docs/components/pipelines/v1/installation/choose-executor/                 /docs/components/pipelines/legacy-v1/installation/choose-executor/
/docs/components/pipelines/v1/installation/compatibility-matrix/            /docs/components/pipelines/legacy-v1/installation/compatibility-matrix/
/docs/components/pipelines/v1/installation/localcluster-deployment/         /docs/components/pipelines/legacy-v1/installation/localcluster-deployment/
/docs/components/pipelines/v1/installation/overview/                        /docs/components/pipelines/legacy-v1/installation/overview/
/docs/components/pipelines/v1/installation/standalone-deployment/           /docs/components/pipelines/legacy-v1/installation/standalone-deployment/
/docs/components/pipelines/v1/installation/upgrade/                         /docs/components/pipelines/legacy-v1/installation/upgrade/
/docs/components/pipelines/v1/introduction/                                 /docs/components/pipelines/legacy-v1/introduction/
/docs/components/pipelines/v1/overview/                                     /docs/components/pipelines/legacy-v1/overview/
/docs/components/pipelines/v1/overview/caching/                             /docs/components/pipelines/legacy-v1/overview/caching/
/docs/components/pipelines/v1/overview/interfaces/                          /docs/components/pipelines/interfaces/
/docs/components/pipelines/v1/overview/multi-user/                          /docs/components/pipelines/operator-guides/multi-user/
/docs/components/pipelines/v1/overview/pipeline-root/                       /docs/components/pipelines/concepts/pipeline-root/
/docs/components/pipelines/v1/overview/quickstart/                          /docs/components/pipelines/legacy-v1/overview/quickstart/
/docs/components/pipelines/v1/reference/                                    /docs/components/pipelines/legacy-v1/reference/
/docs/components/pipelines/v1/reference/api/kubeflow-pipeline-api-spec/     /docs/components/pipelines/legacy-v1/reference/api/kubeflow-pipeline-api-spec/
/docs/components/pipelines/v1/reference/component-spec/                     /docs/components/pipelines/reference/component-spec/
/docs/components/pipelines/v1/reference/sdk/                                /docs/components/pipelines/legacy-v1/reference/sdk/
/docs/components/pipelines/v1/sdk/                                          /docs/components/pipelines/legacy-v1/sdk/
/docs/components/pipelines/v1/sdk/best-practices/                           /docs/components/pipelines/legacy-v1/sdk/best-practices/
/docs/components/pipelines/v1/sdk/build-pipeline/                           /docs/components/pipelines/legacy-v1/sdk/build-pipeline/
/docs/components/pipelines/v1/sdk/component-development/                    /docs/components/pipelines/legacy-v1/sdk/component-development/
/docs/components/pipelines/v1/sdk/connect-api/                              /docs/components/pipelines/user-guides/core-functions/connect-api/
/docs/components/pipelines/v1/sdk/dsl-recursion/                            /docs/components/pipelines/legacy-v1/sdk/dsl-recursion/
/docs/components/pipelines/v1/sdk/enviroment_variables/                     /docs/components/pipelines/legacy-v1/sdk/enviroment_variables/
/docs/components/pipelines/v1/sdk/gcp/                                      /docs/components/pipelines/legacy-v1/sdk/gcp/
/docs/components/pipelines/v1/sdk/install-sdk/                              /docs/components/pipelines/legacy-v1/sdk/install-sdk/
/docs/components/pipelines/v1/sdk/manipulate-resources/                     /docs/components/pipelines/legacy-v1/sdk/manipulate-resources/
/docs/components/pipelines/v1/sdk/output-viewer/                            /docs/components/pipelines/legacy-v1/sdk/output-viewer/
/docs/components/pipelines/v1/sdk/parameters/                               /docs/components/pipelines/legacy-v1/sdk/parameters/
/docs/components/pipelines/v1/sdk/pipelines-with-tekton/                    /docs/components/pipelines/legacy-v1/sdk/pipelines-with-tekton/
/docs/components/pipelines/v1/sdk/python-based-visualizations/              /docs/components/pipelines/legacy-v1/sdk/python-based-visualizations/
/docs/components/pipelines/v1/sdk/python-function-components/               /docs/components/pipelines/legacy-v1/sdk/python-function-components/
/docs/components/pipelines/v1/sdk/sdk-overview/                             /docs/components/pipelines/legacy-v1/sdk/sdk-overview/
/docs/components/pipelines/v1/sdk/static-type-checking/                     /docs/components/pipelines/legacy-v1/sdk/static-type-checking/
/docs/components/pipelines/v1/troubleshooting/                              /docs/components/pipelines/legacy-v1/troubleshooting/
/docs/components/pipelines/v1/tutorials/                                    /docs/components/pipelines/legacy-v1/tutorials/
/docs/components/pipelines/v1/tutorials/api-pipelines/                      /docs/components/pipelines/legacy-v1/tutorials/api-pipelines/
/docs/components/pipelines/v1/tutorials/benchmark-examples/                 /docs/components/pipelines/legacy-v1/tutorials/benchmark-examples/
/docs/components/pipelines/v1/tutorials/build-pipeline/                     /docs/components/pipelines/legacy-v1/tutorials/build-pipeline/
/docs/components/pipelines/v1/tutorials/cloud-tutorials/                    /docs/components/pipelines/legacy-v1/tutorials/cloud-tutorials/
/docs/components/pipelines/v1/tutorials/sdk-examples/                       /docs/components/pipelines/legacy-v1/tutorials/sdk-examples/
/docs/components/pipelines/v2/                                              /docs/components/pipelines/
/docs/components/pipelines/v2/administration/                               /docs/components/pipelines/operator-guides/
/docs/components/pipelines/v2/administration/server-config/                 /docs/components/pipelines/operator-guides/server-config/
/docs/components/pipelines/v2/caching/                                      /docs/components/pipelines/user-guides/core-functions/caching/
/docs/components/pipelines/v2/cli/                                          /docs/components/pipelines/user-guides/core-functions/cli/
/docs/components/pipelines/v2/community-and-support/                        /docs/components/pipelines/reference/community-and-support/
/docs/components/pipelines/v2/compile-a-pipeline/                           /docs/components/pipelines/user-guides/core-functions/compile-a-pipeline/
/docs/components/pipelines/v2/components/                                   /docs/components/pipelines/user-guides/components/
/docs/components/pipelines/v2/components/additional-functionality/          /docs/components/pipelines/user-guides/components/additional-functionality/
/docs/components/pipelines/v2/components/container-components/              /docs/components/pipelines/user-guides/components/container-components/
/docs/components/pipelines/v2/components/containerized-python-components/   /docs/components/pipelines/user-guides/components/containerized-python-components/
/docs/components/pipelines/v2/components/importer-component/                /docs/components/pipelines/user-guides/components/importer-component/
/docs/components/pipelines/v2/components/lightweight-python-components/     /docs/components/pipelines/user-guides/components/lightweight-python-components/
/docs/components/pipelines/v2/data-types/                                   /docs/components/pipelines/user-guides/data-handling/data-types/
/docs/components/pipelines/v2/data-types/artifacts/                         /docs/components/pipelines/user-guides/data-handling/artifacts/
/docs/components/pipelines/v2/data-types/parameters/                        /docs/components/pipelines/user-guides/data-handling/parameters/
/docs/components/pipelines/v2/hello-world/                                  /docs/components/pipelines/getting-started/
/docs/components/pipelines/v2/installation/                                 /docs/components/pipelines/operator-guides/installation/
/docs/components/pipelines/v2/installation/quickstart/                      /docs/components/pipelines/operator-guides/installation/
/docs/components/pipelines/v2/introduction/                                 /docs/components/pipelines/overview/
/docs/components/pipelines/v2/load-and-share-components/                    /docs/components/pipelines/user-guides/components/load-and-share-components/
/docs/components/pipelines/v2/local-execution/                              /docs/components/pipelines/user-guides/core-functions/execute-kfp-pipelines-locally/
/docs/components/pipelines/v2/migration/                                    /docs/components/pipelines/user-guides/migration/
/docs/components/pipelines/v2/pipelines/                                    /docs/components/pipelines/user-guides/core-functions/
/docs/components/pipelines/v2/pipelines/control-flow/                       /docs/components/pipelines/user-guides/core-functions/control-flow/
/docs/components/pipelines/v2/pipelines/pipeline-basics/                    /docs/components/pipelines/user-guides/components/compose-components-into-pipelines/
/docs/components/pipelines/v2/platform-specific-features/                   /docs/components/pipelines/user-guides/core-functions/platform-specific-features/
/docs/components/pipelines/v2/reference/                                    /docs/components/pipelines/reference/
/docs/components/pipelines/v2/reference/api/kubeflow-pipeline-api-spec/     /docs/components/pipelines/reference/api/kubeflow-pipeline-api-spec/
/docs/components/pipelines/v2/reference/sdk/                                /docs/components/pipelines/reference/sdk/
/docs/components/pipelines/v2/run-a-pipeline/                               /docs/components/pipelines/user-guides/core-functions/run-a-pipeline/
/docs/components/pipelines/v2/version-compatibility/                        /docs/components/pipelines/reference/version-compatibility/

# Remove Components / Multi-Tenancy section
/docs/concepts/multi-tenancy/                /docs/components/central-dash/profiles/
/docs/concepts/multi-tenancy/overview/       /docs/components/central-dash/profiles/
/docs/concepts/multi-tenancy/design/         /docs/components/central-dash/profiles/
/docs/concepts/multi-tenancy/istio/          /docs/components/central-dash/profiles/

# Kubeflow Trainer V2 (https://github.com/kubeflow/trainer/issues/2214)
/docs/components/training/installation/                       /docs/components/trainer/legacy-v1/installation/
/docs/components/training/explanation/                        /docs/components/trainer/legacy-v1/explanation/
/docs/components/training/explanation/fine-tuning/            /docs/components/trainer/legacy-v1/explanation/fine-tuning/
/docs/components/training/reference/                          /docs/components/trainer/legacy-v1/reference/
/docs/components/training/reference/architecture/             /docs/components/trainer/legacy-v1/reference/architecture/
/docs/components/training/reference/distributed-training/     /docs/components/trainer/legacy-v1/reference/distributed-training/
/docs/components/training/reference/fine-tuning/              /docs/components/trainer/legacy-v1/reference/fine-tuning/
/docs/components/training/user-guides/                        /docs/components/trainer/legacy-v1/user-guides/
/docs/components/training/user-guides/fine-tuning/            /docs/components/trainer/legacy-v1/user-guides/fine-tuning/
/docs/components/training/user-guides/jax/                    /docs/components/trainer/legacy-v1/user-guides/jax/
/docs/components/training/user-guides/job-scheduling/         /docs/components/trainer/legacy-v1/user-guides/job-scheduling/
/docs/components/training/user-guides/mpi/                    /docs/components/trainer/legacy-v1/user-guides/mpi/
/docs/components/training/user-guides/paddle/                 /docs/components/trainer/legacy-v1/user-guides/paddle/
/docs/components/training/user-guides/prometheus/             /docs/components/trainer/legacy-v1/user-guides/prometheus/
/docs/components/training/user-guides/tensorflow/             /docs/components/trainer/legacy-v1/user-guides/tensorflow/
/docs/components/training/user-guides/xgboost/                /docs/components/trainer/legacy-v1/user-guides/xgboost/
/docs/components/training/                                    /docs/components/trainer/
/docs/components/training/user-guides/pytorch/                /docs/components/trainer/legacy-v1/user-guides/pytorch/
/docs/components/training/overview/                           /docs/components/trainer/legacy-v1/overview/
/docs/components/training/getting-started/                    /docs/components/trainer/legacy-v1/getting-started/



================================================
File: content/en/search.md
================================================
---
title: Search results
layout: search
---



================================================
File: content/en/docs/_index.md
================================================
+++
title = "Documentation"
description = "All of Kubeflow documentation"
+++



================================================
File: content/en/docs/about/_index.md
================================================
+++
title = "About"
description = "About Kubeflow and its community"
weight = 10
+++



================================================
File: content/en/docs/about/community.md
================================================
+++
title =  "Community"
description = "About the Kubeflow community"
weight = 10
aliases = ["/docs/community/"]
+++

## Contributing

If you are interested in learning more about how to participate in and contribute to the Kubeflow community, take a look at [Contributing](/docs/about/contributing/)!

## Kubeflow Slack Channels

Kubeflow is part of the vibrant CNCF community, we use the [CNCF Slack](https://slack.cncf.io/) for informal discussions among users and contributors.
Please join the [Kubeflow channels](#slack-channels) to join the conversation and get help from the community.

<a href="https://slack.cncf.io/">
  <button class="btn btn-primary py-2 px-5 mb-3">Click to join:<br><b>CNCF Slack</b></button>
</a>

### Slack Channels

The following table lists official Kubeflow channels which are hosted on the **CNCF Slack**:

| Description                             | Link                                                                              |
| --------------------------------------- | --------------------------------------------------------------------------------- |
| Announcements                           | [#kubeflow-announcements](https://app.slack.com/client/T08PSQ7BQ/C01EV0FV154)     |
| Contributors                            | [#kubeflow-contributors](https://app.slack.com/client/T08PSQ7BQ/C0742LBR5BM) |
| Katib                                   | [#kubeflow-katib](https://app.slack.com/client/T08PSQ7BQ/C073N7AS48P)             |
| Model Registry                          | [#kubeflow-model-registry](https://app.slack.com/client/T08PSQ7BQ/C073N7B6K3R)    |
| Notebooks                               | [#kubeflow-notebooks](https://app.slack.com/client/T08PSQ7BQ/C073W562HFY)         |
| Pipelines                               | [#kubeflow-pipelines](https://app.slack.com/client/T08PSQ7BQ/C073N7BMLB1)         |
| Platform Manifests and Release Planning | [#kubeflow-platform](https://app.slack.com/client/T08PSQ7BQ/C073W572LA2)          |
| Spark Operator                          | [#kubeflow-spark-operator](https://app.slack.com/client/T08PSQ7BQ/C074588U7EG)    |
| Kubeflow Trainer and MPI Operator       | [#kubeflow-training](https://app.slack.com/client/T08PSQ7BQ/C0742LDFZ4K)          |
| KServe                                  | [#kserve](https://app.slack.com/client/T08PSQ7BQ/C06AH2C3K8B)                     |

## Kubeflow Mailing List

The official Kubeflow mailing list is a Google Group called [kubeflow-discuss](https://groups.google.com/g/kubeflow-discuss).

<a href="https://groups.google.com/g/kubeflow-discuss">
  <button class="btn btn-primary py-2 px-5">Click to join:<br>Kubeflow Mailing List</button>
</a>

## Kubeflow Community Meetings

The Kubeflow community holds various meetings to all users and contributors to discus
issues/proposals and present demos/products.

### Subscribe to the Kubeflow Calendar

Joining the [kubeflow-discuss mailing list](#kubeflow-mailing-list) should automatically add
the Kubeflow community meetings to your Google calendar. If you still can't see the invites,
manually add [the Kubeflow calendar using this name](https://calendar.google.com/calendar/u/0/r/settings/addcalendar):

```shell
kubeflow.org_7l5vnbn8suj2se10sen81d9428@group.calendar.google.com
```

<img src="/docs/about/images/google-calendar.png"
      alt="Google Calendar"
      class="mt-3 mb-3">

### List of Available Meetings

The following list shows available Kubeflow community meetings with the corresponding meeting notes and recordings.

| Meeting Name                    | Meeting Notes                                        | Recordings                                                                                   |
| ------------------------------- | ---------------------------------------------------- | -------------------------------------------------------------------------------------------- |
| Kubeflow community call         | [Google Doc](https://bit.ly/kf-meeting-notes)        | [YouTube playlist](https://www.youtube.com/playlist?list=PLmzRWLV1CK_ypvsQu10SGRmhf2S7mbYL5) |
| Kubeflow AutoML and Training WG | [Google Doc](https://bit.ly/2PWVCkV)                 | [YouTube playlist](https://www.youtube.com/playlist?list=PLmzRWLV1CK_xAiAY-3Vw94lrUs4xeNZ3j) |
| Kubeflow Model Registry call    | [Google Doc](https://bit.ly/kf-model-registry-notes) | [YouTube playlist](https://www.youtube.com/playlist?list=PLmzRWLV1CK_ymLhMu0UMeaWPsLDPIjNnW) |
| Kubeflow Notebooks WG           | [Google Doc](https://bit.ly/kf-notebooks-wg-notes)   |                                                                                              |
| Kubeflow Platform WG            | [Google Doc](https://bit.ly/kf-wg-manifests-notes)   |                                                                                              |
| Kubeflow Pipelines WG           | [Google Doc](http://bit.ly/kfp-meeting-notes)        |                                                                                              |
| Kubeflow Release team call      | [Google Doc](https://bit.ly/kf-release-team-notes)   |                                                                                              |
| Kubeflow Spark Operator call    | [Google Doc](https://bit.ly/3VGzP4n)                 | [YouTube playlist](https://www.youtube.com/playlist?list=PLmzRWLV1CK_xXuM6gALgBG8vDZHFCNxce) |
| KServe call                     | [Google Doc](https://bit.ly/3NlKFb3)                 |                                                                                              |

### Kubeflow Community Calendar

This is an aggregated view of the Kubeflow community calendar and should be displayed in your
device's timezone.

<style>
#calendar-container {
   overflow: auto;
}
</style>
<div id="calendar-container"></div>
<script type="text/javascript">
const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
const calender_src_list = [
  // Kubeflow Community
  "kubeflow.org_7l5vnbn8suj2se10sen81d9428%40group.calendar.google.com",
];
let calender_src = calender_src_list.map(src => `&src=${src}&color=%23A79B8E`).join('');
const html = `<iframe src="https://calendar.google.com/calendar/embed?ctz=${timezone}&height=600&wkst=1&bgcolor=%23ffffff&showPrint=0&showDate=1&mode=AGENDA&showTitle=0${calender_src}" style="border:solid 1px #777" width="800" height="600" frameborder="0" scrolling="no"></iframe>`;
document.getElementById('calendar-container').innerHTML = html;
</script>

## Kubeflow on Social Media

- [Official Kubeflow YouTube Channel](https://www.youtube.com/@Kubeflow) for the
  announcements and project updates.
- [Kubeflow Community YouTube Channel](https://www.youtube.com/@KubeflowCommunity) for the working
  group and community meeting recordings.
- Join [LinkedIn](https://www.linkedin.com/company/kubeflow/) for latest news in Kubeflow.
- Follow us on X formerly known as [Twitter](https://twitter.com/kubeflow) for latest news on Kubeflow.

## Kubeflow Blog and Other Resources

The Kubeflow project maintains an official blog that can be [found here](https://blog.kubeflow.org).

{{% alert title="Tip" color="info" %}}
To contribute an article for the blog, please raise an issue on the [kubeflow/community](https://github.com/kubeflow/community) GitHub repo or create a thread on the [mailing list](#kubeflow-mailing-list).
Note, articles are published using the [kubeflow/blog](https://github.com/kubeflow/blog) GitHub repo.
{{% /alert %}}

In addition, please check out the community-curated [awesome list of projects and resources related to Kubeflow](https://github.com/terrytangyuan/awesome-kubeflow).

## Kubeflow Trademark

The Kubeflow trademark and logos are registered trademarks of The Linux Foundation® (TLF), please review the [Kubeflow Brand Guidelines](https://www.linuxfoundation.org/legal/trademark-usage) for more information.

## Kubeflow Steering Committee

The [Kubeflow Steering Committee (KSC)](https://github.com/kubeflow/community/blob/master/KUBEFLOW-STEERING-COMMITTEE.md) is the governing body of the Kubeflow project, providing decision-making and oversight pertaining to the Kubeflow project policies, sub-organizations, and financial planning, and defines the project values and structure.

## Kubeflow Working Groups

The Kubeflow project has a number of Working Groups (WGs) who each maintain some aspect of the Kubeflow project.
The following table outlines which components are maintained by each Working Group.

<div class="table-responsive">
<table class="table table-bordered">
    <thead class="thead-light">
      <tr>
        <th>Working Group</th>
        <th>Maintained Components</th>
      </tr>
    </thead>
  <tbody>
      <!-- ======================= -->
      <!-- AutoML Working Group -->
      <!-- ======================= -->
      <tr>
        <td rowspan="1" class="align-middle">
          <a href="https://github.com/kubeflow/community/tree/master/wg-automl">AutoML</a>
        </td>
        <td>
          <a href="https://github.com/kubeflow/katib">Katib</a>
        </td>
      </tr>
      <!-- ======================= -->
      <!-- Manifests Working Group -->
      <!-- ======================= -->
      <tr>
        <td rowspan="1" class="align-middle">
          <a href="https://github.com/kubeflow/community/tree/master/wg-manifests">Manifests</a>
        </td>
        <td>
          <a href="https://github.com/kubeflow/manifests">Manifests Repository</a>
        </td>
      </tr>
      <!-- ======================= -->
      <!-- Notebooks Working Group -->
      <!-- ======================= -->
      <tr>
        <td rowspan="9" class="align-middle">
          <a href="https://github.com/kubeflow/community/tree/master/wg-notebooks">Notebooks</a>
        </td>
        <td>
          <a href="https://github.com/kubeflow/kubeflow/tree/master/components/admission-webhook">Admission Webhook (PodDefaults)</a>
        </td>
      </tr>
      <tr>
        <td>
          <a href="https://github.com/kubeflow/kubeflow/tree/master/components/centraldashboard">Central Dashboard</a>
        </td>
      </tr>
      <tr>
        <td>
          <a href="https://github.com/kubeflow/kubeflow/tree/master/components/crud-web-apps/jupyter">Jupyter Web App</a>
        </td>
      </tr>
      <tr>
        <td>
          <a href="https://github.com/kubeflow/kubeflow/tree/master/components/access-management">Kubeflow Access Management API (KFAM)</a>
        </td>
      </tr>
      <tr>
        <td>
          <a href="https://github.com/kubeflow/kubeflow/tree/master/components/notebook-controller">Notebook Controller</a>
        </td>
      </tr>
      <tr>
        <td>
          <a href="https://github.com/kubeflow/kubeflow/tree/master/components/profile-controller">Profile Controller</a>
        </td>
      </tr>
      <tr>
        <td>
          <a href="https://github.com/kubeflow/kubeflow/tree/master/components/tensorboard-controller">Tensorboard Controller</a>
        </td>
      </tr>
      <tr>
        <td>
          <a href="https://github.com/kubeflow/kubeflow/tree/master/components/crud-web-apps/tensorboards">Tensorboard Web App</a>
        </td>
      </tr>
      <tr>
        <td>
          <a href="https://github.com/kubeflow/kubeflow/tree/master/components/crud-web-apps/volumes">Volumes Web App</a>
        </td>
      </tr>
      <!-- ======================= -->
      <!-- Pipelines Working Group -->
      <!-- ======================= -->
      <tr>
        <td rowspan="2" class="align-middle">
          <a href="https://github.com/kubeflow/community/tree/master/wg-pipelines">Pipelines</a>
        </td>
        <td>
          <a href="https://github.com/kubeflow/pipelines">Kubeflow Pipelines</a>
        </td>
      </tr>
      <tr>
        <td>
          <a href="https://github.com/kubeflow/kfp-tekton">Kubeflow Pipelines on Tekton</a>
        </td>
      </tr>
      <!-- ======================= -->
      <!-- Serving Working Group -->
      <!-- ======================= -->
      <tr>
        <td rowspan="1" class="align-middle">
          <a href="https://github.com/kubeflow/community/tree/master/wg-serving">Serving</a>
        </td>
        <td>
          <a href="https://github.com/kserve/kserve">KServe (formerly KFServing)</a>
        </td>
      </tr>
      <!-- ======================= -->
      <!-- Training Working Group -->
      <!-- ======================= -->
      <tr>
        <td rowspan="1" class="align-middle">
          <a href="https://github.com/kubeflow/community/tree/master/wg-training">Training</a>
        </td>
        <td>
          <a href="https://github.com/kubeflow/trainer">Training Operator</a>
        </td>
      </tr>
  </tbody>
</table>
</div>



================================================
File: content/en/docs/about/contributing.md
================================================
+++
title = "Contributing"
description = "Guidelines for contributing to Kubeflow"
weight = 20
aliases = ["/docs/contributing/"]
+++

This document is the single source of truth for how to contribute to the code base.
We'd love to accept your patches and contributions to this project.
There are just a few small guidelines you need to follow.

## Getting Started

### Sign off your commits

Kubeflow uses Developer Certificate of Origin ([DCO](https://github.com/apps/dco/)).

Check <https://github.com/kubeflow/community/tree/master/dco-signoff-hook#signing-off-commits> to learn how to sign off your contributions.

### Follow the code of conduct

Please make sure to read and observe our [Code of Conduct](https://github.com/kubeflow/community/blob/master/CODE_OF_CONDUCT.md)
and [inclusivity document](https://github.com/kubeflow/community/blob/master/INCLUSIVITY.md).

## Membership

Details about the different types of Kubeflow members as well as membership criteria can be found at [Community Membership](/docs/about/membership/)

**Note**: Anyone can contribute to Kubeflow, joining the Kubeflow organization is not a mandatory step.

### Companies/organizations

If you would like your company or organization to be acknowledged for contributing to Kubeflow, or participating in the community (being a user counts), please send a PR adding the relevant info to [member_organizations.yaml](https://github.com/kubeflow/community/blob/master/member_organizations.yaml).

Additionally, if your company has adopted Kubeflow internally, we encouraage you to add yourself to [ADOPTERS.md](https://github.com/kubeflow/community/blob/master/ADOPTERS.md)!

If you want your employee's GitHub contributions to be attributed to your company,
please ask them to set the company field in their GitHub profile.

## Your first contribution

### Find something to work on

Help is always welcome!
For example, documentation (like the text you are reading now) can always use improvement.
There's always code that can be clarified and variables or functions that can be renamed or commented.
There's always a need for more test coverage.
You get the idea - if you ever see something you think should be fixed, you should own it.
Here is how you get started.

### Starter issues

To find Kubeflow issues that make good entry points:

- Start with issues labeled **good first issue**. For example, see the good first issues in the [kubeflow/website repository](https://github.com/kubeflow/website/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22) for documentation updates
- If you're looking for good first issues for code, check out some of the following repositories:
  - [kubeflow/pipelines](https://github.com/kubeflow/pipelines/issues?q=is:open+is:issue+label:%22good+first+issue%22)
  - [kubeflow/trainer](https://github.com/kubeflow/trainer/issues?q=is:open+is:issue+label:%22good+first+issue%22)
  - [kubeflow/model-registry](https://github.com/kubeflow/model-registry/issues?q=is:issue+label:%22good+first+issue%22+is:open)
  - [kubeflow/notebooks](https://github.com/kubeflow/notebooks/issues?q=is:issue+label:%22good+first+issue%22+is:open)
- For issues that require deeper knowledge of one or more technical aspects, look at issues labeled **help wanted**.
  For example, see these issues in the [kubeflow/kubeflow repository](https://github.com/kubeflow/kubeflow/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22)
- Examine the issues in any of the [Kubeflow repositories](https://github.com/kubeflow).

## Owners files and PR workflow

Our PR workflow is nearly identical to Kubernetes'.
Most of these instructions are a modified version of Kubernetes' [contributors](https://github.com/kubernetes/community/blob/master/contributors/guide/README.md)
and [owners](https://github.com/kubernetes/community/blob/master/contributors/guide/owners.md#code-review-using-owners-files) guides.

### Overview of OWNERS files

OWNERS files are used to designate responsibility over different parts of the Kubeflow codebase.
Today, we use them to assign the **reviewer** and **approver** roles used in our two-phase code review process.
Our OWNERS files were inspired by [Chromium OWNERS files](https://chromium.googlesource.com/chromium/src/+/master/docs/code_reviews.md),
which in turn inspired [GitHub's CODEOWNERS files](https://help.github.com/articles/about-codeowners/).

The velocity of a project that uses code review is limited by the number of people capable of reviewing code.
The quality of a person's code review is limited by their familiarity with the code under review.
Our goal is to address both of these concerns through the prudent use and maintenance of OWNERS files

<a name="owners-1"></a>

### OWNERS

Each directory that contains a unit of independent code or content may also contain an OWNERS file.
This file applies to everything within the directory, including the OWNERS file itself, sibling files, and child directories.

OWNERS files are in YAML format and support the following keys:

- `approvers`: a list of GitHub usernames or aliases that can `/approve` a PR
- `labels`: a list of GitHub labels to automatically apply to a PR
- `options`: a map of options for how to interpret this OWNERS file, currently only one:
  - `no_parent_owners`: defaults to `false` if not present; if `true`, exclude parent OWNERS files.
    Allows the use case where `a/deep/nested/OWNERS` file prevents `a/OWNERS` file from having any
    effect on `a/deep/nested/bit/of/code`
- `reviewers`: a list of GitHub usernames or aliases that are good candidates to `/lgtm` a PR
- `emeritus_approvers` a list of GitHub usernames of folks who were previously in the `approvers`
  section, but are no longer actively approving code. Please see [below](#emeritus) for more details.

All users are expected to be assignable.
In GitHub terms, this means they are either collaborators of the repo, or members of the organization to which the repo belongs.

A typical OWNERS file looks like:

```yaml
approvers:
  - alice
  - bob # this is a comment
reviewers:
  - alice
  - carol # this is another comment
  - sig-foo # this is an alias
```

#### Emeritus

It is inevitable, but there are times when someone may shift focuses, change jobs or step away from
a specific area in the project for a time. These people may be domain experts over certain areas of
the codebase, but can no longer dedicate the time needed to handle the responsibilities of
reviewing and approving changes. They are encouraged to add themselves as an “emeritus”
approver under the `emeritus_approvers` key.

GitHub usernames listed under the `emeritus_approvers` key can no longer approve code
(use the /approve command) and will be ignored by prow for assignment. However, it can still be
referenced by a person looking at the OWNERS file for a possible second or more informed opinion.

When a contributor returns to being more active in that area, they may be promoted back to a
regular approver at the discretion of the current approvers.

```yaml
emeritus_approvers:
  - david
  - emily
```

#### OWNERS_ALIASES

Each repo may contain at its root an OWNERS_ALIAS file.

OWNERS_ALIAS files are in YAML format and support the following keys:

- `aliases`: a mapping of alias name to a list of GitHub usernames

We use aliases for groups instead of GitHub Teams, because changes to GitHub Teams are not publicly auditable.

A sample OWNERS_ALIASES file looks like:

```yaml
aliases:
  sig-foo:
    - david
    - erin
  sig-bar:
    - bob
    - frank
```

GitHub usernames and aliases listed in OWNERS files are case-insensitive.

### The code review process

- The **author** submits a PR
- Phase 0: Automation suggests **reviewers** and **approvers** for the PR
  - Determine the set of OWNERS files nearest to the code being changed
  - Choose at least two suggested **reviewers**, trying to find a unique reviewer for every leaf
    OWNERS file, and request their reviews on the PR
  - Choose suggested **approvers**, one from each OWNERS file, and list them in a comment on the PR
- Phase 1: Humans review the PR
  - **Reviewers** look for general code quality, correctness, sane software engineering, style, etc.
  - Anyone in the organization can act as a **reviewer** with the exception of the individual who
    opened the PR
  - If the code changes look good to them, a **reviewer** types `/lgtm` in a PR comment or review;
    if they change their mind, they `/lgtm cancel`
  - Once a **reviewer** has `/lgtm`'ed, [prow](https://prow.k8s.io)
    ([@k8s-ci-robot](https://github.com/k8s-ci-robot/)) applies an `lgtm` label to the PR
- Phase 2: Humans approve the PR
  - The PR **author** `/assign`'s all suggested **approvers** to the PR, and optionally notifies
    them (eg: "pinging @foo for approval")
  - Only people listed in the relevant OWNERS files, either directly or through an alias, can act
    as **approvers**, including the individual who opened the PR
  - **Approvers** look for holistic acceptance criteria, including dependencies with other features,
    forwards/backwards compatibility, API and flag definitions, etc
  - If the code changes look good to them, an **approver** types `/approve` in a PR comment or
    review; if they change their mind, they `/approve cancel`
  - [prow](https://prow.k8s.io) ([@k8s-ci-robot](https://github.com/k8s-ci-robot/)) updates its
    comment in the PR to indicate which **approvers** still need to approve
  - Once all **approvers** (one from each of the previously identified OWNERS files) have approved,
    [prow](https://prow.k8s.io) ([@k8s-ci-robot](https://github.com/k8s-ci-robot/)) applies an
    `approved` label
- Phase 3: Automation merges the PR:

  - If all of the following are true:

    - All required labels are present (eg: `lgtm`, `approved`)
    - Any blocking labels are missing (eg: there is no `do-not-merge/hold`, `needs-rebase`)

  - And if any of the following are true:

    - there are no presubmit prow jobs configured for this repo
    - there are presubmit prow jobs configured for this repo, and they all pass after automatically
      being re-run one last time

  - Then the PR will automatically be merged

### Quirks of the process

There are a number of behaviors we've observed that while _possible_ are discouraged, as they go
against the intent of this review process. Some of these could be prevented in the future, but this
is the state of today.

- An **approver**'s `/lgtm` is simultaneously interpreted as an `/approve`
  - While a convenient shortcut for some, it can be surprising that the same command is interpreted
    in one of two ways depending on who the commenter is
  - Instead, explicitly write out `/lgtm` and `/approve` to help observers, or save the `/lgtm` for
    a **reviewer**
  - This goes against the idea of having at least two sets of eyes on a PR, and may be a sign that
    there are too few **reviewers** (who aren't also **approver**)
- Technically, anyone who is a member of the Kubeflow GitHub organization can drive-by `/lgtm` a
  PR
  - Drive-by reviews from non-members are encouraged as a way of demonstrating experience and
    intent to become a collaborator or reviewer
  - Drive-by `/lgtm`'s from members may be a sign that our OWNERS files are too small, or that the
    existing **reviewers** are too unresponsive
  - This goes against the idea of specifying **reviewers** in the first place, to ensure that
    **author** is getting actionable feedback from people knowledgeable with the code
- **Reviewers**, and **approvers** are unresponsive
  - This causes a lot of frustration for **authors** who often have little visibility into why their
    PR is being ignored
  - Many **reviewers** and **approvers** are so overloaded by GitHub notifications that @mention'ing
    is unlikely to get a quick response
  - If an **author** `/assign`'s a PR, **reviewers** and **approvers** will be made aware of it on
    their [PR dashboard](https://k8s-gubernator.appspot.com/pr)
  - An **author** can work around this by manually reading the relevant OWNERS files,
    `/unassign`'ing unresponsive individuals, and `/assign`'ing others
  - This is a sign that our OWNERS files are stale; pruning the **reviewers** and **approvers** lists
    would help with this
  - It is the PR **authors** responsibility to drive a PR to resolution. This means if the PR **reviewers** are unresponsive they should escalate as noted below
    - e.g ping **reviewers** in a timely manner to get it reviewed
    - If the **reviewers** don't respond look at the OWNERs file in root and ping **approvers** listed there
- **Authors** are unresponsive
  - This costs a tremendous amount of attention as context for an individual PR is lost over time
  - This hurts the project in general as its general noise level increases over time
  - Instead, close PR's that are untouched after too long (we currently have a bot do this after 90 days)

## Automation using OWNERS files

### [`prow`](https://git.k8s.io/test-infra/prow)

Prow receives events from GitHub, and reacts to them. It is effectively stateless. The following
pieces of prow are used to implement the code review process above.

- [cmd: tide](https://git.k8s.io/test-infra/prow/cmd/tide)
  - per-repo configuration:
    - `labels`: list of labels required to be present for merge (eg: `lgtm`)
    - `missingLabels`: list of labels required to be missing for merge (eg: `do-not-merge/hold`)
    - `reviewApprovedRequired`: defaults to `false`; when true, require that there must be at least
      one [approved pull request review](https://help.github.com/articles/about-pull-request-reviews/)
      present for merge
    - `merge_method`: defaults to `merge`; when `squash` or `rebase`, use that merge method instead
      when clicking a PR's merge button
  - merges PR's once they meet the appropriate criteria as configured above
  - if there are any presubmit prow jobs for the repo the PR is against, they will be re-run one
    final time just prior to merge
- [plugin: assign](https://git.k8s.io/test-infra/prow/plugins/assign)
  - assigns GitHub users in response to `/assign` comments on a PR
  - unassigns GitHub users in response to `/unassign` comments on a PR
- [plugin: approve](https://git.k8s.io/test-infra/prow/plugins/approve)
  - per-repo configuration:
    - `issue_required`: defaults to `false`; when `true`, require that the PR description link to
      an issue, or that at least one **approver** issues a `/approve no-issue`
    - `implicit_self_approve`: defaults to `false`; when `true`, if the PR author is in relevant
      OWNERS files, act as if they have implicitly `/approve`'d
  - adds the `approved` label once an **approver** for each of the required
    OWNERS files has `/approve`'d
  - comments as required OWNERS files are satisfied
  - removes outdated approval status comments
- [plugin: blunderbuss](https://git.k8s.io/test-infra/prow/plugins/blunderbuss)
  - determines **reviewers** and requests their reviews on PR's
- [plugin: lgtm](https://git.k8s.io/test-infra/prow/plugins/lgtm)
  - adds the `lgtm` label when a **reviewer** comments `/lgtm` on a PR
  - the **PR author** may not `/lgtm` their own PR
- [pkg: k8s.io/test-infra/prow/repoowners](https://git.k8s.io/test-infra/prow/repoowners/repoowners.go)
  - parses OWNERS and OWNERS_ALIAS files
  - if the `no_parent_owners` option is encountered, parent owners are excluded from having
    any influence over files adjacent to or underneath of the current OWNERS file

## Maintaining OWNERS files

OWNERS files should be regularly maintained.

We encourage people to self-nominate or self-remove from OWNERS files via PR's. Ideally in the future
we could use metrics-driven automation to assist in this process.

We should strive to:

- grow the number of OWNERS files
- add new people to OWNERS files
- ensure OWNERS files only contain org members and repo collaborators
- ensure OWNERS files only contain people are actively contributing to or reviewing the code they own
- remove inactive people from OWNERS files

Bad examples of OWNERS usage:

- directories that lack OWNERS files, resulting in too many hitting root OWNERS
- OWNERS files that have a single person as both approver and reviewer
- OWNERS files that haven't been touched in over 6 months
- OWNERS files that have non-collaborators present

Good examples of OWNERS usage:

- there are more `reviewers` than `approvers`
- the `approvers` are not in the `reviewers` section
- OWNERS files that are regularly updated (at least once per release)



================================================
File: content/en/docs/about/events.md
================================================
+++
title =  "Events"
description = "Kubeflow Community Events and Meetups"
weight = 15
manualLink = "/events/"
icon = "fa-solid fa-arrow-up-right-from-square"
+++


================================================
File: content/en/docs/about/membership.md
================================================
+++
title = "Community Membership"
description = "Guidelines for contributing to Kubeflow"
weight = 30
aliases = ["/docs/membership/"]
+++

This document outlines the various responsibilities of contributor roles in Kubeflow. Kubeflow is divided into working groups that have stewardship over different subprojects/repositories

Responsibilities for most roles are scoped to these repositories.

| Role | Responsibilities | Requirements | Defined by |
| -----| ---------------- | ------------ | -------|
| Member | Active contributor in the community | Sponsored by 2 Kubeflow members and multiple contributions to the project | Kubeflow GitHub org member|
| Reviewer | Review contributions from other members | History of review and authorship in a repository | [OWNERS](/docs/about/contributing/#owners) file reviewer entry |
| Approver | Contributions acceptance approval| Highly experienced active reviewer and contributor to a repository | [OWNERS](/docs/about/contributing/#owners) file approver entry|
| WG Lead  | Provides technical leadership for a Working Group | Have sufficient domain knowledge to provide effective technical leadership | [wgs.yaml] entry |
| WG Chair | Provides overall leadership for a Working Group | Have sufficient domain knowledge to provide effective leadership | [wgs.yaml] entry |
| Kubeflow Steering Commitee Member | The KSC provides leadership for the overall Kubeflow project | [Details](https://github.com/kubeflow/community/blob/master/KUBEFLOW-STEERING-COMMITTEE.md#charter) | [Members](https://github.com/kubeflow/community/blob/master/KUBEFLOW-STEERING-COMMITTEE.md#charter) |

{{< note >}}
Detailed documentation for Working Group structure and responsibilities can be found at [wg-governance.md](https://github.com/kubeflow/community/blob/master/wgs/wg-governance.md)
{{< /note >}}

## New contributors

[New contributors] should be welcomed to the community by existing members, helped with PR workflow, and directed to the relevant documentation and communication channels.

## Established community members

Established community members are expected to demonstrate their adherence to the principles in this document, familiarity with project organization, roles, policies, procedures, conventions, etc., and technical and/or writing ability. Role-specific expectations, responsibilities, and requirements are enumerated below.

## Member

Members are *[continuously active]* contributors in the community. They can have issues and PRs assigned to them and tests are automatically run for their PRs. Members are expected to remain active contributors to the community.

**Defined by:** Member of the Kubeflow GitHub organization

### Requirements

- Enabled two-factor authentication on their GitHub account
- Have made **at least** 2-3 [code contributions] or [non-code contributions] to the project or community.
- Have read the [contributor guide].
- Sponsored by 2 Kubeflow members. **Note the following requirements for sponsors**:
- **[Open an issue with the membership template][membership template] against the kubeflow/internal-acls repo**
  - Ensure your sponsors are @mentioned on the issue
- **Open a pull request against the kubeflow/internal-acls repo**
  - Complete every item on the checklist ([preview the current version of the template][membership template])
  - Make sure that the list of contributions included is representative of your work on the project.
- Have your sponsoring reviewers reply confirmation of sponsorship
- Once your sponsors have responded, your request will be reviewed by the Kubeflow team. Any missing information will be requested
- After your PR is merged, you will get an email (to your GitHub-associated email address) inviting you to the Kubeflow GitHub org. Follow the instructions to accept your membership.
- To confirm that the membership acceptance process has completed, you can search for your GitHub username at https://github.com/orgs/kubeflow/people.

### Responsibilities

- Responsive to issues and PRs assigned to them
- Active participants in the Kubeflow community by participating in:
  - Working Group Meetings
  - Slack Discussions
  - Project Discussions
- Responsive to mentions of any teams they may be members of
- Active owner of code they have contributed (unless ownership is explicitly transferred)
  - Code is well tested
  - Tests consistently pass
  - Addresses bugs or issues discovered after code is accepted
- Subscribed to <https://groups.google.com/g/kubeflow-discuss>

{{< note >}}
Members who frequently contribute code are expected to proactively perform code reviews and work towards becoming a primary *reviewer* for the subproject that they are active in.
{{< /note >}}

### Privileges

- Members can do `/lgtm` on open PRs.
- They can be assigned to issues and PRs, and people can ask members for reviews with a `/cc @username`.
- They are eligible to be appointed as a Kubeflow release manager
- Tests can be run against their PRs automatically. No `/ok-to-test` needed.
- Members can do `/ok-to-test` for PRs that have a `needs-ok-to-test` label, and use commands like `/close` to close PRs as well. A complete list of commands can be found in [the Prow documentation](https://prow.k8s.io/command-help)

## Reviewer

Reviewers are able to review code for quality and correctness on some part of a subproject. They are knowledgeable about both the codebase and software engineering principles.

**Defined by:** *reviewers* entry in an `OWNERS` file in a repo owned by the Kubeflow organization.

Reviewer status can be scoped to either parts of the codebase or the root directory for the entire codebase.

{{< note >}}
Acceptance of code contributions requires at least one approver in addition to the assigned reviewers.
{{< /note >}}

### Requirements

The following apply to the part of codebase for which one would be a reviewer in an [OWNERS](/docs/about/contributing/#owners) file.

- member for at least 3 months
- Primary reviewer for at least 5 PRs to the codebase
- Reviewed or merged at least 15 substantial PRs to the codebase
- Knowledgeable about the codebase
- Active engagement with the commmunity by answering user questions in GitHub issues and Slack
- Sponsored by a subproject approver
  - With no objections from other approvers
  - Done through PR to update the OWNERS file
- May either self-nominate or be nominated by an approver in this subproject

{{< note >}}
Working Group Leads may nominate and approve `Reviewers` that don't meet these requirements due to exceptional circumstances. While acceptable in the short term, Working Group Leads should ensure that these `Reviewers` eventually meet the requirements
{{< /note >}}

The following apply to the part of codebase for which one would be a reviewer in an [OWNERS](/docs/about/contributing/#owners) file.

### Responsibilities

- All responsiblities that community members have
- Responsible for project quality control via code reviews
  - Focus on code quality and correctness, including testing and factoring
  - May also review for more holistic issues, but not a requirement
- Expected to be responsive to review requests
- Expected to actively engage with the community by answering questions in GitHub issues and Slack
- Assigned PRs to review related to subproject of expertise
- Assigned test bugs related to subproject of expertise

### Privileges

- All Privileges that community members have
- Code reviewer status may be a precondition to accepting large code contributions
- May get a badge on PR and issue comments

## Approver

Code approvers are able to both review and approve code contributions. While
code review is focused on code quality and correctness, approval is focused on
holistic acceptance of a contribution including: backwards / forwards
compatibility, adhering to API and flag conventions, subtle performance and
correctness issues, interactions with other parts of the system, overall code test coverage, etc.

**Defined by:** *approvers* entry in an OWNERS file in a repo owned by the Kubeflow organization.

Approver status can be scoped to either parts of the codebase or the root directory for the entire codebase.

### Requirements

The following apply to the part of codebase for which one would be an approver in an [OWNERS](/docs/about/contributing/#owners) file.

- Have met the responsibilities of the `Reviewer` role (as defined above) of the codebase for at least 3 months
- Primary reviewer for at least 10 substantial PRs to the codebase
- Reviewed or merged at least 30 PRs to the codebase
- Nominated by a WG Lead or Chair
  - With no objections from other Leads or Chairs
  - Done through PR to update the relevant OWNERS file

{{< note >}}
Working Group Leads may nominate and approve `Approvers` that don't meet these requirements due to exceptional circumstances. While acceptable in the short term, Working Group Leads should ensure that these `Approvers` eventually meet the requirements
{{< /note >}}

### Responsibilities

The following apply to the part of codebase for which one would be an approver in an [OWNERS](/docs/about/contributing/#owners) file.

- All responsibilities that reviewers have
- Approver status may be a precondition to accepting large architectural contributions
- Demonstrate sound technical judgement
- Responsible for project quality control via code reviews
  - Focus on holistic acceptance of contribution such as dependencies with other features, backwards / forwards
    compatibility, API and flag definitions, etc
- Expected to be responsive to review requests
- Expected to be responsive to merge requests for pull requests when reviewed
- Mentor contributors and reviewers

### Privileges

- All privileges that reviewers have
- May approve code contributions for acceptance

## Inactive members

*Members are continuously active contributors in the community.*

A core principle in maintaining a healthy community is encouraging active
participation. It is inevitable that people's focuses will change over time and
they are not expected to be actively contributing forever.

However, being a member of one of the Kubeflow GitHub organizations comes with
an elevated set of permissions. These capabilities should not be used by those
that are not familiar with the current state of the Kubeflow organization.

Therefore members with an extended period (1 year) away from the organization with no activity
will be removed from the Kubeflow GitHub Organizations and will be required to
go through the org membership process again after re-familiarizing themselves
with the current state.

If anyone listed in OWNERS files should become inactive, here is what we will do:

- If the person is in reviewers section, their GitHub id will be removed from the section.
- If the person is in approvers section, their GitHub id will be moved
  [the `emeritus_approvers` section](/docs/about/contributing/#emeritus).

### How inactivity is measured

Inactive members are defined as members of one of the Kubeflow Organizations with **no** technical and non-technical contributions across any organization within 12 months. [DevStats](https://kubeflow.devstats.cncf.io/d/66/developer-activity-counts-by-companies?orgId=1&var-period_name=Last%20year&var-metric=contributions&var-repogroup_name=All&var-country_name=All&var-companies=All) offers an easy way to determine contributions to Kubeflow

After an extended period away from the project with no activity those members would need to re-familiarize themselves with the current state before being able to contribute effectively.

## Credit

This set of guidelines is heavily inspired by the [Kubernetes membership guidelines](https://github.com/kubernetes/community/blob/master/community-membership.md?plain=1#community-membership).

[code contributions]: https://contribute.cncf.io/contributors/getting-started/#code-contributors
[non-code contributions]: https://contribute.cncf.io/contributors/getting-started/#non-code-contributors
[contributor guide]: https://www.kubeflow.org/docs/about/contributing/
[membership template]: https://github.com/kubeflow/internal-acls/blob/master/.github/ISSUE_TEMPLATE/join_org.md
[New contributors]: /docs/about/contributing/
[continuously active]: #inactive-members
[wgs.yaml]: https://github.com/kubeflow/community/blob/master/wgs.yaml



================================================
File: content/en/docs/about/OWNERS
================================================
approvers:
  - 8bitmp3
  - andreyvelich
  - gaocegege
  - Jeffwan
  - johnugeorge
  - terrytangyuan



================================================
File: content/en/docs/about/style-guide.md
================================================
+++
title =  "Documentation Style Guide"
description = "Style guide for writing Kubeflow documentation"
weight = 90
+++

This style guide is for the [Kubeflow documentation](/docs/).
The style guide helps contributors to write documentation that readers can understand quickly and correctly. 

The Kubeflow docs aim for:

- Consistency in style and terminology, so that readers can expect certain
  structures and conventions. Readers don't have to keep re-learning how to use
  the documentation or questioning whether they've understood something
  correctly.
- Clear, concise writing so that readers can quickly find and understand the
  information they need.

## Use standard American spelling

Use American spelling rather than Commonwealth or British spelling.
Refer to [Merriam-Webster's Collegiate Dictionary, Eleventh Edition](https://www.merriam-webster.com/).

## Use capital letters sparingly

Some hints:

- Capitalize only the first letter of each heading within the page. (That is, use sentence case.)
- Capitalize (almost) every word in page titles. (That is, use title case.) 
  The little words like "and", "in", etc, don't get a capital letter.
- In page content, use capitals only for brand names, like Kubeflow, Kubernetes, and so on. 
  See more about brand names [below](#use-full-correct-brand-names).
- Don't use capital letters to emphasize words.

## Spell out abbreviations and acronyms on first use

Always spell out the full term for every abbreviation or acronym the first time you use it on the page. 
Don't assume people know what an abbreviation or acronym means, even if it seems like common knowledge.

Example: "To run Kubernetes locally in a virtual machine (VM)"

## Use contractions if you want to

For example, it's fine to write "it's" instead of "it is".

<a id="brand-names"></a>

## Use full, correct brand names

When referring to a product or brand, use the full name. 
Capitalize the name as the product owners do in the product documentation. 
Do not use abbreviations even if they're in common use, unless the product owner has sanctioned the abbreviation.

<div class="table-responsive">
  <table class="table table-bordered">
    <thead class="thead-light">
      <tr>
        <th>Use this</th>
        <th>Instead of this</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Kubeflow</td>
        <td>kubeflow</td>
      </tr>
      <tr>
        <td>Kubernetes</td>
        <td>k8s</td>
      </tr>
      <tr>
        <td>ksonnet</td>
        <td>Ksonnet</td>
      </tr>
    </tbody>
  </table>
</div>

## Be consistent with punctuation

Use punctuation consistently within a page. 
For example, if you use a period (full stop) after every item in list, then use a period on all other lists on the page.

Check the other pages if you're unsure about a particular convention.

Examples:

- Most pages in the Kubeflow docs use a period at the end of every list item.
- There is no period at the end of the page subtitle and the subtitle need not be a full sentence. 
  (The subtitle comes from the `description` in the front matter of each page.)

## Use active voice rather than passive voice

Passive voice is often confusing, as it's not clear who should perform the action.

<div class="table-responsive">
  <table class="table table-bordered">
    <thead class="thead-light">
      <tr>
        <th>Use active voice</th>
        <th>Instead of passive voice</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>You can configure Kubeflow to</td>
        <td>Kubeflow can be configured to</td>
      </tr>
      <tr>
        <td>Add the directory to your path</td>
        <td>The directory should be added to your path</td>
      </tr>
    </tbody>
  </table>
</div>

## Use simple present tense

Avoid future tense ("will") and complex syntax such as conjunctive mood ("would", "should").

<div class="table-responsive">
  <table class="table table-bordered">
    <thead class="thead-light">
      <tr>
        <th>Use simple present tense</th>
        <th>Instead of future tense or complex syntax</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>The following command provisions a virtual machine</td>
        <td>The following command will provision a virtual machine</td>
      </tr>
      <tr>
        <td>If you add this configuration element, the system is open to
          the Internet</td>
        <td>If you added this configuration element, the system would be open to
          the Internet</td>
      </tr>
    </tbody>
  </table>
</div>

**Exception:** Use future tense if it's necessary to convey the correct meaning. This requirement is rare.

## Address the audience directly

Using "we" in a sentence can be confusing, because the reader may not know whether they're part of the "we" you're describing. 

For example, compare the following two statements:

- "In this release we've added many new features."
- "In this tutorial we build a flying saucer."

The words "the developer" or "the user" can be ambiguous. 
For example, if the reader is building a product that also has users, 
then the reader does not know whether you're referring to the reader or the users of their product.

<div class="table-responsive">
  <table class="table table-bordered">
    <thead class="thead-light">
      <tr>
        <th>Address the reader directly</th>
        <th>Instead of "we", "the user", or "the developer"</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Include the directory in your path</td>
        <td>The user must make sure that the directory is included in their path
        </td>
      </tr>
      <tr>
        <td>In this tutorial you build a flying saucer</td>
        <td>In this tutorial we build a flying saucer</td>
      </tr>
    </tbody>
  </table>
</div>

## Use short, simple sentences

Keep sentences short. Short sentences are easier to read than long ones. 
Below are some tips for writing short sentences.

<div class="table-responsive">
  <table class="table table-bordered">
    <thead class="thead-light">
      <tr>
        <th colspan="2">Use fewer words instead of many words that convey the same meaning</th>
      </tr>
      <tr>
        <th>Use this</th>
        <th>Instead of this</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>You can use</td>
        <td>It is also possible to use</td>
      </tr>
      <tr>
        <td>You can</td>
        <td>You are able to</td>
      </tr>
    </tbody>
  </table>
</div>

<div class="table-responsive">
  <table class="table table-bordered">
    <thead class="thead-light">
      <tr>
        <th colspan="2">Split a single long sentence into two or more shorter ones</th>
      </tr>
      <tr>
        <th>Use this</th>
        <th>Instead of this</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>You do not need a running GKE cluster. The deployment process
          creates a cluster for you</td>
        <td>You do not need a running GKE cluster, because the deployment 
          process creates a cluster for you</td>
      </tr>
    </tbody>
  </table>
</div>

<div class="table-responsive">
  <table class="table table-bordered">
    <thead class="thead-light">
      <tr>
        <th colspan="2">Use a list instead of a long sentence showing various options</th>
      </tr>
      <tr>
        <th>Use this</th>
        <th>Instead of this</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>
          <p>To train a model:</p>
          <ol>
            <li>Package your program in a Kubernetes container.</li>
            <li>Upload the container to an online registry.</li>
            <li>Submit your training job.</li>
          </ol>
        </td>
        <td>To train a model, you must package your program in a Kubernetes 
          container, upload the container to an online registry, and submit your 
          training job.</td>
      </tr>
    </tbody>
  </table>
</div>

## Avoid too much text styling

Use **bold text** when referring to UI controls or other UI elements.

Use `code style` for:

- filenames, directories, and paths
- inline code and commands
- object field names

Avoid using bold text or capital letters for emphasis. 
If a page has too much textual highlighting it becomes confusing and even annoying.

## Use angle brackets for placeholders

For example:

- `export KUBEFLOW_USERNAME=<your username>`
- `--email <your email address>`

## Style your images

The Kubeflow docs recognise Bootstrap classes to style images and other content.

The following code snippet shows the typical styling that makes an image show up nicely on the page:

```
<img src="/docs/images/my-image.png"
  alt="My image"
  class="mt-3 mb-3 p-3 border border-info rounded">
```

To see some examples of styled images, take a look at the [OAuth setup page](https://googlecloudplatform.github.io/kubeflow-gke-docs/docs/deploy/oauth-setup/).

For more help, see the guide to [Bootstrap image styling](https://getbootstrap.com/docs/4.6/content/images/) and the Bootstrap utilities, such as [borders](https://getbootstrap.com/docs/4.6/utilities/borders/).

## A detailed style guide

The [Google Developer Documentation Style Guide](https://developers.google.com/style/) contains detailed information about specific aspects of writing clear, readable, succinct documentation for a developer audience.

## Next steps

- Take a look at the [documentation README](https://github.com/kubeflow/website/blob/master/README.md) for guidance on contributing to the Kubeflow docs.




================================================
File: content/en/docs/components/_index.md
================================================
+++
title = "Components"
description = "Logical components that make up Kubeflow"
weight = 30
+++



================================================
File: content/en/docs/components/central-dash/_index.md
================================================
+++
title = "Central Dashboard"
description = "The central user interface (UI) in Kubeflow"
weight = 5
+++



================================================
File: content/en/docs/components/central-dash/access.md
================================================
+++
title = "Access the Dashboard"
description = "How to access the Kubeflow Central Dashboard via the Istio Gateway"
weight = 15
+++

## How to access the Kubeflow Central Dashboard?

To access the Kubeflow central dashboard, you need to connect to the [Istio Gateway](https://istio.io/docs/concepts/traffic-management/#gateways) that provides access to the Kubeflow [service mesh](https://istio.io/docs/concepts/what-is-istio/#what-is-a-service-mesh).
How you access the Istio gateway varies depending on how you've configured it.

## Packaged Distributions

Each [packaged distribution of Kubeflow](/docs/started/installing-kubeflow/#packaged-distributions) will have its own way of accessing the central dashboard.

For more information, please see the documentation of the distribution you are using.

## Raw Manifests

If you are using the default [Kubeflow Manifests](/docs/started/installing-kubeflow/#kubeflow-manifests), you may access the Istio gateway with `kubectl` port-forwarding or another method.

### kubectl port-forwarding

To access the central dashboard using `kubectl` port-forwarding:

1. [Install `kubectl`](https://kubernetes.io/docs/tasks/tools/install-kubectl/), if you haven't already done so.
2. Use the following command to set up port forwarding on your local machine:

    ```bash
    export ISTIO_NAMESPACE=istio-system
    kubectl port-forward svc/istio-ingressgateway -n ${ISTIO_NAMESPACE} 8080:80
    ```

3. Open a browser and navigate to: [http://localhost:8080](http://localhost:8080)
4. If you have not changed the default username and password, you may log in with:
    - Username: `user@example.com`
    - Password: `12341234`

## Next steps

- Learn about [Profiles and Namespaces](/docs/components/central-dash/profiles/).


================================================
File: content/en/docs/components/central-dash/customize.md
================================================
+++
title = "Customize the Dashboard"
description = "Customize the Kubeflow Central Dashboard menu items and integrate third-party apps"
weight = 90
+++

## How to customize the Kubeflow Central Dashboard?

The Kubeflow Central Dashboard provides a way to customize the menu items and integrate third-party apps.

For example, the below image shows the Kubeflow Central Dashboard with a custom **"My App"** menu item:

<img src="/docs/images/dashboard/custom-menu-item.png" 
     alt="Kubeflow Central Dashboard - Customize Menu Items"
     class="mt-3 mb-3 border border-info rounded">
</img>

## Central Dashboard ConfigMap

The Kubeflow Central Dashboard is configured using a Kubernetes [ConfigMap](https://kubernetes.io/docs/concepts/configuration/configmap/).

The `CD_CONFIGMAP_NAME` environment variable on the central-dashboard Deployment specifies the name of the ConfigMap (`centraldashboard-config` by default).

You can find examples of the ConfigMap in the following locations:

- [Default](https://github.com/kubeflow/kubeflow/blob/v1.9.0/components/centraldashboard/manifests/base/configmap.yaml)
- [Default + KServe](https://github.com/kubeflow/kubeflow/blob/v1.9.0/components/centraldashboard/manifests/overlays/kserve/patches/configmap.yaml)

## External Links

The `externalLinks` section of the ConfigMap adds links to the sidebar for external sites (not hosted on the Kubernetes cluster).

Each element of `externalLinks` is a JSON object with the following fields:

- `type`: must be set to `"item"`
- `iframe`: must be set to `false`
- `text`: the text to display for the link
- `link`: the URL to open when the link is clicked
- `icon`: an [iron-icon](https://www.webcomponents.org/element/@polymer/iron-icons/demo/demo/index.html) name to display for the link.
    - Note, you must exclude the `icons:` prefix
    - For example, to use `icons:launch` you would set `"launch"`
    - For example, to use `social:mood` you would set `"social:mood"`

For example, the below ConfigMap adds a link to the Kubeflow website:

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: centraldashboard-config
  namespace: kubeflow
data:
  settings: |-
    ...
  links: |-
    {
      "menuLinks": [
        ...
      ],
      "externalLinks": [
        {
          "type": "item",
          "iframe": false,
          "text": "Kubeflow Website",
          "link": "https://www.kubeflow.org/",
          "icon": "launch"
        }
      ],
      "quickLinks": [
        ...
      ],
      "documentationItems": [
        ...
      ]
    }
```

## Documentation Links

The `documentationItems` section of the ConfigMap adds links to the "Documentation" section of the Home page.

Each element of `documentationItems` is a JSON object with the following fields:

- `text`: the text to display for the link
- `desc`: the description to display below the link
- `link`: the URL to open when the link is clicked

For example, the below ConfigMap adds a link to the Kubeflow website documentation:

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: centraldashboard-config
  namespace: kubeflow
data:
  settings: |-
    ...
  links: |-
    {
      "menuLinks": [
        ...
      ],
      "externalLinks": [
        ...
      ],
      "quickLinks": [
        ...
      ],
      "documentationItems": [
        {
          "text": "Kubeflow Website",
          "desc": "Kubeflow website documentation",
          "link": "https://www.kubeflow.org/docs/"
        }
      ]
    }
```

## In-Cluster Links

### Create VirtualService

If you have a non-Kubeflow application running on the cluster, you may expose it through the Kubeflow Central Dashboard by creating a [`VirtualService`](https://istio.io/latest/docs/reference/config/networking/virtual-service/) on the Kubeflow Istio Gateway.
To do this, your app must have an injected Istio sidecar and be exposed as a Kubernetes Service.

For example, the below `VirtualService` exposes `Service/my-app` from the `my-namespace` namespace on the Kubeflow Istio Gateway under the path `/my-app/`:

```yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: my-custom-app
  namespace: <MY_APP_NAMESPACE>
spec:
  gateways:
    ## the istio gateway which is serving kubeflow
    ## TEMPLATE: <KUBEFLOW_GATEWAY_NAMESPACE>/<KUBEFLOW_GATEWAY_NAME>
    - kubeflow/kubeflow-gateway
  hosts:
    - '*'
  http:
    - headers:
        request:
          add:
            x-forwarded-prefix: /my-app
      match:
        - uri:
            prefix: /my-app/
      rewrite:
        uri: /
      route:
        - destination:
            host: <MY_APP_SERVICE_NAME>.<MY_APP_NAMESPACE>.svc.cluster.local
            port:
              number: 80
```

Creating this `VirtualService` should make the application available at the `/_/my-app/` path on the Kubeflow Istio Gateway.

```text
http(s)://<KUBEFLOW_ISTIO_GATEWAY>/_/my-app/
```

{{% alert title="UserID Header Authentication" color="info" %}}
Each request to the application will have a header named `kubeflow-userid` with the user's email address, which may be used for authentication.

To ensure that this header is not spoofed, you should ensure that the application is ONLY accessible from the Kubeflow Istio Gateway.
This could be achieved by:

- creating an ALLOW `AuthorizationPolicy` which requires the `from[].source[].principals[]` to be `cluster.local/ns/<ISTIO_GATEWAY_NAMESPACE>/sa/<ISTIO_GATEWAY_SERVICE_ACCOUNT>`
- ensuring that out-of-mesh traffic is blocked by the sidecar using a `DestinationRule` with `trafficPolicy.tls.mode` set to `ISTIO_MUTUAL` for the `Service` backing the application
{{% /alert %}}

### Add In-Cluster Link

The `menuLinks` section of the ConfigMap adds links to the sidebar for __in-cluster__ applications.

Each element of `menuLinks` is a JSON object with the following fields:

- `type`: must be set to `"item"`
- `link`: the path to open when the link is clicked
- `text`: the text to display for the link
- `icon`: an [iron-icon](https://www.webcomponents.org/element/@polymer/iron-icons/demo/demo/index.html) name to display for the link.
    - Note, you must exclude the `icons:` prefix
    - For example, to use `icons:launch` you would set `"launch"`
    - For example, to use `social:mood` you would set `"social:mood"`

For example, the below ConfigMap adds the ["my-app" application](#create-virtualservice) from above:

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: centraldashboard-config
  namespace: kubeflow
data:
  settings: |-
    ...
  links: |-
    {
      "menuLinks": [
        ...
        {
          "type": "item",
          "link": "/my-app/",
          "text": "My App",
          "icon": "social:mood"
        },
        ...
      ],
      "externalLinks": [
        ...
      ],
      "quickLinks": [
        ...
      ],
      "documentationItems": [
        ...
      ]
    }
```

{{% alert title="Namespaced Applications" color="info" %}}
If you have instances of your application in each profile namespace, you can use `{ns}` in the `link` field to dynamically insert the active profile namespace into the link.

For example, if you have an instance of the application in the `profile1` namespace and another instance in the `profile2` namespace.
You may configure your `VirtualService` to expose the application under the path `/my-app/{ns}/`:

```text
http(s)://<KUBEFLOW_ISTIO_GATEWAY>/_/my-app/profile1/
http(s)://<KUBEFLOW_ISTIO_GATEWAY>/_/my-app/profile2/
```

The `menuLinks` element for such and app might look like this:

```json
{
  "type": "item",
  "link": "/my-app/{ns}/",
  "text": "My App",
  "icon": "social:mood"
}
```

Because the application pods are within the profile namespaces, existing Kubeflow AuthorizationPolicies should restrict the application to profile contributors.
For example, if the user is a contributor of the `profile1` namespace (but not `profile2`), they will be able to access `http(s)://<KUBEFLOW_ISTIO_GATEWAY>/_/my-app/profile1/` but not `http(s)://<KUBEFLOW_ISTIO_GATEWAY>/_/my-app/profile2/`.
{{% /alert %}}


================================================
File: content/en/docs/components/central-dash/overview.md
================================================
+++
title = "Overview"
description = "Overview of the Kubeflow Central Dashboard"
weight = 10
+++

{{% stable-status %}}

## What is the Kubeflow Central Dashboard?

The _Kubeflow Central Dashboard_ provides an authenticated web interface for Kubeflow and ecosystem components. 
It acts as a hub for your machine learning platform and tools by exposing the UIs of components running in the cluster.

Some core features of the central dashboard include:

- Authentication and authorization based on [Profiles and Namespaces](/docs/components/central-dash/profiles/).
- Access to the [user interface's](#navigation) of Kubeflow components.
- The ability to [customize and include links](/docs/components/central-dash/customize/) to third-party applications.

## Screenshots

Here is a screenshot of the Kubeflow Central Dashboard:

<img src="/docs/images/dashboard/homepage.png" 
     alt="Kubeflow Central Dashboard - Homepage" 
     class="mt-3 mb-3 border border-info rounded">
</img>

## Navigation

Kubeflow and its components have a number of user interfaces which you access from the central dashboard.

Here is a list of the main pages, grouped by component.

### Core Sections

The following sections are available in all Kubeflow deployments:

- **Home**: landing page for Kubeflow Central Dashboard
- **Manage Contributors**: manage contributors of profiles (namespaces) that you own

### Kubeflow Notebooks

The following sections are available when [Kubeflow Notebooks](/docs/components/notebooks/) is installed:

- **Notebooks**: manage Kubeflow Notebooks
- **TensorBoards**: manage TensorBoard instances
- **Volumes**: manage Kubernetes PVC Volumes

### Kubeflow Katib

The following sections are available when [Katib](/docs/components/katib/) is installed:

- **Katib Experiments**: manage Katib AutoML experiments

### KServe

The following sections are available when [KServe](/docs/external-add-ons/kserve/) is installed:

- **KServe Endpoints**: manage deployed KServe model endpoints

### Kubeflow Pipelines

When [Kubeflow Pipelines](/docs/components/pipelines/) is installed, you can select **Pipelines** from the sidebar:

<img src="/docs/images/dashboard/pipelines-runs.png" 
     alt="Kubeflow Central Dashboard - Pipelines - Runs" 
     class="mt-3 mb-3 border border-info rounded">
</img>

In the **Pipelines** section, you can access the following pages:

- **Pipelines**: manage pipeline definitions
- **Experiments**: manage pipeline experiments
- **Runs**: manage pipeline runs
- **Recurring Runs**: manage recurring pipeline runs
- **Artifacts**: track artifacts produced by pipelines stored in MLMD
- **Executions**: track executions of pipeline components stored in MLMD

## Next steps

- Learn how to [Access the Central Dashboard](/docs/components/central-dash/access/).
- Learn about [Profiles and Namespaces](/docs/components/central-dash/profiles/).


================================================
File: content/en/docs/components/central-dash/OWNERS
================================================
approvers:
  - kimwnasptd
  - thesuperzapper


================================================
File: content/en/docs/components/central-dash/profiles.md
================================================
+++
title = "Profiles and Namespaces"
description = "About Kubeflow Profiles and Namespaces for multi-user isolation"
weight = 20
+++

## What is a Kubeflow Profile?

A Kubeflow Profile is a [Kubernetes CRD](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/#customresourcedefinitions) introduced by Kubeflow that wraps a Kubernetes [Namespace](https://kubernetes.io/docs/tasks/administer-cluster/namespaces-walkthrough/).
Profiles are owned by a single user, and can have multiple contributors with view or modify access.
The owner of a profile can add and remove contributors (this can also be done by the cluster administrator).

Profiles and their child Namespaces are reconciled by the [Kubeflow Profile Controller](https://github.com/kubeflow/kubeflow/tree/master/components/profile-controller) and contributors (not owners) are managed by the [Kubeflow Access Management API (KFAM)](https://github.com/kubeflow/kubeflow/tree/master/components/access-management).

## Profiles in the Central Dashboard

Select the active profile with the drop-down found in the top bar of Kubeflow Central Dashboard.
Most Kubeflow components use the active profile to determine which resources to display, and what permissions to grant.

Users can only see profiles to which they have owner, contributor (read + write), or viewer (read) access.

<img src="/docs/images/dashboard/homepage-profile-selector.png" 
     alt="Kubeflow Central Dashboard - Profile Selector" 
     class="mt-3 mb-3 border border-info rounded">
</img>

## Automatic Profile Creation

Kubeflow supports automatic profile creation for users who log into Kubeflow for the first time.

The `CD_REGISTRATION_FLOW` environment variable on the central-dashboard Deployment controls whether automatic profile creation is enabled.
By default, automatic profile creation is disabled.
When `CD_REGISTRATION_FLOW` is `true`, if a user logs into Kubeflow, and is not already a profile owner, they will be prompted to create a profile.

{{% alert title="Warning" color="warning" %}}
Automatic profile creation may not be suitable for all use cases.
<br>
Users become owners of the automatically created profile, so can add/remove contributors.

Cluster administrators may choose to disable automatic profile creation and [manually create profiles](#create-a-profile) for users and/or teams.
Typically, in these cases, users are only given view or modify access to profiles (not made owners).
{{% /alert %}}

Here is an example of the automatic profile creation flow:

1. A new user logs into Kubeflow for the first time:

<img src="/docs/images/dashboard/auto-profile-step-1.png"
     alt="Kubeflow Central Dashboard - Automatic Profile Creation - Step 1"
     class="mt-3 mb-3 border border-info rounded"
     style="width: 100%; max-width: 30em">
</img>

2. The user can name their profile and click *Finish*: 

<img src="/docs/images/dashboard/auto-profile-step-2.png"
     alt="Kubeflow Central Dashboard - Automatic Profile Creation - Step 2"
     class="mt-3 mb-3 border border-info rounded"
     style="width: 100%; max-width: 30em">
</img>

## Profile Resources

The following resources are created for each profile:

- A Kubernetes Namespace that shares the same name as the profile.
- Kubernetes [RBAC](https://kubernetes.io/docs/reference/access-authn-authz/rbac/) for Users:
    - For profile owner, a `RoleBinding` named `namespaceAdmin` to `ClusterRole/kubeflow-admin`
    - For each contributor, a `RoleBinding` named `user-{EMAIL}-clusterrole-{ROLE}` to `ClusterRole/kubeflow-{ROLE}`
       - `{EMAIL}` is the email of the contributor, special characters replaced with `-`, cast to lowercase.
       - `{ROLE}` is the role of the contributor, either `edit` or `view`
- Kubernetes [RBAC](https://kubernetes.io/docs/reference/access-authn-authz/rbac/) for ServiceAccounts:
    - For `ServiceAcount/default-editor`, a `RoleBinding` named `default-editor` to `ClusterRole/kubeflow-edit`
    - For `ServiceAcount/default-viewer`, a `RoleBinding` named `default-viewer` to `ClusterRole/kubeflow-view`
- Istio [AuthorizationPolicies](https://istio.io/latest/docs/reference/config/security/authorization-policy/):
    - For the profile owner, an `AuthorizationPolicy` named `ns-owner-access-istio`
    - For each contributor, an `AuthorizationPolicy` named `user-{EMAIL}-clusterrole-{ROLE}`
       - `{EMAIL}` is the email of the contributor, special characters replaced with `-`, cast to lowercase
       - `{ROLE}` is the role of the contributor, either `edit` or `view`

## Manage Profiles 

Because a Profile is a Kubernetes CRD, a cluster administrator can use `kubectl` commands to manage profiles.

### Create a Profile

A cluster administrator can create a new profile with `kubectl` commands.

First, create a file named `my-profile.yaml` with the following structure:

```yaml
apiVersion: kubeflow.org/v1
kind: Profile
metadata:
  ## the profile name will be the namespace name
  ## WARNING: unexpected behavior may occur if the namespace already exists
  name: my-profile
spec:
  ## the owner of the profile
  ## NOTE: you may wish to make a global super-admin the owner of all profiles
  ##       and only give end-users view or modify access to profiles to prevent
  ##       them from adding/removing contributors
  owner:
    kind: User
    name: admin@example.com

  ## plugins extend the functionality of the profile
  ## https://github.com/kubeflow/kubeflow/tree/master/components/profile-controller#plugins
  plugins: []
  
  ## optionally create a ResourceQuota for the profile
  ## https://github.com/kubeflow/kubeflow/tree/master/components/profile-controller#resourcequotaspec
  ## https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/resource-quota-v1/#ResourceQuotaSpec
  resourceQuotaSpec: {}
```

Next, run the following command to create the profile:

```bash
kubectl apply -f my-profile.yaml
```

### List all Profiles

A cluster administrator can list existing profiles using the following command:

```bash
kubectl get profiles
```

### Describe a Profile

A cluster administrator can describe a specific profile using the following command:

```bash
kubectl describe profile MY_PROFILE_NAME
```

### Delete a Profile

A cluster administrator can delete an existing profile using the following command:

```bash
kubectl delete profile MY_PROFILE_NAME
```

{{% alert title="Warning" color="warning" %}}
Deleting a profile also deletes the corresponding Namespace from the cluster.
<br>
All resources created in the profile namespace will be deleted.
{{% /alert %}}

## Manage Profile Contributors

Profile contributors are defined by the __presence__ of [specific `RoleBinding` and `AuthorizationPolicy` resources](#profile-resources) in the profile namespace.

{{% alert title="Note" color="info" %}}
The [central dashboard method](#manage-contributors-with-central-dashboard) ONLY allows you to add contributors with "edit" access.
<br>
To add contributors with "view" access, you must use the [manual method](#manage-contributors-manually).
{{% /alert %}}

### Manage Contributors with Central Dashboard

The __owner__ of a profile can use the __Manage Contributors__ tab in the Kubeflow Central Dashboard to add or remove contributors.

<img src="/docs/images/dashboard/homepage-manage-contributors.png" 
     alt="Kubeflow Central Dashboard - Manage Contributors Link"
     class="mt-3 mb-3 border border-info rounded">
</img>

Contributors are managed with the "Contributors to your namespace" field.

<img src="/docs/images/dashboard/manage-contributors.png" 
     alt="Kubeflow Central Dashboard - Manage Contributors"
     class="mt-3 mb-3 border border-info rounded"
     style="width: 100%; max-width: 40em">
</img>

### Manage Contributors Manually

An administrator can manually add contributors to an existing profile by creating the [required `RoleBinding` and `AuthorizationPolicy` resources](#profile-resources) in the profile namespace.

#### Create Contributor RoleBinding

The `RoleBinding` which grants a user access to a profile is structured as follows:

```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: user-<SAFE_USER_EMAIL>-clusterrole-<USER_ROLE>
  namespace: <PROFILE_NAME>
  annotations:
    role: <USER_ROLE>
    user: <RAW_USER_EMAIL>
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubeflow-<USER_ROLE>
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: User
    name: <RAW_USER_EMAIL>
```

Where the following variables are replaced with the appropriate values:

- `<RAW_USER_EMAIL>` the email of the user (case-sensitive)
- `<SAFE_USER_EMAIL>` the email of the user (special characters replaced with `-`, and cast to lowercase)
- `<USER_ROLE>` the role of the user, either `edit` or `view`
- `<PROFILE_NAME>` the name of the profile

#### Create Contributor AuthorizationPolicy

The `AuthorizationPolicy` which grants a user access to a profile is structured as follows:

```yaml
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: user-<SAFE_USER_EMAIL>-clusterrole-<USER_ROLE>
  namespace: <PROFILE_NAME>
  annotations:
    role: <USER_ROLE>
    user: <RAW_USER_EMAIL>
spec:
  rules:
    - from:
        - source:
            ## for more information see the KFAM code:
            ## https://github.com/kubeflow/kubeflow/blob/v1.8.0/components/access-management/kfam/bindings.go#L79-L110
            principals:
              ## required for kubeflow notebooks
              ## TEMPLATE: "cluster.local/ns/<ISTIO_GATEWAY_NAMESPACE>/sa/<ISTIO_GATEWAY_SERVICE_ACCOUNT>"
              - "cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"

              ## required for kubeflow pipelines
              ## TEMPLATE: "cluster.local/ns/<KUBEFLOW_NAMESPACE>/sa/<KFP_UI_SERVICE_ACCOUNT>"
              - "cluster.local/ns/kubeflow/sa/ml-pipeline-ui"
      when:
        - key: request.headers[kubeflow-userid]
          values:
            - <RAW_USER_EMAIL>
```

Where the following variables are replaced with the appropriate values:

- `<RAW_USER_EMAIL>` the email of the user (case-sensitive)
- `<SAFE_USER_EMAIL>` the email of the user (special characters replaced with `-`, and cast to lowercase)
- `<USER_ROLE>` the role of the user, either `edit` or `view`
- `<PROFILE_NAME>` the name of the profile
- `<KUBEFLOW_NAMESPACE>` the namespace where Kubeflow is installed
- `<KFP_UI_SERVICE_ACCOUNT>` the name of the ServiceAccount used by `ml-pipeline-ui` Pod
- `<ISTIO_GATEWAY_NAMESPACE>` the namespace containing the Istio Gateway Deployment
- `<ISTIO_GATEWAY_SERVICE_ACCOUNT>` the name of the ServiceAccount used by the Istio Gateway Pods


================================================
File: content/en/docs/components/katib/_index.md
================================================
+++
title = "Katib"
description = "Documentation for Kubeflow Katib"
weight = 70
+++



================================================
File: content/en/docs/components/katib/getting-started.md
================================================
+++
title = "Getting Started"
description = "Get started with Katib"
weight = 30

mathjax = true
+++

This guide describes how to get started with Katib and run a few examples.

## Prerequisites

You need to install the following Katib components to run examples:

- Katib control plane [installed](/docs/components/katib/installation/#installing-control-plane).
- Katib Python SDK [installed](/docs/components/katib/installation/#installing-python-sdk).

## Getting Started with Katib Python SDK

You can run your first hyperparameter tuning Katib Experiment using Python SDK.

In the following example we are going to maximize a simple objective function:

<p>
$$
F(a,b) = 4a - b^2
$$
</p>

The bigger \(a\) and the lesser \(b\) value, the bigger the function value \(F\).

If you install Katib standalone, make sure that you
[configure local `kubeconfig`](https://kubernetes.io/docs/tasks/access-application-cluster/access-cluster/#programmatic-access-to-the-api)
to access your Kubernetes cluster where you installed Katib control plane.

If you install Katib as part of Kubeflow Platform, you can open a new
[Kubeflow Notebook](/docs/components/notebooks/quickstart-guide/) to run this script.

**Note**. If you use Katib within Kubeflow Platform to run this example, you need to use this
namespace: `KatibClient(namespace="kubeflow-user-example-com")`.

**Note**. The `kubeflow` namespace is pre-configured with the required label 
`katib.kubeflow.org/metrics-collector-injection: enabled` for metrics collection. If you want to use pull-based metrics collector 
in other namespaces, you can attach this label following the instructions in the 
[Metrics Collector](/docs/components/katib/user-guides/metrics-collector/#prerequisites).

```python
# [1] Create an objective function.
def objective(parameters):
    # Import required packages.
    import time
    time.sleep(5)
    # Calculate objective function.
    result = 4 * int(parameters["a"]) - float(parameters["b"]) ** 2
    # Katib parses metrics in this format: <metric-name>=<metric-value>.
    print(f"result={result}")

import kubeflow.katib as katib

# [2] Create hyperparameter search space.
parameters = {
    "a": katib.search.int(min=10, max=20),
    "b": katib.search.double(min=0.1, max=0.2)
}

# [3] Create Katib Experiment with 12 Trials and 2 CPUs per Trial.
katib_client = katib.KatibClient(namespace="kubeflow")

name = "tune-experiment"
katib_client.tune(
    name=name,
    objective=objective,
    parameters=parameters,
    objective_metric_name="result",
    max_trial_count=12,
    resources_per_trial={"cpu": "2"},
)

# [4] Wait until Katib Experiment is complete
katib_client.wait_for_experiment_condition(name=name)

# [5] Get the best hyperparameters.
print(katib_client.get_optimal_hyperparameters(name))
```

You should get similar output for the most optimal Trial, hyperparameters, and observation metrics:

```json
{
  "best_trial_name": "tune-experiment-nmggpxx2",
  "parameter_assignments": [
    {
      "name": "a",
      "value": "19"
    },
    {
      "name": "b",
      "value": "0.13546396192975868"
    }
  ],
  "observation": {
    "metrics": [
      {
        "latest": "75.98164951501829",
        "max": "75.98164951501829",
        "min": "75.98164951501829",
        "name": "result"
      }
    ]
  }
}
```

In [the Katib UI](/docs/components/katib/user-guides/katib-ui/) you should see list of all
completed Trials with results:

<img src="/docs/components/katib/images/getting-started-example.png"
  alt="Getting Started Example"
  class="mt-3 mb-3">

## Next steps

- Check [the Katib UI guide](/docs/components/katib/user-guides/katib-ui/) to get more information
  about your Katib Experiments.

- Run Katib hyperparameter tuning [Experiment using YAML](/docs/components/katib/user-guides/hp-tuning/configure-experiment/#running-the-experiment).

- Learn how to configure [Katib Experiment parameters](/docs/components/katib/user-guides/hp-tuning/configure-experiment).

- Check more [Katib Examples](https://github.com/kubeflow/katib/tree/ea46a7f2b73b2d316b6b7619f99eb440ede1909b/examples/v1beta1).



================================================
File: content/en/docs/components/katib/installation.md
================================================
+++
title = "Installation"
description = "How to install Katib"
weight = 20
+++

This guide describes how to install Katib on your Kubernetes cluster.

## Prerequisites

These are minimal requirements to install Katib.

- Kubernetes >= 1.27
- `kubectl` >= 1.27
- Python >= 3.7

## Installing Katib

You need to install Katib control plane and Python SDK to create Katib Experiments.

### Installing Control Plane

You can skip these steps if you have already
[installed Kubeflow platform](/docs/started/installing-kubeflow/)
using manifests or package distributions. Kubeflow platform includes Katib.

You can install Katib as a standalone component.

Run the following command to install the stable release of Katib control plane: `v0.17.0`

```shell
kubectl apply -k "github.com/kubeflow/katib.git/manifests/v1beta1/installs/katib-standalone?ref=v0.17.0"
```

Run the following command to install the latest changes of Katib control plane:

```shell
kubectl apply -k "github.com/kubeflow/katib.git/manifests/v1beta1/installs/katib-standalone?ref=master"
```

After installing it, you can verify that all
[Katib control plane components](/docs/components/katib/reference/architecture/#katib-control-plane-components)
are running:

```shell
$ kubectl get pods -n kubeflow

NAME                                READY   STATUS      RESTARTS   AGE
katib-controller-566595bdd8-8w7sx   1/1     Running     0          82s
katib-db-manager-57cd769cdb-vt7zs   1/1     Running     0          82s
katib-mysql-7894994f88-djp7m        1/1     Running     0          81s
katib-ui-5767cfccdc-v9fcs           1/1     Running     0          80s
```

**Note**. Your Kubernetes cluster must have `StorageClass` for dynamic volume provisioning for Katib DB.
For more information, check the Kubernetes documentation on
[dynamic provisioning](https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/).
If your cluster doesn't have dynamic volume provisioning, you must manually deploy
[PersistentVolume (PV)](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistent-volumes)
to bind [PVC](https://github.com/kubeflow/katib/blob/master/manifests/v1beta1/components/mysql/pvc.yaml)
for the Katib DB component.

### Installing Python SDK

Katib [implements Python SDK](https://pypi.org/project/kubeflow-katib/)
to simplify creation of Katib Experiments for Data Scientists.

Run the following command to install the latest stable release of Katib SDK:

```shell
pip install -U kubeflow-katib
```

Run the following command to install the latest changes of Katib SDK:

```shell
pip install git+https://github.com/kubeflow/katib.git@master#subdirectory=sdk/python/v1beta1
```

Otherwise, you can also install the Katib SDK using the specific GitHub commit, for example:

```shell
pip install git+https://github.com/kubeflow/katib.git@ea46a7f2b73b2d316b6b7619f99eb440ede1909b#subdirectory=sdk/python/v1beta1
```

## Next steps

- Run your first Katib Experiment by following the [Getting Started guide](/docs/components/katib/getting-started/).

- Learn about various options to [install Katib control plane components](/docs/components/katib/user-guides/installation-options/).



================================================
File: content/en/docs/components/katib/overview.md
================================================
+++
title = "Overview"
description = "An overview for Katib"
weight = 10
+++

{{% beta-status
  feedbacklink="https://github.com/kubeflow/katib/issues" %}}

## What is Katib ?

Katib is a Kubernetes-native project for automated machine learning (AutoML).
Katib supports hyperparameter tuning, early stopping and
neural architecture search (NAS).
Learn more about AutoML at [fast.ai](https://www.fast.ai/2018/07/16/auto-ml2/),
[Google Cloud](https://cloud.google.com/automl),
[Microsoft Azure](https://docs.microsoft.com/en-us/azure/machine-learning/concept-automated-ml#automl-in-azure-machine-learning) or
[Amazon SageMaker](https://aws.amazon.com/blogs/aws/amazon-sagemaker-autopilot-fully-managed-automatic-machine-learning/).

Katib is the project which is agnostic to machine learning (ML) frameworks.
It can tune hyperparameters of applications written in any language
of the users' choice and natively supports many ML frameworks,
such as TensorFlow, MXNet, PyTorch, XGBoost, and others.

Katib supports a lot of various AutoML algorithms, such as
[Bayesian optimization](https://arxiv.org/pdf/1012.2599.pdf),
[Tree of Parzen Estimators](https://papers.nips.cc/paper/2011/file/86e8f7ab32cfd12577bc2619bc635690-Paper.pdf),
[Random Search](https://en.wikipedia.org/wiki/Hyperparameter_optimization#Random_search),
[Covariance Matrix Adaptation Evolution Strategy](https://en.wikipedia.org/wiki/CMA-ES),
[Hyperband](https://arxiv.org/pdf/1603.06560.pdf),
[Efficient Neural Architecture Search](https://arxiv.org/abs/1802.03268),
[Differentiable Architecture Search](https://arxiv.org/abs/1806.09055)
and many more. Additional algorithm support is coming soon.

The [Katib project](https://github.com/kubeflow/katib) is open source.
The [developer guide](https://github.com/kubeflow/katib/blob/master/docs/developer-guide.md)
is a good starting point for developers who want to contribute to the project.

<img src="/docs/components/katib/images/katib-overview.drawio.png"
  alt="Katib Overview"
  class="mt-3 mb-3">

## Why Katib ?

Katib addresses AutoML step for hyperparameter optimization or Neural Architecture Search
in AI/ML lifecycle as shown on that diagram:

<img src="/docs/components/katib/images/ml-lifecycle-katib.drawio.svg"
  alt="AI/ML Lifecycle Katib"
  class="mt-3 mb-3">

- **Katib can orchestrate multi-node & multi-GPU [distributed training workloads](/docs/components/katib/user-guides/trial-template)**.

Katib is integrated with Kubeflow Training Operator jobs such as PyTorchJob, which allows to
optimize hyperparameters for large models of any size.

In addition to that, Katib can orchestrate workflows such as Argo Workflows and Tekton Pipelines
for more advanced optimization use-cases.

- **Katib is extensible and portable.**

Katib runs Kubernetes containers to [perform hyperparameter tuning job](/docs/components/katib/reference/architecture),
which allows to use Katib with any ML training framework.

Users can even use Katib to optimize non-ML tasks as long as optimization metrics can be collected.

- **Katib has rich support of optimization algorithms.**

Katib is integrated with many optimization frameworks such as [Hyperopt](https://hyperopt.github.io/hyperopt/) and
[Optuna](https://optuna.org/) which implements most of the state of the art optimization algorithms.

Users can leverage Katib control plane to implement and benchmark [their own optimization algorithms](/docs/components/katib/user-guides/hp-tuning/configure-algorithm/#use-custom-algorithm-in-katib)

## Next steps

- Follow [the installation guide](/docs/components/katib/installation/) to deploy Katib.

- Run examples from [getting started guide](/docs/components/katib/getting-started/).



================================================
File: content/en/docs/components/katib/OWNERS
================================================
approvers:
  - andreyvelich
  - gaocegege
  - johnugeorge
  - sperlingxx




================================================
File: content/en/docs/components/katib/reference/_index.md
================================================
+++
title = "Reference"
description = "Reference docs for Katib"
weight = 50
+++



================================================
File: content/en/docs/components/katib/reference/architecture.md
================================================
+++
title = "Katib Architecture"
description = "How does Katib work?"
weight = 10
+++

This page describes Katib concepts and architectures.

## Hyperparameter Tuning

_Hyperparameters_ are the variables that control the model training process. They include:

- The learning rate.
- The number of layers in a neural network.
- The number of training epochs.

Hyperparameter values are not _learned_. In other words, in contrast to the
model weights and biases the model training process does not adjust the hyperparameter values.

_Hyperparameter tuning_ is the process of optimizing the hyperparameter values to maximize the
predictive accuracy of the model. If you don't use Katib or a similar system for hyperparameter
tuning, you need to run many training jobs yourself, manually adjusting the hyperparameters
to find the optimal values.

You can improve your hyperparameter tuning Experiments by using
[early stopping](https://en.wikipedia.org/wiki/Early_stopping) techniques.
Follow the [early stopping guide](/docs/components/katib/user-guides/early-stopping/) for the details.

## Katib Architecture for Hyperparameter Tuning

This diagram shows how Katib performs Hyperparameter tuning:

<img src="/docs/components/katib/images/katib-architecture.drawio.svg"
  alt="Katib Overview"
  class="mt-3 mb-3">

First of all, users need to write ML training code which will be evaluated on every Katib Trial
with different hyperparameters. Then, using Katib Python SDK users should set the objective, search
space, search algorithm, Trial resources, and create the Katib Experiment.

Katib implements the following
[Kubernetes Custom Resource Definitions (CRDs)](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/)
to tune Hyperparameters.

### Experiment

An _Experiment_ is a single tuning run, also called an optimization run.

You specify configuration settings to define the Experiment. The following are the main configurations:

- **Objective**: What you want to optimize. This is the objective metric, also called the target
  variable. A common metric is the model's accuracy in the validation pass of the training job
  (e.g. validation accuracy). You also specify whether you want the hyperparameter tuning job
  to _maximize_ or _minimize_ the metric.

- **Search space**: The set of all possible hyperparameter values that the hyperparameter tuning job
  should consider for optimization, and the constraints for each hyperparameter. Other names for
  search space include _feasible set_ and _solution space_. For example, you may provide the
  names of the hyperparameters that you want to optimize. For each hyperparameter, you may
  provide a _minimum_ and _maximum_ value or a _list_ of allowable values.

- **Search algorithm**: The algorithm to use when searching for the optimal hyperparameter values.
  For example, Bayesian Optimization or Random Search.

For details of how to define your Experiment, follow [this guide](/docs/components/katib/user-guides/hp-tuning/configure-experiment/)

### Suggestion

A _Suggestion_ is a set of hyperparameter values that the hyperparameter tuning process has proposed.
Katib creates a Trial to evaluate the suggested set of values.

### Trial

A _Trial_ is one iteration of the hyperparameter tuning process. A Trial corresponds to one
worker job instance with a list of parameter assignments. The list of parameter assignments
corresponds to a Suggestion.

Each Experiment runs several Trials. The Experiment runs the Trials until it
reaches either the objective or the configured maximum number of Trials.

### Worker

The _Worker_ is the process that runs to evaluate a Trial and calculate its objective value.

The Worker can be any type of Kubernetes resource or
[Kubernetes CRD](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/).
Follow the [Trial template guide](/docs/components/katib/user-guides/trial-template/)
to check how to support your own Kubernetes resource in Katib.

## Neural Architecture Search

{{% alert title="Alpha version" color="warning" %}}
NAS is currently in <b>alpha</b> with limited support. The Kubeflow team is
interested in any feedback you may have, in particular with regards to usability
of the feature. You can log issues and comments in
the [Katib issue tracker](https://github.com/kubeflow/katib/issues).
{{% /alert %}}

In addition to hyperparameter tuning, Katib offers a _neural architecture
search_ feature. You can use the NAS to design your artificial neural network, with a goal of
maximizing the predictive accuracy and performance of your model.

NAS is closely related to hyperparameter tuning. Both are subsets of AutoML. While hyperparameter
tuning optimizes the model's hyperparameters, a NAS system optimizes the model's structure,
node weights and hyperparameters.

NAS technology in general uses various techniques to find the optimal neural network design.

Learn more about various NAS algorithms in
[Differentiable Architecture Search](/docs/components/katib/reference/nas-algorithms/#differentiable-architecture-search-darts)
and [Efficient Neural Architecture Search](/docs/components/katib/reference/nas-algorithms/#efficient-neural-architecture-search-enas)
guides.

## Katib Control Plane Components

Katib has the following components on the control plane to run Experiments:

- `katib-controller` - the controller to manage Katib Kubernetes CRDs:
  [`Experiment`](#experiment),
  [`Suggestion`](#suggestion),
  [`Trial`](#trial).

  - (Optional) If certificate generator is enabled in
    [Katib Config](/docs/components/katib/user-guides/katib-config/), Katib controller deployment will create
    self-signed certificate for the Katib webhooks. Learn more about the cert generator in the
    [developer guide](https://github.com/kubeflow/katib/blob/master/docs/developer-guide.md#katib-cert-generator).

- `katib-ui` - the Katib user interface.

- `katib-db-manager` - the gRPC API server to control Katib DB interface.

- `katib-mysql` - the MySQL DB backend to store Katib Experiments metrics.



================================================
File: content/en/docs/components/katib/reference/experiment-cr.md
================================================
+++
title = "Katib Experiment Lifecycle"
description = "What happens after an Experiment is created"
weight = 10
+++

## Katib Experiment Lifecycle

When user creates an Experiment, Katib Experiment controller,
Suggestion controller and Trial controller is working together to achieve
hyperparameters tuning for user's Machine learning model. The Experiment
workflow looks as follows:

<img src="/docs/components/katib/images/katib-workflow.png" alt="Katib Workflow" class="mt-3 mb-3">

1. The Experiment is submitted to the Kubernetes API server. Katib
   Experiment mutating and validating webhook is called to set the default
   values for the Experiment and validate the CR separately.

1. The Experiment controller creates the Suggestion.

1. The Suggestion controller creates the algorithm deployment and service
   based on the new Suggestion.

1. When the Suggestion controller verifies that the algorithm service is
   ready, it calls the service to generate
   `spec.request - len(status.suggestions)` sets of hyperparameters and append
   them into `status.suggestions`.

1. The Experiment controller finds that Suggestion had been updated and
   generates each Trial for the each new hyperparameters set.

1. The Trial controller generates `Worker Job` based on the `runSpec`
   from the Trial with the new hyperparameters set.

1. The related job controller
   (Kubernetes batch Job, Kubeflow TFJob, Tekton Pipeline, etc.) generates
   Kubernetes Pods.

1. Katib Pod mutating webhook is called to inject the metrics collector sidecar
   container to the candidate Pods.

1. During the ML model container runs, the metrics collector container
   collects metrics from the injected pod and persists metrics to the Katib
   DB backend.

1. When the ML model training ends, the Trial controller updates status
   of the corresponding Trial.

1. When the Trial goes to end, the Experiment controller increases
   `request` field of the corresponding Suggestion if it is needed,
   then everything goes to `step 4` again.
   Of course, if the Trial meet one of `end` condition
   (exceeds `maxTrialCount`, `maxFailedTrialCount` or `goal`),
   the Experiment controller takes everything done.


================================================
File: content/en/docs/components/katib/reference/nas-algorithms.md
================================================
+++
title = "Neural Architecture Search Algorithms"
description = "Overview for the Neural Architecture Search algorithms in Katib"
weight = 20
+++

This page describes how Neural Architecture Search (NAS) algorithms work in Katib.

## Efficient Neural Architecture Search (ENAS)

The algorithm follows the idea proposed in _Efficient Neural Architecture Search via Parameter Sharing_
by Hieu Pham, Melody Y. Guan, Barret Zoph, Quoc V. Le and Jeff Dean (https://arxiv.org/abs/1802.03268)
and _Neural Architecture Search with Reinforcement Learning_ by Barret Zoph and
Quoc V. Le (https://arxiv.org/abs/1611.01578) .

The implementation is based on
[the GitHub of _Efﬁcient Neural Architecture Search via Parameter Sharing_](https://github.com/melodyguan/enas)
and
[Google Implementation for ENAS](https://github.com/google-research/google-research/tree/master/enas_lm).
It uses a recurrent neural network with LSTM cells as controller to generate neural architecture candidates.
And this controller network is updated by policy gradients. However, it currently does not support parameter sharing.

### Katib Implementation

Katib represents neural network in the specific format. If number of layers (n) = 12 and number
of possible operations (m) = 6, the definition of an architecture will be like:

```
[2]
[0 0]
[1 1 0]
[5 1 0 1]
[1 1 1 0 1]
[5 0 0 1 0 1]
[1 1 1 0 0 1 0]
[2 0 0 0 1 1 0 1]
[0 0 0 1 1 1 1 1 0]
[2 0 1 0 1 1 1 0 0 0]
[3 1 1 1 1 1 1 0 0 1 1]
[0 1 1 1 1 0 0 1 1 1 1 0]
```

There are n rows, the i<sup>th</sup> row has i elements and describes the i<sup>th</sup>
layer. Please notice that layer 0 is the input and is not included in this definition.

In each row, the first integer ranges from 0 to m-1 and indicates the operation in this layer.
Starting from the second position, the k<sup>th</sup> integer is a boolean value that indicates
whether (k-2)<sup>th</sup> layer has a skip connection with this layer.
(There will always be a connection from (k-1)<sup>th</sup> layer to k<sup>th</sup> layer)

#### Output of `GetSuggestion()`

The output of `GetSuggestion()` from the algorithm service consists of two parts:
`architecture` and `nn_config`.

`architecture` is a json string of the definition of a neural architecture. The format is as stated
above. One example is:

```
[[27], [29, 0], [22, 1, 0], [13, 0, 0, 0], [26, 1, 1, 0, 0], [30, 1, 0, 1, 0, 0], [11, 0, 1, 1, 0, 1, 1], [9, 1, 0, 0, 1, 0, 0, 0]]
```

`nn_config` is a json string of the detailed description of what is the num of layers,
input size, output size and what each operation index stands for. A `nn_config` corresponding to
the architecture above can be:

```
{
    "num_layers": 8,
    "input_sizes": [32, 32, 3],
    "output_sizes": [10],
    "embedding": {
        "27": {
            "opt_id": 27,
            "opt_type": "convolution",
            "opt_params": {
                "filter_size": "7",
                "num_filter": "96",
                "stride": "2"
            }
        },
        "29": {
            "opt_id": 29,
            "opt_type": "convolution",
            "opt_params": {
                "filter_size": "7",
                "num_filter": "128",
                "stride": "2"
            }
        },
        "22": {
            "opt_id": 22,
            "opt_type": "convolution",
            "opt_params": {
                "filter_size": "7",
                "num_filter": "48",
                "stride": "1"
            }
        },
        "13": {
            "opt_id": 13,
            "opt_type": "convolution",
            "opt_params": {
                "filter_size": "5",
                "num_filter": "48",
                "stride": "2"
            }
        },
        "26": {
            "opt_id": 26,
            "opt_type": "convolution",
            "opt_params": {
                "filter_size": "7",
                "num_filter": "96",
                "stride": "1"
            }
        },
        "30": {
            "opt_id": 30,
            "opt_type": "reduction",
            "opt_params": {
                "reduction_type": "max_pooling",
                "pool_size": 2
            }
        },
        "11": {
            "opt_id": 11,
            "opt_type": "convolution",
            "opt_params": {
                "filter_size": "5",
                "num_filter": "32",
                "stride": "2"
            }
        },
        "9": {
            "opt_id": 9,
            "opt_type": "convolution",
            "opt_params": {
                "filter_size": "3",
                "num_filter": "128",
                "stride": "2"
            }
        }
    }
}
```

This neural architecture can be visualized as:

<img src="/docs/components/katib/images/nas-example.png"
  alt="Example of NAS network"
  class="mt-3 mb-3">

The following items can be implemented in Katib to better support ENAS:

1. Add 'micro' mode, which means searching for a neural cell instead of the whole neural network.
1. Add support for recurrent neural networks and build a training container for the Penn Treebank task.
1. Add parameter sharing, if possible.
1. Change LSTM cell from self defined functions in LSTM.py to `tf.nn.rnn_cell.LSTMCell`
1. Store the Suggestion checkpoint to PVC to protect against unexpected enas service pod restarts
1. Add `RequestCount` into API so that the Suggestion can clean the information of completed studies.

## Differentiable Architecture Search (DARTS)

The algorithm follows the idea proposed in _DARTS: Differentiable Architecture Search_ by Hanxiao Liu,
Karen Simonyan, Yiming Yang: https://arxiv.org/abs/1806.09055.
The implementation is based on [official github implementation](https://github.com/quark0/darts) and
[popular repository](https://github.com/khanrc/pt.darts).

The algorithm addresses the scalability challenge of architecture search by formulating the task in
a differentiable manner. It is based on continuous relaxation and gradient descent in the search space.
It is able to efficiently design high-performance convolutional architectures for image classification
(on CIFAR-10 and ImageNet) and recurrent architectures for language modeling (on Penn Treebank and WikiText-2).

### Katib Implementation

To support DARTS in current Katib functionality the implementation follows this way:

1. [DARTS Suggestion service](https://github.com/kubeflow/katib/blob/ea46a7f2b73b2d316b6b7619f99eb440ede1909b/pkg/suggestion/v1beta1/nas/darts/service.py)
   creates set of primitive operations from the Experiment search space.
   For example:

   ```
   ['separable_convolution_3x3', 'dilated_convolution_3x3', 'dilated_convolution_5x5', 'avg_pooling_3x3', 'max_pooling_3x3', 'skip_connection']
   ```

1. Suggestion returns algorithm settings, number of layers and set of primitives to Katib Controller

1. Katib controller starts
   [DARTS training container](https://github.com/kubeflow/katib/tree/ea46a7f2b73b2d316b6b7619f99eb440ede1909b/examples/v1beta1/trial-images/darts-cnn-cifar10)
   with the appropriate settings and all possible operations.

1. Training container runs DARTS algorithm.

1. Metrics collector saves Best Genotype from the training container log.

#### Best Genotype representation

Best Genotype is the best cell for each neural network layer. Cells are generated by DARTS algorithm.
Here is an example of the Best Genotype:

```
Genotype(
  normal=[
      [('max_pooling_3x3',0),('max_pooling_3x3',1)],
      [('max_pooling_3x3',0),('max_pooling_3x3',1)],
      [('max_pooling_3x3',0),('dilated_convolution_3x3',3)],
      [('max_pooling_3x3',0),('max_pooling_3x3',1)]
    ],
    normal_concat=range(2,6),
  reduce=[
      [('dilated_convolution_5x5',1),('separable_convolution_3x3',0)],
      [('max_pooling_3x3',2),('dilated_convolution_5x5',1)],
      [('dilated_convolution_5x5',3),('dilated_convolution_5x5',2)],
      [('dilated_convolution_5x5',3),('dilated_convolution_5x5',4)]
    ],
    reduce_concat=range(2,6)
)
```

In this example you can see 4 DARTS nodes with indexes: 2,3,4,5.

`reduce` parameter is the cells which located at the 1/3 and 2/3 of the total neural network layers.
They represent reduction cells in which all the operations adjacent to the input nodes are of stride two.

`normal` parameter is the cells which is located at the rest neural network layers.
They represent normal cell.

In CNN all reduce and normal intermediate nodes are concatenated and each node has 2 edges.

Each element in `normal` array is the node which has 2 edges. First element is the operation on
the edge and second element is the node index connection. Note that index 0 is the `C_{k-2}` node
and index 1 is the `C_{k-1}` node.

For example `[('max_pooling_3x3',0),('max_pooling_3x3',1)]` means that `C_{k-2}` node connects to
the first node with `max_pooling_3x3` operation (Max Pooling with filter size 3) and `C_{k-1}`
node connects to the first node with `max_pooling_3x3` operation.

`reduce` array follows the same way as `normal` array.

`normal_concat` and `reduce_concat` means concatenation between intermediate nodes.

Currently, it supports running only on single GPU and second-order approximation, which produced
better results than first-order.

The following items can be implemented in DARTS:

- Support multi GPU training. Add functionality to select GPU for training.

- Support DARTS in Katib UI.

- Think about better representation of Best Genotype.

- Add more dataset for CNN. Currently, it supports only CIFAR-10.

- Support RNN in addition to CNN.

- Support micro mode, which means searching for a particular neural network cell.



================================================
File: content/en/docs/components/katib/user-guides/_index.md
================================================
+++
title = "User Guides"
description = "User guides for Katib"
weight = 40
+++



================================================
File: content/en/docs/components/katib/user-guides/early-stopping.md
================================================
+++
title = "How to Configure Early Stopping"
description = "Early Stopping overview for Katib Experiments"
weight = 50
+++

This guide shows how you can use [early stopping](https://en.wikipedia.org/wiki/Early_stopping)
to optimize cost for your Katib Experiments. Early stopping allows you to avoid overfitting when you
train your model during Katib Experiments. It also helps by saving computing resources and reducing
Experiment execution time by stopping the Experiment's Trials when the target metric(s) no
longer improves before the training process is complete.

The major advantage of using early stopping in Katib is that you don't
need to modify your
[training container package](/docs/components/katib/user-guides/hp-tuning/configure-experiment/#create-image-for-training-code).
All you have to do is make necessary changes to your Experiment's YAML file.

Early stopping works in the same way as Katib's
[metrics collector](/docs/components/katib/user-guides/metrics-collector). It analyses required
metrics from the `StdOut` or from the arbitrary output file and an early stopping algorithm makes
the decision if the Trial needs to be stopped. Currently, early stopping works only with
`StdOut` or `File` metrics collectors.

**Note**: Your training container must print training logs with the timestamp,
because early stopping algorithms need to know the sequence of reported metrics.
Check the
[`PyTorch` example](https://github.com/kubeflow/katib/blob/399340418a84b96804a9f304cea841b6497796f4/examples/v1beta1/trial-images/pytorch-mnist/mnist.py#L139-L142)
to learn how to add a date format to your logs.

## Configure the Experiment with early stopping

As a reference, you can use the YAML file of the
[early stopping example](https://github.com/kubeflow/katib/blob/fc858d15dd41ff69166a2020efa200199063f9ba/examples/v1beta1/early-stopping/median-stop.yaml).

1. Follow the
   [guide](/docs/components/katib/user-guides/hp-tuning/configure-experiment/#configuring-the-experiment)
   to configure your Katib Experiment.

2. Next, to apply early stopping for your Experiment, specify the `.spec.earlyStopping`
   parameter, similar to the `.spec.algorithm`.

   - `.earlyStopping.algorithmName` - the name of the early stopping algorithm.

   - `.earlyStopping.algorithmSettings`- the settings for the early stopping algorithm.

What happens is your Experiment's Suggestion produces new Trials. After that, the early stopping
algorithm generates early stopping rules for the created Trials. Once the Trial reaches all the rules,
it is stopped and the Trial status is changed to the `EarlyStopped`. Then, Katib calls the Suggestion again to
ask for the new Trials.

## Early Stopping Algorithms

Katib currently supports several algorithms for early stopping:

- [Median Stopping Rule](#median-stopping-rule)

More algorithms are under development.

### Median Stopping Rule

The early stopping algorithm name in Katib is `medianstop`.

The median stopping rule stops a pending Trial `X` at step `S` if the Trial's best objective value
by step `S` is worse than the median value of the running averages of all completed Trials objectives
reported up to step `S`.

To learn more about it, check
[Google Vizier: A Service for Black-Box Optimization](https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/46180.pdf).

Katib supports the following early stopping settings:

<div class="table-responsive">
  <table class="table table-bordered">
    <thead class="thead-light">
      <tr>
        <th>Setting Name</th>
        <th>Description</th>
        <th>Default Value</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>min_trials_required</td>
        <td>Minimal number of successful Trials to compute median value</td>
        <td>3</td>
      </tr>
      <tr>
        <td>start_step</td>
        <td>Number of reported intermediate results before stopping the Trial</td>
        <td>4</td>
      </tr>
    </tbody>
  </table>
</div>

## Next steps

- How to use Katib Experiment Trial templates(/docs/components/katib/user-guides/trial-template).

- How to [restart your Experiment and use the resume policies](/docs/components/katib/user-guides/resume-experiment/).



================================================
File: content/en/docs/components/katib/user-guides/env-variables.md
================================================
+++
title = "How to configure env variables"
description = "List of environment variables accepted by Katib components"
weight = 80
+++

This guide describes environment variables for each Katib component. If you want to change your
Katib installation, you can modify some of these variables.

In the tables below you can find descriptions, default values and mandatory properties for all
environment variables in each Katib component. If a variable has a mandatory property, you need to
set the relevant environment variable in an appropriate Katib component's manifest.

## Katib Controller

Bellow are the environment variables for the
[Katib Controller](https://github.com/kubeflow/katib/blob/master/manifests/v1beta1/components/controller/controller.yaml)
deployment:

<div class="table-responsive">
  <table class="table table-bordered">
    <thead class="thead-light">
      <tr>
        <th>Variable</th>
        <th>Description</th>
        <th>Default Value</th>
        <th>Mandatory</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>KATIB_CORE_NAMESPACE</code></td>
        <td>Base Namespace for all Katib components and default Experiment</td>
        <td><code>metadata.namespace</code></td>
        <td>Yes</td>
      </tr>
      <tr>
        <td><code>KATIB_SUGGESTION_COMPOSER</code></td>
        <td> <a href="https://github.com/kubeflow/katib/blob/master/pkg/controller.v1beta1/suggestion/composer/composer.go">Composer</a>
          for the Katib Suggestions. You can use your own Composer</td>
        <td>general</td>
        <td>No</td>
      </tr>
      <tr>
        <td><code>KATIB_DB_MANAGER_SERVICE_NAMESPACE</code></td>
        <td>Katib DB Manager Namespace</td>
        <td><code>KATIB_CORE_NAMESPACE</code> env variable</td>
        <td>No</td>
      </tr>
      <tr>
        <td><code>KATIB_DB_MANAGER_SERVICE_IP</code></td>
        <td>Katib DB Manager IP</td>
        <td>katib-db-manager</td>
        <td>No</td>
      </tr>
       <tr>
        <td><code>KATIB_DB_MANAGER_SERVICE_PORT</code></td>
        <td>Katib DB Manager Port</td>
        <td>6789</td>
        <td>No</td>
      </tr>
    </tbody>
  </table>
</div>

Katib Controller calls Katib DB Manager with this address expression:

**`KATIB_DB_MANAGER_SERVICE_IP.KATIB_DB_MANAGER_SERVICE_NAMESPACE:KATIB_DB_MANAGER_SERVICE_PORT`**

If you set `KATIB_DB_MANAGER_SERVICE_NAMESPACE=""`, Katib Controller calls Katib DB Manager with this address:

**`KATIB_DB_MANAGER_SERVICE_IP:KATIB_DB_MANAGER_SERVICE_PORT`**

If you want to use your own DB Manager to report Katib metrics, you can change `KATIB_DB_MANAGER_SERVICE_NAMESPACE`, `KATIB_DB_MANAGER_SERVICE_IP` and `KATIB_DB_MANAGER_SERVICE_PORT` variables.

## Katib UI

Below are the environment variables for the
[Katib UI](https://github.com/kubeflow/katib/blob/master/manifests/v1beta1/components/ui/ui.yaml)
deployment:

<div class="table-responsive">
  <table class="table table-bordered">
    <thead class="thead-light">
      <tr>
        <th>Variable</th>
        <th>Description</th>
        <th>Default Value</th>
        <th>Mandatory</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>KATIB_CORE_NAMESPACE</code></td>
        <td>Base Namespace for all Katib components and default Experiment</td>
        <td><code>metadata.namespace</code></td>
        <td>Yes</td>
      </tr>
      <tr>
        <td><code>KATIB_DB_MANAGER_SERVICE_NAMESPACE</code></td>
        <td>Katib DB Manager Namespace</td>
        <td><code>KATIB_CORE_NAMESPACE</code> env variable</td>
        <td>No</td>
      </tr>
      <tr>
        <td><code>KATIB_DB_MANAGER_SERVICE_IP</code></td>
        <td>Katib DB Manager IP</td>
        <td>katib-db-manager</td>
        <td>No</td>
      </tr>
       <tr>
        <td><code>KATIB_DB_MANAGER_SERVICE_PORT</code></td>
        <td>Katib DB Manager Port</td>
        <td>6789</td>
        <td>No</td>
      </tr>
    </tbody>
  </table>
</div>

Katib UI calls Katib DB Manager with the same address expression as Katib Controller.

## Katib DB Manager

Bellow are the environment variables for the
[Katib DB Manager](https://github.com/kubeflow/katib/blob/master/manifests/v1beta1/components/db-manager/db-manager.yaml)
deployment:

<div class="table-responsive">
  <table class="table table-bordered">
    <thead class="thead-light">
      <tr>
        <th>Variable</th>
        <th>Description</th>
        <th>Default Value</th>
        <th>Mandatory</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>DB_NAME</code></td>
        <td>Katib DB Name: 'mysql' or 'postgres'</td>
        <td>  </td> 
        <td>Yes</td>
      </tr>
      <tr>
        <td><code>DB_PASSWORD</code></td>
        <td>Katib DB Password</td>
        <td>test (MySQL)<br>katib (Postgres)</td>
        <td>Yes</td>
      </tr>
      <tr>
        <td><code>DB_USER</code></td>
        <td>Katib DB User</td>
        <td>root (MySQL)<br>katib (Postgres)</td>
        <td>No</td>
      </tr>
      <tr>
        <td><code>KATIB_MYSQL_DB_HOST</code></td>
        <td>Katib MySQL Host</td>
        <td>katib-mysql</td>
        <td>No</td>
      </tr>
      <tr>
        <td><code>KATIB_MYSQL_DB_PORT</code></td>
        <td>Katib MySQL Port</td>
        <td>3306</td>
        <td>No</td>
      </tr>
      <tr>
        <td><code>KATIB_MYSQL_DB_DATABASE</code></td>
        <td>Katib MySQL Database name</td>
        <td>katib</td>
        <td>No</td>
      </tr>
      <tr>
        <td><code>KATIB_POSTGRESQL_DB_HOST</code></td>
        <td>Katib Postgres Host</td>
        <td>katib-postgres</td>
        <td>No</td>
      </tr>
      <tr>
        <td><code>KATIB_POSTGRESQL_DB_PORT</code></td>
        <td>Katib Postgres Port</td>
        <td>5432</td>
        <td>No</td>
      </tr>
      <tr>
        <td><code>KATIB_POSTGRESQL_DB_DATABASE</code></td>
        <td>Katib Postgres Database name</td>
        <td>katib</td>
        <td>No</td>
      </tr>
      <tr>
        <td><code>KATIB_POSTGRESQL_SSL_MODE</code></td>
        <td>Katib Postgres SSL mode</td>
        <td>disable</td>
        <td>No</td>
      </tr>
      <tr>
        <td><code>SKIP_DB_INITIALIZATION</code></td>
        <td>Option to skip DB table initialization</td>
        <td>false</td>
        <td>No</td>
      </tr>
    </tbody>
  </table>
</div>

Currently, Katib DB Manager supports only **MySQL** and **Postgres** database. (`DB_NAME` env
variable must be filled with one of `mysql` or `postgres`). However, you can use your own DB Manager
and Database to report metrics by implements the
[katib db interface](https://github.com/kubeflow/katib/blob/master/pkg/db/v1beta1/common/kdb.go).

For the [Katib DB Manager](https://github.com/kubeflow/katib/blob/master/manifests/v1beta1/components/db-manager/db-manager.yaml#L25)
you can change `DB_PASSWORD` to your own DB password.

Katib DB Manager creates DB connection to the DB by the type of DB.  
If `DB_NAME=mysql`, it uses `mysql` driver and this data source name:  
**`DB_USER:DB_PASSWORD@tcp(KATIB_MYSQL_DB_HOST:KATIB_MYSQL_DB_PORT)/KATIB_MYSQL_DB_DATABASE?timeout=5s`**

If `DB_NAME=postgres`, it uses `pq` driver and this data source name:  
**`postgresql://[DB_USER[:DB_PASSWORD]@][KATIB_POSTGRESQL_DB_HOST][:KATIB_POSTGRESQL_DB_PORT][/KATIB_POSTGRESQL_DB_DATABASE]`**

## Katib DB

Katib DB components supports MySQL and Postgres.

### Katib MySQL

For the [Katib MySQL](https://github.com/kubeflow/katib/blob/master/manifests/v1beta1/components/mysql/mysql.yaml)
you need to set these environment variables:

- `MYSQL_ROOT_PASSWORD` to a value from [katib-mysql-secrets](https://github.com/kubeflow/katib/blob/master/manifests/v1beta1/components/mysql/secret.yaml),
  which is equal to "test".
- `MYSQL_ALLOW_EMPTY_PASSWORD` as `true`
- `MYSQL_DATABASE` as `katib`.

You can refer to the list of
[all environment variables](https://github.com/docker-library/docs/tree/master/mysql#environment-variables)
for the MySQL Docker image.

Katib MySQL environment variables must be matched with the Katib DB Manager environment variables, it means:

1. `MYSQL_ROOT_PASSWORD` = `DB_PASSWORD`
1. `MYSQL_DATABASE` = `KATIB_MYSQL_DB_DATABASE`

### Katib Postgres

For the [Katib Postgres](https://github.com/kubeflow/katib/blob/master/manifests/v1beta1/components/postgres/postgres.yaml)
you need to set these environment variables:

- `POSTGRES_USER`, `POSTGRES_PASSWORD` and `POSTGRES_DB` to a value from [katib-postgres-secrets](https://github.com/kubeflow/katib/blob/master/manifests/v1beta1/components/postgres/secret.yaml),
  which are equal to "katib".

You can refer to the list of
[all environment variables](https://github.com/docker-library/docs/blob/master/postgres/README.md#environment-variables)
for the Postgres Docker image.

Katib Postgres environment variables must be matched with the Katib DB Manager environment variables, it means:

1. `POSTGRES_USER` = `DB_USER`
1. `POSTGRES_PASSWORD` = `DB_PASSWORD`
1. `POSTGRES_DB` = `KATIB_POSTGRESQL_DB_DATABASE`

## Next steps

- Learn about different [options to install Katib](/docs/components/katib/user-guides/installation-options/).



================================================
File: content/en/docs/components/katib/user-guides/installation-options.md
================================================
+++
title = "Katib Installation Options"
description = "Overview of the ways to install Katib control plane"
weight = 90
+++

Katib offers a few installation options to install control plane. This page describes the options
and the features available with each option. Check
[the installation guide](/docs/components/katib/installation/#installing-control-plane) to
understand the Katib control plane components.

## The Default Katib Standalone Installation

Follow [the installation guide](/docs/components/katib/installation/#installing-katib) to install
the default version of Katib control plane.

### Katib with Controller Leader Election

Run the following command to deploy Katib with
[Controller Leader Election](https://kubernetes.io/blog/2016/01/simple-leader-election-with-kubernetes/) support:

```shell
kubectl apply -k "github.com/kubeflow/katib.git/manifests/v1beta1/installs/katib-leader-election?ref=master"
```

This installation is almost the same as Katib Standalone installation, although you can make
`katib-controller` Highly Available (HA) using leader election. If you plan to use Katib in an
environment where high Service Level Agreements (SLAs) and Service Level Objectives (SLOs)
are required, such as a production environment, consider choosing this installation.

### Katib with PostgreSQL Database

Run the following command to deploy Katib with PostgreSQL database (DB) instead of MySQL:

```shell
kubectl apply -k "github.com/kubeflow/katib.git/manifests/v1beta1/installs/katib-standalone-postgres?ref=master"
```

### Katib with External DB

Run the following command to deploy Katib with custom DB backend:

```shell
kubectl apply -k "github.com/kubeflow/katib.git/manifests/v1beta1/installs/katib-external-db?ref=master"
```

This installation allows to use custom instance of MySQL DB instead `katib-mysql`.
You have to modify the appropriate environment variables for `katib-db-manager` in the
[secrets.env](https://github.com/kubeflow/katib/blob/ea46a7f2b73b2d316b6b7619f99eb440ede1909b/manifests/v1beta1/installs/katib-external-db/secrets.env)
with your MySQL DB values.

### Katib with Cert Manager

Run the following command to deploy Katib with [Cert Manager](https://cert-manager.io/docs/releases/)
requirement:

```shell
kubectl apply -k "github.com/kubeflow/katib.git/manifests/v1beta1/installs/katib-cert-manager?ref=master"
```

This installation uses Cert Manager instead of Katib certificate generator to provision Katib
webhooks certificates. You have to deploy Cert Manager on your Kubernetes cluster before
deploying Katib using this installation.

### Katib on OpenShift

Run the following command to deploy Katib on [OpenShift](https://docs.openshift.com/) v4.4+:

```
kubectl apply -k "github.com/kubeflow/katib.git/manifests/v1beta1/installs/katib-openshift?ref=master"
```

This installation uses OpenShift service controller instead of Katib certificate generator to
provision Katib webhooks certificates.

## Next Steps

- How to [set up environment variables](/docs/components/katib/user-guides/env-variables/) for
  various Katib component.



================================================
File: content/en/docs/components/katib/user-guides/katib-config.md
================================================
+++
title = "How to use Katib Config"
description = "Katib configuration overview and how to update values"
weight = 80
+++

This guide describes
[the Katib Config](https://github.com/kubeflow/katib/blob/19268062f1b187dde48114628e527a2a35b01d64/manifests/v1beta1/installs/katib-standalone/katib-config.yaml) —
the main configuration file for every Katib component. We use Kubernetes
[ConfigMap](https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/) to
fetch that config into [the Katib control plane components](/docs/components/katib/reference/architecture/#katib-control-plane-components).

The ConfigMap must be deployed in the
[`KATIB_CORE_NAMESPACE`](/docs/components/katib/user-guides/env-variables/#katib-controller)
namespace with the `katib-config` name.

Katib config has the initialization: `init` and the runtime: `runtime` parameters. You can modify
these parameters by editing the `katib-config` ConfigMap:

```shell
kubectl edit configMap katib-config -n kubeflow
```

## Initialization Parameters

Katib Config parameters set in `init` represent initialization settings for
the Katib control plane. These parameters can be modified before Katib control plane is deployed.

```yaml
apiVersion: config.kubeflow.org/v1beta1
kind: KatibConfig
init:
  certGenerator:
    enable: true
    ...
  controller:
    trialResources:
      - Job.v1.batch
      - TFJob.v1.kubeflow.org
    ...
```

It has settings for the following Katib components:

1. Katib certificate generator: `certGenerator`

1. Katib controller: `controller`

### Katib Certificate Generator Parameters

The following parameters set in `.init.certGenerator` configure the Katib certificate generator:

- `enable` - whether to enable Katib certificate generator.

  The default value is `false`

- `webhookServiceName` - a service name for the Katib webhooks. If it is set, Katib certificate
  generator is forcefully enabled.

  The default value is `katib-controller`

- `webhookSecretName` - a secret name to store Katib webhooks certificates. If it is set, Katib
  certificate generator is forcefully enabled.

  The default value is `katib-webhook-cert`

### Katib Controller Parameters

The following parameters set in `.init.controller` configure the Katib controller:

- `experimentSuggestionName` - the implementation of Suggestion interface for
  Experiment controller.

  The default value is `default`

- `metricsAddr` - a TCP address that the Katib controller should bind to
  for serving prometheus metrics.

  The default value is `8080`

- `healthzAddr` - a TCP address that the Katib controller should bind to
  for health probes.

  The default value is `18080`

- `injectSecurityContext` - whether to inject security context to Katib metrics collector sidecar
  container from Katib Trial training container.

  The default value is `false`

- `trialResources` - list of resources that can be used as a Trial template. The Trial resources
  must be in this format: Kind.version.group (e.g. `TFJob.v1.kubeflow.org`).
  Follow [this guide](/docs/components/katib/user-guides/trial-template/#use-crds-with-trial-template)
  to understand how to make Katib Trial work with your Kubernetes CRDs.

  The default value is `[Job.v1.batch]`

- `webhookPort` - a port number for Katib admission webhooks.

  The default value is `8443`

- `enableLeaderElection` - whether to enable leader election for Katib controller. If this value
  is true only single Katib controller Pod is active.

  The default value is `false`

- `leaderElectionID` - an ID for the Katib controller leader election.

  The default value is `3fbc96e9.katib.kubeflow.org`

## Runtime Parameters

Katib Config parameters set in `runtime` represent runtime settings for
the Katib Experiment. These parameters can be modified before Katib Experiment is created. When
Katib Experiment is created Katib controller fetches the latest configuration from the
`katib-config` ConfigMap.

```yaml
apiVersion: config.kubeflow.org/v1beta1
kind: KatibConfig
runtime:
  metricsCollectors:
    - kind: StdOut
      image: docker.io/kubeflowkatib/file-metrics-collector:latest
    ...
  suggestions:
    - algorithmName: random
      image: docker.io/kubeflowkatib/suggestion-hyperopt:latest
    ...
  earlyStoppings:
    - algorithmName: medianstop
      image: docker.io/kubeflowkatib/earlystopping-medianstop:latest
    ...
```

### Metrics Collectors Parameters

Parameters set in `.runtime.metricsCollectors` configure container for
[the Katib metrics collector](/docs/components/katib/user-guides/metrics-collector).
The following settings are **required** for each Katib metrics collector that you want to use in your Katib Experiments:

- `kind` - one of the Katib metrics collector types.

- `image` - a Docker image for the metrics collector's container.

The following settings are **optional**:

- `imagePullPolicy` - an [image pull policy](https://kubernetes.io/docs/concepts/configuration/overview/#container-images)
  for the metrics collector's container.

  The default value is `IfNotPresent`

- `resources` - [resources](https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container)
  for the metrics collector's container.

  The default values for the `resources` are:

  ```yaml
  metricsCollectors:
    - kind: StdOut
      image: docker.io/kubeflowkatib/file-metrics-collector:latest
      resources:
        requests:
          cpu: 50m
          memory: 10Mi
          ephemeral-storage: 500Mi
        limits:
          cpu: 500m
          memory: 100Mi
          ephemeral-storage: 5Gi
  ```

  You can run your metrics collector's container without requesting
  the `cpu`, `memory`, or `ephemeral-storage` resource from the Kubernetes cluster.
  For instance, you have to remove `ephemeral-storage` from the container resources to use the
  [Google Kubernetes Engine cluster autoscaler](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-autoscaler#limitations).

  To remove specific resources from the metrics collector's container set the
  negative values in requests and limits in your Katib config as follows:

  ```yaml
  resources:
    requests:
      cpu: -1
      memory: -1
      ephemeral-storage: -1
    limits:
      cpu: -1
      memory: -1
      ephemeral-storage: -1
  ```

- `waitAllProcesses` - a flag to define whether the metrics collector should wait until all
  processes in the Trial's training container are finished before start to collect metrics.

  The default value is `false`

### Suggestions Parameters

Parameters set in `.runtime.suggestions` configure Deployment for
[the Katib Suggestions](/docs/components/katib/reference/architecture/#suggestion). Every Suggestion represents
one of the AutoML algorithms that you can use in Katib Experiments.
The following settings are **required** for Suggestion Deployment:

- `algorithmName` - one of the Katib algorithm names. For example: `tpe`

- `image` - a Docker image for the Suggestion Deployment's container. Image
  example: `docker.io/kubeflowkatib/<suggestion-name>`

  For each algorithm you can specify one of the following Suggestion names in the Docker image:

  <div class="table-responsive">
    <table class="table table-bordered">
      <thead class="thead-light">
        <tr>
          <th>Suggestion name</th>
          <th>List of supported algorithms</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><code>suggestion-hyperopt</code></td>
          <td><code>random</code>, <code>tpe</code></td>
          <td><a href="https://github.com/hyperopt/hyperopt">Hyperopt</a> optimization framework</td>
        </tr>
        <tr>
          <td><code>suggestion-skopt</code></td>
          <td><code>bayesianoptimization</code></td>
          <td><a href="https://github.com/scikit-optimize/scikit-optimize">Scikit-optimize</a> optimization framework</td>
        </tr>
        <tr>
          <td><code>suggestion-goptuna</code></td>
          <td><code>cmaes</code>, <code>random</code>, <code>tpe</code>, <code>sobol</code></td>
          <td><a href="https://github.com/c-bata/goptuna">Goptuna</a> optimization framework</td>
        </tr>
        <tr>
          <td><code>suggestion-optuna</code></td>
          <td><code>multivariate-tpe</code>, <code>tpe</code>, <code>cmaes</code>, <code>random</code>, <code>grid</code></td>
          <td><a href="https://github.com/optuna/optuna">Optuna</a> optimization framework</td>
        </tr>
        <tr>
          <td><code>suggestion-hyperband</code></td>
          <td><code>hyperband</code></td>
          <td><a href="https://github.com/kubeflow/katib/tree/master/pkg/suggestion/v1beta1/hyperband">Katib
            Hyperband</a> implementation</td>
        </tr>
        <tr>
          <td><code>suggestion-pbt</code></td>
          <td><code>pbt</code></td>
          <td><a href="https://github.com/kubeflow/katib/tree/master/pkg/suggestion/v1beta1/pbt">Katib
            PBT</a> implementation</td>
        </tr>
        <tr>
          <td><code>suggestion-enas</code></td>
          <td><code>enas</code></td>
          <td><a href="https://github.com/kubeflow/katib/tree/master/pkg/suggestion/v1beta1/nas/enas">Katib
            ENAS</a> implementation</td>
        </tr>
        <tr>
          <td><code>suggestion-darts</code></td>
          <td><code>darts</code></td>
          <td><a href="https://github.com/kubeflow/katib/tree/master/pkg/suggestion/v1beta1/nas/darts">Katib
            DARTS</a> implementation</td>
        </tr>
      </tbody>
    </table>
  </div>

The following settings are **optional**:

- `<ContainerV1>` - you can specify all
  [container parameters](https://github.com/kubernetes/api/blob/669e693933c77e91648f8602dc2555d96e6279ad/core/v1/types.go#L2608)
  inline for your Suggestion Deployment. For example, `resources` for container resources or
  `env` for container environment variables.

  Configuration for `resources` works the same as for Katib metrics collector's container `resources`.

- `serviceAccountName` - a [ServiceAccount](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/)
  for the Suggestion Deployment.

  By default, the Suggestion Pod doesn't have any specific ServiceAccount,
  in which case, the Pod uses the
  [default](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server)
  service account.

  **Note:** If you want to run your Experiments with
  [early stopping](/docs/components/katib/user-guides/early-stopping/),
  the Suggestion's Deployment must have permission to update the Experiment's
  Trial status. If you don't specify a ServiceAccount in the Katib config,
  Katib controller creates required
  [Kubernetes Role-based access control](https://kubernetes.io/docs/reference/access-authn-authz/rbac)
  for the Suggestion.

  If you need your own ServiceAccount for the Experiment's
  Suggestion with early stopping, you have to follow the rules:

  - The ServiceAccount name can't be equal to
    `<experiment-name>-<experiment-algorithm>`

  - The ServiceAccount must have sufficient permissions to update
    the Experiment's Trial status.

#### Suggestion Volume Parameters

When you create an Experiment with
[`FromVolume` resume policy](/docs/components/katib/user-guides/resume-experiment#resume-policy-fromvolume),
you are able to specify
[PersistentVolume (PV)](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistent-volumes)
and
[PersistentVolumeClaim (PVC)](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims)
settings for the Experiment's Suggestion to restore stage of the AutoML algorithm.

If PV settings are empty, Katib controller creates only PVC.
If you want to use the default volume specification, you can omit these parameters.

For example, Suggestion volume config for `random` algorithm:

```yaml
suggestions:
  - algorithmName: random
    image: docker.io/kubeflowkatib/suggestion-hyperopt:latest
    volumeMountPath: /opt/suggestion/data
    persistentVolumeClaimSpec:
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 3Gi
      storageClassName: katib-suggestion
    persistentVolumeSpec:
      accessModes:
        - ReadWriteMany
      capacity:
        storage: 3Gi
      hostPath:
        path: /tmp/suggestion/unique/path
      storageClassName: katib-suggestion
    persistentVolumeLabels:
      type: local
```

- `volumeMountPath` - a [mount path](https://kubernetes.io/docs/tasks/configure-pod-container/configure-volume-storage/#configure-a-volume-for-a-pod)
  for the Suggestion Deployment's container.

  The default value is `/opt/katib/data`

- `persistentVolumeClaimSpec` - a [PVC specification](https://github.com/kubernetes/api/blob/669e693933c77e91648f8602dc2555d96e6279ad/core/v1/types.go#L487)
  for the Suggestion Deployment's PVC.

  The default value is:

  ```yaml
  persistentVolumeClaimSpec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
  ```

- `persistentVolumeSpec` - a [PV specification](https://github.com/kubernetes/api/blob/669e693933c77e91648f8602dc2555d96e6279ad/core/v1/types.go#L324)
  for the Suggestion Deployment's PV.

  Suggestion Deployment's PV always has **`persistentVolumeReclaimPolicy: Delete`** to properly
  remove all resources once Katib Experiment is deleted. To know more about PV reclaim policies
  check the
  [Kubernetes documentation](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#reclaiming).

- `persistentVolumeLabels` - [PV labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)
  for the Suggestion Deployment's PV.

### Early Stoppings Parameters

Parameters set in `runtime.earlyStoppings` configure container for
[the Katib Early Stopping algorithms](/docs/components/katib/user-guides/early-stopping/#early-stopping-algorithms).
The following settings are **required** for each early stopping algorithm that you want
to use in your Katib Experiments:

- `algorithmName` - one of the early stopping algorithm names (e.g. `medianstop`).

- `image` - a Docker image for the early stopping container.

The following settings are **optional**:

- `imagePullPolicy` - an [image pull policy](https://kubernetes.io/docs/concepts/configuration/overview/#container-images)
  for the early stopping's container.

  The default value is `IfNotPresent`

- `resources` - [resources](https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container)
  for the early stopping's container.

  Configuration for `resources` works the same as for Katib metrics collector's container `resources`.

## Next steps

- How to [set up environment variables](/docs/components/katib/user-guides/env-variables/) for
  various Katib component.



================================================
File: content/en/docs/components/katib/user-guides/katib-ui.md
================================================
+++
title = "How to use Katib UI"
description = "How to access and use Katib UI"
weight = 30
+++

This page describes how to access and use Katib UI. Follow
[the installation page](/docs/components/katib/installation/#installing-katib) to install Katib
control plane before accessing Katib UI.

You can use the Katib user interface (UI) to submit Katib Experiments and to monitor your
Experiments results.

## Accessing Katib UI from Kubeflow Central Dashboard

If you install Katib as part of Kubeflow platform, you can access Katib UI via
[Kubeflow Central Dashboard](/docs/components/central-dash/access/#how-to-access-the-kubeflow-central-dashboard).
Click **Experiments (AutoML)** in the left-hand menu:

<img src="/docs/components/katib/images/home-page-kubeflow-ui.png"
  alt="The Katib UI within the Kubeflow Central Dashboard"
  class="mt-3 mb-3 border border-info rounded">

## Accessing Katib UI Standalone

You can access Katib UI standalone without Kubeflow Central Dashboard. For that, port-forward the
Katib UI service:

```shell
kubectl port-forward svc/katib-ui -n kubeflow 8080:80
```

Use this URL to access Katib UI:

```shell
http://localhost:8080/katib/
```

You need to select namespace to view Katib Experiments:

<img src="/docs/components/katib/images/home-page-standalone.png"
  alt="The Katib UI Standalone"
  class="mt-3 mb-3 border border-info rounded">

## Running Hyperparameter Tuning Experiment from Katib UI

You can submit an hyperparameter tuning Experiment from the Katib UI.

### Create Katib Experiment

1. Click **New Experiment** on the Katib home page.

1. You should be able to view tabs offering you the following options:

   - **Metadata:** Type name of your Experiment.

   - **Trial Thresholds:** Choose how many Trials you want to run.

   - **Objective:** Add metrics that you want to optimize and type of optimization.

   - **Search Algorithm:** Select hyperparameter tuning algorithm and configure algorithm settings.

   - **Early Stopping:** Add early stopping algorithm if that is required.

   - **Hyper Parameters:** Add hyperparameters and search space that you want to optimize.

   - **Metrics Collector:** Modify metrics collector type if that is required.

   - **Trial Template:** Configure parameters for your Trial template. Every hyperparameter must have
     reference to the `trialParameters` values.

   <img src="/docs/components/katib/images/deploy-parameters.png"
        alt="Deploy Katib Experiment using parameters"
        class="mt-3 mb-3 border border-info rounded">

1. (Optional) If you want to modify Experiment YAML, you can click edit and submit YAML at the bottom.

   <img src="/docs/components/katib/images/deploy-yaml.png"
       alt="Deploy Katib Experiment using YAML"
       class="mt-3 mb-3 border border-info rounded">

1. Create Katib Experiment.

### Get Katib Experiment Results

Follow these steps to get Katib Experiment results:

1. You should be able to view the list of Experiments on Katib UI home page:

   <img src="/docs/components/katib/images/home-page-kubeflow-ui.png"
     alt="List of Katib Experiments"
     class="mt-3 mb-3 border border-info rounded">

1. Click the name of your Experiment. For example, click **random-example**.

1. There should be a graph showing the level of validation and train accuracy
   for various combinations of the hyperparameter values (learning rate, number
   of layers, and optimizer):

   <img src="/docs/components/katib/images/random-example-graph.png"
     alt="Graph produced by the random example"
     class="mt-3 mb-3 border border-info rounded">

1. If you click to the Trials tab, you will see list of Trials that ran withing the Experiment.

   <img src="/docs/components/katib/images/random-example-trials.png"
     alt="Trials that ran during the Experiment"
     class="mt-3 mb-3 border border-info rounded">

1. You can click on Trial name to get metrics for the particular Trial:

   <img src="/docs/components/katib/images/random-example-trial-info.png"
     alt="Trial metrics graph"
     class="mt-3 mb-3 border border-info rounded">

### Create Katib Experiment with Early Stopping

Follow [this guide](/docs/components/katib/user-guides/early-stopping) to learn how early stopping
works in Katib.

1. Select early stopping algorithm while creating Katib Experiment:

   <img src="/docs/components/katib/images/early-stopping-parameter.png"
       alt="Katib Experiment with Early Stopping"
       class="mt-3 mb-3 border border-info rounded">

1. After your Experiment is complete, you can check your results in the Katib UI. The Trial statuses
   on the Experiment monitor page should look as follows:

   <img src="/docs/components/katib/images/early-stopping-trials.png"
       alt="Trials view with early stopping"
       class="mt-3 mb-3 border border-info rounded">

1. You can click on the early stopped Trial name to get reported metrics before this Trial was early stopped:

   <img src="/docs/components/katib/images/early-stopping-trial-info.png"
     alt="Early stopped Trial metrics"
     class="mt-3 mb-3 border border-info rounded">

## Next Steps

- Understand how [Katib metrics collector works](/docs/components/katib/user-guides/metrics-collector).

- Learn how to use [early stopping within Katib Experiments](/docs/components/katib/user-guides/early-stopping)



================================================
File: content/en/docs/components/katib/user-guides/metrics-collector.md
================================================
+++
title = "How to Configure Metrics Collector"
description = "Overview of Katib metrics collector and how to configure it"
weight = 40
+++

This guide describes how Katib metrics collector works.

## Prerequisites

Before running your hyperparameter tuning Katib Experiment with Python SDK,
ensure the namespace label `katib.kubeflow.org/metrics-collector-injection: enabled`
is present. This label enables the sidecar container injection for pull-based metrics collectors to collect metrics during the experiment.

You can configure the namespace by adding the following label `katib.kubeflow.org/metrics-collector-injection: enabled`
as is shown in the sample code:

```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: <your-namespace>
  labels:
    katib.kubeflow.org/metrics-collector-injection: enabled
```

Or you can add the label to an existing namespace using the following command:

```bash
kubectl label namespace <your-namespace> katib.kubeflow.org/metrics-collector-injection=enabled
```

## Overview

There are two ways to collect metrics:

1. Pull-based: collects the metrics using a _sidecar_ container. A sidecar is a utility container that supports
the main container in the Kubernetes Pod.

2. Push-based: users push the metrics directly to Katib DB in the training scripts.

In the `metricsCollectorSpec` section of the Experiment YAML configuration file, you can
define how Katib should collect the metrics from each Trial, such as the accuracy and loss metrics.

## Pull-based Metrics Collector

Your training code can record the metrics into `StdOut` or into arbitrary output files.

To define the pull-based metrics collector for your Experiment:

1. Specify the collector type in the `.collector.kind` field.
   Katib's metrics collector supports the following collector types:

   - `StdOut`: Katib collects the metrics from the operating system's default
     output location (_standard output_). This is the default metrics collector.

   - `File`: Katib collects the metrics from an arbitrary file, which
     you specify in the `.source.fileSystemPath.path` field. Training container
     should log metrics to this file in `TEXT` or `JSON` format. If you select `JSON` format,
     metrics must be line-separated by `epoch` or `step` as follows, and the key for timestamp must
     be `timestamp`:

     ```json
     {"epoch": 0, "foo": "bar", "fizz": "buzz", "timestamp": "2021-12-02T14:27:51"}
     {"epoch": 1, "foo": "bar", "fizz": "buzz", "timestamp": "2021-12-02T14:27:52"}
     {"epoch": 2, "foo": "bar", "fizz": "buzz", "timestamp": "2021-12-02T14:27:53"}
     {"epoch": 3, "foo": "bar", "fizz": "buzz", "timestamp": "2021-12-02T14:27:54"}
     ```

     Check the file metrics collector example for [`TEXT`](https://github.com/kubeflow/katib/blob/ea46a7f2b73b2d316b6b7619f99eb440ede1909b/examples/v1beta1/metrics-collector/file-metrics-collector.yaml#L14-L24)
     and [`JSON`](https://github.com/kubeflow/katib/blob/ea46a7f2b73b2d316b6b7619f99eb440ede1909b/examples/v1beta1/metrics-collector/file-metrics-collector-with-json-format.yaml#L14-L22)
     format. Also, the default file path is `/var/log/katib/metrics.log`, and the default file format is `TEXT`.

   - `TensorFlowEvent`: Katib collects the metrics from a directory path
     containing a [tf.Event](https://www.tensorflow.org/api_docs/python/tf/compat/v1/Event).
     These are typically written by [tensorflow.summary](https://www.tensorflow.org/api_docs/python/tf/summary).
     As of Katib 0.18, [torch.utils.tensorboard](https://pytorch.org/docs/stable/tensorboard.html) or
     [tensorboardX](https://tensorboardx.readthedocs.io/en/latest/index.html) may also be used to write metrics.
     You should specify the path in the `.source.fileSystemPath.path` field. Check the
     [TFJob example](https://github.com/kubeflow/katib/blob/ea46a7f2b73b2d316b6b7619f99eb440ede1909b/examples/v1beta1/kubeflow-training-operator/tfjob-mnist-with-summaries.yaml#L17-L23).
     The default directory path is `/var/log/katib/tfevent/`.

   - `Custom`: Specify this value if you need to use a custom way to collect
     metrics. You must define your custom metrics collector container
     in the `.collector.customCollector` field. Check the
     [custom metrics collector example](https://github.com/kubeflow/katib/blob/ea46a7f2b73b2d316b6b7619f99eb440ede1909b/examples/v1beta1/metrics-collector/custom-metrics-collector.yaml#L14-L36).

2. Write code in your training container to print or save to the file metrics in the format
   specified in the `.source.filter.metricsFormat` field. The default metrics format value is:

   ```
   ([\w|-]+)\s*=\s*([+-]?\d*(\.\d+)?([Ee][+-]?\d+)?)
   ```

   Each element is a regular expression with two sub-expressions. The first matched expression is
   taken as the metric name. The second matched expression is taken as the metric value.

   For example, using the default metrics format and `StdOut` metrics collector,
   if the name of your objective metric is `loss` and the additional metrics are
   `recall` and `precision`, your training code should print the following output:

   ```shell
   epoch 1:
   loss=3.0e-02
   recall=0.5
   precision=.4

   epoch 2:
   loss=1.3e-02
   recall=0.55
   precision=.5
   ```

## Push-based Metrics Collector

Your training code needs to call [`report_metrics()`](https://github.com/kubeflow/katib/blob/e251a07cb9491e2d892db306d925dddf51cb0930/sdk/python/v1beta1/kubeflow/katib/api/report_metrics.py#L26) function in Python SDK to record metrics.
The `report_metrics()` function works by parsing the metrics in `metrics` field into a gRPC request, automatically adding the current timestamp for users, and sending the request to Katib DB Manager.

But before that, `kubeflow-katib` package should be installed in your training container.

To define the push-based metrics collector for your Experiment, you have two options:

- YAML File

    1. Specify the collector type `Push` in the `.collector.kind` field.

    2. Write code in your training container to call `report_metrics()` to report metrics.

- [`tune`](https://github.com/kubeflow/katib/blob/master/sdk/python/v1beta1/kubeflow/katib/api/katib_client.py#L166) function

    Use tune function and specify the `metrics_collector_config` field. You can reference to the following example:

    ```
    import kubeflow.katib as katib

    def objective(parameters):
      import time
      import kubeflow.katib as katib
      time.sleep(5)
      result = 4 * int(parameters["a"])
      # Push metrics to Katib DB.
      katib.report_metrics({"result": result})

    katib.KatibClient(namespace="kubeflow").tune(
      name="push-metrics-exp",
      objective=objective,
      parameters= {"a": katib.search.int(min=10, max=20)}
      objective_metric_name="result",
      max_trial_count=2,
      metrics_collector_config={"kind": "Push"},
      # When SDK is released, replace it with packages_to_install=["kubeflow-katib==0.18.0"].
      # Currently, the training container should have `git` package to install this SDK.
      packages_to_install=["git+https://github.com/kubeflow/katib.git@master#subdirectory=sdk/python/v1beta1"],
    )
    ```



================================================
File: content/en/docs/components/katib/user-guides/resume-experiment.md
================================================
+++
title = "How to Resume Experiments"
description = "How to modify running Experiments and resume completed Experiments"
weight = 70
+++

This guide describes how to modify running Experiments and restart completed Experiments.
You will learn about changing the Experiment execution process and use various
resume policies for the Katib Experiment.

## Modify Running Experiment

While the Experiment is running you are able to change Trial count parameters. For example, you
can decrease the maximum number of hyperparameter sets that are trained in parallel.

You can change only **`parallelTrialCount`**, **`maxTrialCount`** and **`maxFailedTrialCount`**
Experiment parameters.

Use Kubernetes API or `kubectl`
[in-place update of resources](https://kubernetes.io/docs/concepts/cluster-administration/manage-deployment/#in-place-updates-of-resources)
to make Experiment changes. For example, run:

```shell
kubectl edit experiment <experiment-name> -n <experiment-namespace>
```

Make appropriate changes and save it. Controller automatically processes
the new parameters and makes necessary changes.

- If you want to increase or decrease parallel Trial execution, modify `parallelTrialCount`.
  Controller accordingly creates or deletes Trials in line with the `parallelTrialCount` value.

- If you want to increase or decrease maximum Trial count, modify `maxTrialCount`. `maxTrialCount`
  should be greater than current count of `Succeeded` Trials.
  You can remove the `maxTrialCount` parameter, if your Experiment should run endless
  with `parallelTrialCount` of parallel Trials until the Experiment reaches `Goal` or `maxFailedTrialCount`

- If you want to increase or decrease maximum failed Trial count, modify `maxFailedTrialCount`.
  You can remove the `maxFailedTrialCount` parameter, if the Experiment should not reach `Failed` status.

## Resume Succeeded Experiment

Katib Experiment is restartable only if it is in **`Succeeded`** status because `maxTrialCount`
has been reached. To check current Experiment status run:
`kubectl get experiment <experiment-name> -n <experiment-namespace>`.

To restart an Experiment, you are able to change only **`parallelTrialCount`**,
**`maxTrialCount`** and **`maxFailedTrialCount`** as described [above](#modify-running-experiment)

To control various resume policies, you can specify `.spec.resumePolicy` for the Experiment.

### Resume policy: Never

Use this policy if your Experiment should not be resumed at any time. After the Experiment has finished,
the Suggestion's [Deployment](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/)
and [Service](https://kubernetes.io/docs/concepts/services-networking/service/)
are deleted and you can't restart the Experiment.

This is the default policy for all Katib Experiments. You can omit `.spec.resumePolicy` parameter
for that functionality.

### Resume policy: LongRunning

Use this policy if you intend to restart the Experiment. After the Experiment has finished,
the Suggestion's Deployment and Service stay running until you delete your Experiment.
Modify Experiment's Trial count parameters to restart the Experiment.

Check the
[`long-running-resume.yaml`](https://github.com/kubeflow/katib/blob/fc858d15dd41ff69166a2020efa200199063f9ba/examples/v1beta1/resume-experiment/long-running-resume.yaml#L17)
example for more details.

### Resume policy: FromVolume

Use this policy if you intend to restart the Experiment. In that case, [volume](https://kubernetes.io/docs/concepts/storage/volumes/)
is attached to the Suggestion's Deployment.

Katib controller creates [PersistentVolumeClaim (PVC)](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims)
in addition to the Suggestion's Deployment and Service.

- PVC is deployed with the name: `<suggestion-name>-<suggestion-algorithm>`
  in the Suggestion namespace.

- PV is deployed with the name:
  `<suggestion-name>-<suggestion-algorithm>-<suggestion-namespace>`

After the Experiment has finished, the Suggestion's Deployment and Service are deleted.
Suggestion data can be retained in the volume. When you restart the Experiment, the Suggestion's
Deployment and Service are created and Suggestion statistics can be recovered from the volume.

When you delete the Experiment, the Suggestion's Deployment, Service, PVC and PV are deleted automatically.

Check the
[`from-volume-resume.yaml`](https://github.com/kubeflow/katib/blob/fc858d15dd41ff69166a2020efa200199063f9ba/examples/v1beta1/resume-experiment/from-volume-resume.yaml#L17)
example for more details.

## Next steps

- Learn how to [configure and run your Katib Experiments](/docs/components/katib/user-guides/hp-tuning/configure-experiment).



================================================
File: content/en/docs/components/katib/user-guides/trial-template.md
================================================
+++
title = "How to use Trial Templates"
description = "Trial template parameters overview and how use CRDs with Katib Trials"
weight = 35
+++

This guide describes how to configure Trial template parameters and use custom
[Kubernetes CRD](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/)
in Katib Trials. You will learn about changing Trial template specification, how to use
[Kubernetes ConfigMaps](https://kubernetes.io/docs/concepts/configuration/configmap/)
to store templates and how to modify Katib controller to support your
Kubernetes CRD in Katib Experiments.

Katib dynamically supports any kind of Kubernetes CRD as Trial's Worker.
In Katib examples, you can find the following examples for Trial's Workers:

- [Kubernetes `Job`](https://kubernetes.io/docs/concepts/workloads/controllers/job/)

- [Kubeflow `TFJob`](/docs/components/trainer/legacy-v1/user-guides/tensorflow)

- [Kubeflow `PyTorchJob`](/docs/components/trainer/legacy-v1/user-guides/pytorch/)

- [Kubeflow `XGBoostJob`](/docs/components/trainer/legacy-v1/user-guides/xgboost)

- [Kubeflow `MPIJob`](/docs/components/trainer/legacy-v1/user-guides/mpi)

- [Tekton `Pipelines`](https://github.com/kubeflow/katib/tree/master/examples/v1beta1/tekton)

- [Argo `Workflows`](https://github.com/kubeflow/katib/tree/master/examples/v1beta1/argo)

To use your own Kubernetes resource follow the steps [below](#use-crds-with-trial-template).

## How to use Trial Template

To run the Katib Experiment you have to specify a Trial template for your
[Worker job](/docs/components/katib/reference/architecture/#worker) where actual
model training is running.

### Configure Trial Template Specification

Trial template specification is located under `.spec.trialTemplate` of your Experiment.
To define Trial, you should specify these parameters in `.spec.trialTemplate`:

- `trialParameters` - list of the parameters which are used in the Trial template
  during Experiment execution.

  **Note:** Your Trial template must contain each parameter from the `trialParameters`. You can
  set these parameters in any field of your template, except `.metadata.name` and
  `.metadata.namespace`. For example, your training container can receive
  hyperparameters as command-line or arguments or as environment variables.

  Your Experiment's Suggestion produces `trialParameters` before running the Trial.
  Each `trialParameter` has these structure:

  - `name` - the parameter name that is replaced in your template.

  - `description` (optional) - the description of the parameter.

  - `reference` - the parameter name that Experiment's Suggestion returns. Usually, for the
    hyperparameter tuning parameter references are equal to the Experiment search space. For example,
    in grid example search space has [three parameters](https://github.com/kubeflow/katib/blob/fc858d15dd41ff69166a2020efa200199063f9ba/examples/v1beta1/hp-tuning/grid.yaml#L17-L29) (`lr`, `momentum`) and `trialParameters` contains each of these parameters in
    [`reference`](https://github.com/kubeflow/katib/blob/fc858d15dd41ff69166a2020efa200199063f9ba/examples/v1beta1/hp-tuning/grid.yaml#L32-L39).

- You have to define your Trial template in **one** of the `trialSpec` or `configMap` sources.

  **Note:** Your template must omit `.metadata.name` and `.metadata.namespace`.

  To set the parameters from the `trialParameters`, you need to use this expression:
  `${trialParameters.<parameter-name>}` in your template. Katib automatically replaces it with
  the appropriate values from the Suggestion.

  For example, `--lr=${trialParameters.learningRate}` is the `learningRate` parameter.

  - `trialSpec` - the Trial template in
    [unstructured](https://godoc.org/k8s.io/apimachinery/pkg/apis/meta/v1/unstructured) format.
    The template should be a valid YAML.

  - `configMap` - Kubernetes ConfigMap specification where the Trial template is located.
    This ConfigMap must have the label `katib.kubeflow.org/component: trial-templates` and contains
    key-value pairs, where `key: <template-name>, value: <template-yaml>`. Check the example of the
    [ConfigMap with Trial templates](https://github.com/kubeflow/katib/blob/fc858d15dd41ff69166a2020efa200199063f9ba/examples/v1beta1/trial-template/trial-configmap-source.yaml).

    The `configMap` specification should have:

    1. `configMapName` - the ConfigMap name with the Trial templates.

    1. `configMapNamespace` - the ConfigMap namespace with the Trial templates.

    1. `templatePath` - the ConfigMap's data path to the template.

`.spec.trialTemplate` parameters below are used to control Trial behavior. If parameter has the
default value, it can be **omitted** in the Experiment YAML.

- `retain` - indicates that Trials's resources are not clean-up after the Trial
  is complete. Check the example with
  [`retain: true`](https://github.com/kubeflow/katib/blob/fc858d15dd41ff69166a2020efa200199063f9ba/examples/v1beta1/tekton/pipeline-run.yaml#L31) parameter.

  The default value is `false`

- `primaryPodLabels` - the Trial Worker's Pod or Pods labels. These Pods are injected by Katib
  metrics collector.

  **Note:** If `primaryPodLabels` are **omitted**, the Katib metrics collector wraps all worker's Pods.
  Check the example with
  [`primaryPodLabels`](https://github.com/kubeflow/katib/blob/fc858d15dd41ff69166a2020efa200199063f9ba/examples/v1beta1/kubeflow-training-operator/mpijob-horovod.yaml#L30-L31).

  The default value for Kubeflow `TFJob`, `PyTorchJob`, `MXJob`, and `XGBoostJob` is `job-role: master`

  The `primaryPodLabels` default value works only if you specify your template in
  `.spec.trialTemplate.trialSpec`. For the `configMap` template source you have to manually set
  `primaryPodLabels`.

- `primaryContainerName` - the training container name where actual model training is running.
  Katib metrics collector wraps this container to collect required metrics for the single
  Experiment optimization step.

- `successCondition` - The Trial Worker's object
  [status](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/#object-spec-and-status)
  in which Trial's job has succeeded. This condition must be in
  [GJSON format](https://github.com/tidwall/gjson). Check the example with
  [`successCondition`](https://github.com/kubeflow/katib/blob/fc858d15dd41ff69166a2020efa200199063f9ba/examples/v1beta1/tekton/pipeline-run.yaml#L35).

  The default value for Kubernetes `Job` is:

  ```
  status.conditions.#(type=="Complete")#|#(status=="True")#
  ```

  The default value for Kubeflow `TFJob`, `PyTorchJob`, `MXJob`, and `XGBoostJob` is:

  ```
  status.conditions.#(type=="Succeeded")#|#(status=="True")#
  ```

  The `successCondition` default value works only if you specify your template
  in `.spec.trialTemplate.trialSpec`. For the `configMap` template source
  you have to manually set `successCondition`.

- `failureCondition` - The Trial Worker's object
  [status](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/#object-spec-and-status)
  in which Trial's job has failed. This condition must be in
  [GJSON format](https://github.com/tidwall/gjson). Check the example with
  [`failureCondition`](https://github.com/kubeflow/katib/blob/fc858d15dd41ff69166a2020efa200199063f9ba/examples/v1beta1/tekton/pipeline-run.yaml#L36).

  The default value for Kubernetes `Job` and Kubeflow `TFJob`, `PyTorchJob`, `MXJob`, and `XGBoostJob` is:

  ```
  status.conditions.#(type=="Failed")#|#(status=="True")#
  ```

  The `failureCondition` default value works only if you specify your template in
  `.spec.trialTemplate.trialSpec`. For the `configMap` template source you
  have to manually set `failureCondition`.

### Use Metadata in Trial Template

You can't specify `.metadata.name` and `.metadata.namespace` in your Trial template, but you can
get this data during the Experiment run. For example, if you want to append the Trial's name to your
model storage.

To do this, point `.trialParameters[x].reference` to the appropriate metadata parameter and
use `.trialParameters[x].name` in your Trial template.

The table below shows the connection between
`.trialParameters[x].reference` value and Trial metadata.

<div class="table-responsive">
  <table class="table table-bordered">
    <thead class="thead-light">
      <tr>
        <th>Reference</th>
        <th>Trial metadata</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>${trialSpec.Name}</code></td>
        <td>Trial name</td>
      </tr>
      <tr>
        <td><code>${trialSpec.Namespace}</code></td>
        <td>Trial namespace</td>
      </tr>
      <tr>
        <td><code>${trialSpec.Kind}</code></td>
        <td>Kubernetes resource kind for the Trial's worker</td>
      </tr>
      <tr>
        <td><code>${trialSpec.APIVersion}</code></td>
        <td>Kubernetes resource APIVersion for the Trial's worker</td>
      </tr>
      <tr>
        <td><code>${trialSpec.Labels[custom-key]}</code></td>
        <td>Trial's worker label with <code>custom-key</code> key </td>
      </tr>
      <tr>
        <td><code>${trialSpec.Annotations[custom-key]}</code></td>
        <td>Trial's worker annotation with <code>custom-key</code> key </td>
      </tr>
    </tbody>
  </table>
</div>

Check the example of
[using Trial metadata](https://github.com/kubeflow/katib/blob/fc858d15dd41ff69166a2020efa200199063f9ba/examples/v1beta1/trial-template/trial-metadata-substitution.yaml).

## Use CRDs with Trial Template

It is possible to use your own Kubernetes CRD or other Kubernetes resource
(e.g. [Kubernetes `CronJob`](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/))
as a Trial Worker without modifying Katib controller source code and building the new image.
As long as your CRD creates Kubernetes Pods, allows to inject
the [sidecar container](https://kubernetes.io/docs/concepts/workloads/pods/) on these Pods and has
succeeded and failed status, you can use it in Katib.

To do that, you need to modify Katib components before installing it on your Kubernetes cluster.
Accordingly, you have to know your CRD API group and version, the CRD object's kind.
Also, you need to know which resources your custom object is created. Check the
[Kubernetes guide](https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/)
to know more about CRDs.

Follow these two simple steps to integrate your custom CRD in Katib:

1. Modify Katib controller
   [ClusterRole's rules](https://github.com/kubeflow/katib/blob/fc858d15dd41ff69166a2020efa200199063f9ba/manifests/v1beta1/components/controller/rbac.yaml#L5)
   with the new rule to give Katib access to all resources that are created by the Trial.
   To know more about ClusterRole, check the
   [Kubernetes guide](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#role-and-clusterrole).

   In case of Tekton `Pipelines`, Trials creates Tekton `PipelineRun`, then Tekton `PipelineRun`
   creates Tekton `TaskRun`. Therefore, Katib controller ClusterRole should have access to the
   `pipelineruns` and `taskruns`:

   ```yaml
   - apiGroups:
       - tekton.dev
     resources:
       - pipelineruns
       - taskruns
     verbs:
       - "get"
       - "list"
       - "watch"
       - "create"
       - "delete"
   ```

1. Modify Katib Config
   [controller parameters](https://github.com/kubeflow/katib/blob/fc858d15dd41ff69166a2020efa200199063f9ba/manifests/v1beta1/installs/katib-standalone/katib-config.yaml#L9-L15)
   with the new entity:

   ```
   trialResources:
    - <object-kind>.<object-API-version>.<object-API-group>
   ```

   For example, to support Tekton `Pipelines`:

   ```yaml
   trialResources:
     - PipelineRun.v1beta1.tekton.dev
   ```

After these changes, deploy Katib as described in the [installation guide](/docs/components/katib/installation/)
and wait until the `katib-controller` Pod is created. You can check logs from the Katib controller
to verify your resource integration:

```shell
$ kubectl logs $(kubectl get pods -n kubeflow -o name | grep katib-controller) -n kubeflow | grep '"CRD Kind":"PipelineRun"'

{"level":"info","ts":1628032648.6285546,"logger":"trial-controller","msg":"Job watch added successfully","CRD Group":"tekton.dev","CRD Version":"v1beta1","CRD Kind":"PipelineRun"}
```

If you ran the above steps successfully, you should be able to use your custom
object YAML in the Experiment's Trial template source spec.

We appreciate your feedback on using various CRDs in Katib. It would be great, if you could let us
know about your Experiments. The
[developer guide](https://github.com/kubeflow/katib/blob/master/docs/developer-guide.md)
is a good starting point to know how to contribute to the project.

## Next steps

- Understand the [Katib metrics collector capabilities](/docs/components/katib/user-guides/metrics-collector).

- Learn about [Katib Configuration](/docs/components/katib/user-guides/katib-config/).



================================================
File: content/en/docs/components/katib/user-guides/hp-tuning/_index.md
================================================
+++
title = "Hyperparameter Tuning"
description = "User guides to run Hyperparameter Tuning Experiments"
weight = 10
+++



================================================
File: content/en/docs/components/katib/user-guides/hp-tuning/configure-algorithm.md
================================================
+++
title = "How to Configure Algorithms"
description = "List of supported algorithms for hyperparameter tuning"
weight = 20
+++

This page describes hyperparameter (HP) tuning algorithms that Katib supports and how to configure
them.

## HP Tuning Algorithms

Katib currently supports several search algorithms for NAS:

- [Grid Search](#grid-search)
- [Random Search](#random-search)
- [Bayesian Optimization](#bayesian-optimization)
- [Hyperband](#hyperband)
- [Tree of Parzen Estimators](#tree-of-parzen-estimators-tpe)
- [Multivariate TPE](#multivariate-tpe)
- [Covariance Matrix Adaptation Evolution Strategy (CMA-ES)](#covariance-matrix-adaptation-evolution-strategy-cma-es)
- [Sobol Quasirandom Sequence](#sobol-quasirandom-sequence)
- [Population Based Training](#population-based-training)

### Grid Search

The algorithm name in Katib is `grid`.

Grid sampling is useful when all variables are discrete (as opposed to
continuous) and the number of possibilities is low. A grid search
performs an exhaustive combinatorial search over all possibilities,
making the search process extremely long even for medium sized problems.

Katib uses the [Optuna](https://github.com/optuna/optuna) optimization
framework for its grid search.

<div class="table-responsive">
  <table class="table table-bordered">
    <thead class="thead-light">
      <tr>
        <th>Setting name</th>
        <th>Description</th>
        <th>Example</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>random_state</td>
        <td>[int]: Set <code>random_state</code> to something other than None
          for reproducible results.</td>
        <td>10</td>
      </tr>
    </tbody>
  </table>
</div>

### Random search

The algorithm name in Katib is `random`.

Random sampling is an alternative to grid search and is used when the number of
discrete variables to optimize is large and the time required for each
evaluation is long. When all parameters are discrete, random search performs
sampling without replacement. Random search is therefore the best algorithm to
use when combinatorial exploration is not possible. If the number of continuous
variables is high, you should use quasi random sampling instead.

Katib uses the [Hyperopt](https://hyperopt.github.io/hyperopt/),
[Goptuna](https://github.com/c-bata/goptuna) or
[Optuna](https://github.com/optuna/optuna) optimization
framework for its random search.

Katib supports the following algorithm settings:

<div class="table-responsive">
  <table class="table table-bordered">
    <thead class="thead-light">
      <tr>
        <th>Setting name</th>
        <th>Description</th>
        <th>Example</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>random_state</td>
        <td>[int]: Set <code>random_state</code> to something other than None
          for reproducible results.</td>
        <td>10</td>
      </tr>
    </tbody>
  </table>
</div>

### Bayesian optimization

The algorithm name in Katib is `bayesianoptimization`.

The [Bayesian optimization](https://arxiv.org/pdf/1012.2599.pdf) method uses
Gaussian process regression to model the search space. This technique calculates
an estimate of the loss function and the uncertainty of that estimate at every
point in the search space. The method is suitable when the number of
dimensions in the search space is low. Since the method models both
the expected loss and the uncertainty, the search algorithm converges in a few
steps, making it a good choice when the time to
complete the evaluation of a parameter configuration is long.

Katib uses the
[Scikit-Optimize](https://github.com/scikit-optimize/scikit-optimize) optimization framework
for its Bayesian search. Scikit-Optimize is also known as `skopt`.

Katib supports the following algorithm settings:

<div class="table-responsive">
  <table class="table table-bordered">
    <thead class="thead-light">
      <tr>
        <th>Setting Name</th>
        <th>Description</th>
        <th>Example</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>base_estimator</td>
        <td>[“GP”, “RF”, “ET”, “GBRT” or sklearn regressor, default=“GP”]:
          Should inherit from <code>sklearn.base.RegressorMixin</code>.
          The <code>predict</code> method should have an optional
          <code>return_std</code> argument, which returns
          <code>std(Y | x)</code> along with <code>E[Y | x]</code>. If
          <code>base_estimator</code> is one of
          [“GP”, “RF”, “ET”, “GBRT”], the system uses a default surrogate model
          of the corresponding type. Learn more information in the
          <a href="https://scikit-optimize.github.io/stable/modules/generated/skopt.Optimizer.html#skopt.Optimizer">skopt
          documentation</a>.</td>
        <td>GP</td>
      </tr>
      <tr>
        <td>n_initial_points</td>
        <td>[int, default=10]: Number of evaluations of <code>func</code> with
          initialization points before approximating it with
          <code>base_estimator</code>. Points provided as <code>x0</code> count
          as initialization points.
          If <code>len(x0) &lt; n_initial_points</code>, the
          system samples additional points at random. Learn more information in the
          <a href="https://scikit-optimize.github.io/stable/modules/generated/skopt.Optimizer.html#skopt.Optimizer">skopt
          documentation</a>.</td>
        <td>10</td>
      </tr>
      <tr>
        <td>acq_func</td>
        <td>[string, default=<code>&quot;gp_hedge&quot;</code>]: The function to
          minimize over the posterior distribution. Learn more information in the
          <a href="https://scikit-optimize.github.io/stable/modules/generated/skopt.Optimizer.html#skopt.Optimizer">skopt
          documentation</a>.</td>
        <td>gp_hedge</td>
      </tr>
      <tr>
        <td>acq_optimizer</td>
        <td>[string, “sampling” or “lbfgs”, default=“auto”]: The method to
          minimize the acquisition function. The system updates the fit model
          with the optimal value obtained by optimizing <code>acq_func</code>
          with <code>acq_optimizer</code>. Learn more information in the
          <a href="https://scikit-optimize.github.io/stable/modules/generated/skopt.Optimizer.html#skopt.Optimizer">skopt
          documentation</a>.</td>
        <td>auto</td>
      </tr>
      <tr>
        <td>random_state</td>
        <td>[int]: Set <code>random_state</code> to something other than None
          for reproducible results.</td>
        <td>10</td>
      </tr>
    </tbody>
  </table>
</div>

### Hyperband

The algorithm name in Katib is `hyperband`.

Katib supports the [Hyperband](https://arxiv.org/pdf/1603.06560.pdf)
optimization framework.
Instead of using Bayesian optimization to select configurations, Hyperband
focuses on early stopping as a strategy for optimizing resource allocation and
thus for maximizing the number of configurations that it can evaluate.
Hyperband also focuses on the speed of the search.

### Tree of Parzen Estimators (TPE)

The algorithm name in Katib is `tpe`.

Katib uses the [Hyperopt](https://hyperopt.github.io/hyperopt/),
[Goptuna](https://github.com/c-bata/goptuna) or
[Optuna](https://github.com/optuna/optuna) optimization
framework for its TPE search.

This method provides a [forward and reverse gradient-based](https://arxiv.org/pdf/1703.01785.pdf)
search.

Katib supports the following algorithm settings:

<div class="table-responsive">
  <table class="table table-bordered">
    <thead class="thead-light">
      <tr>
        <th>Setting name</th>
        <th>Description</th>
        <th>Example</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>n_EI_candidates</td>
        <td>[int]: Number of candidate samples used to calculate the expected improvement.</td>
        <td>25</td>
      </tr>
      <tr>
        <td>random_state</td>
        <td>[int]: Set <code>random_state</code> to something other than None
          for reproducible results.</td>
        <td>10</td>
      </tr>
      <tr>
        <td>gamma</td>
        <td>[float]: The threshold to split between l(x) and g(x), check equation 2 in
        <a href="https://papers.nips.cc/paper/2011/file/86e8f7ab32cfd12577bc2619bc635690-Paper.pdf">
        this Paper</a>. Value must be in (0, 1) range.</td>
        <td>0.25</td>
      </tr>
      <tr>
        <td>prior_weight</td>
        <td>[float]: Smoothing factor for counts, to avoid having 0 probability.
        Value must be > 0.</td>
        <td>1.1</td>
      </tr>
    </tbody>
  </table>
</div>

### Multivariate TPE

The algorithm name in Katib is `multivariate-tpe`.

Katib uses the [Optuna](https://hyperopt.github.io/hyperopt/) optimization
framework for its Multivariate TPE search.

[Multivariate TPE](https://tech.preferred.jp/en/blog/multivariate-tpe-makes-optuna-even-more-powerful/)
is improved version of independent (default) TPE. This method finds
dependencies among hyperparameters in search space.

Katib supports the following algorithm settings:

<div class="table-responsive">
  <table class="table table-bordered">
    <thead class="thead-light">
      <tr>
        <th>Setting name</th>
        <th>Description</th>
        <th>Example</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>n_ei_candidates</td>
        <td>[int]: Number of Trials used to calculate the expected improvement.</td>
        <td>25</td>
      </tr>
      <tr>
        <td>random_state</td>
        <td>[int]: Set <code>random_state</code> to something other than None
          for reproducible results.</td>
        <td>10</td>
      </tr>
      <tr>
        <td>n_startup_trials</td>
        <td>[int]: Number of initial Trials for which the random search algorithm generates
        hyperparameters.</td>
        <td>5</td>
      </tr>
    </tbody>
  </table>
</div>

### Covariance Matrix Adaptation Evolution Strategy (CMA-ES)

The algorithm name in Katib is `cmaes`.

Katib uses the [Goptuna](https://github.com/c-bata/goptuna) or
[Optuna](https://github.com/optuna/optuna) optimization
framework for its CMA-ES search.

The [Covariance Matrix Adaptation Evolution Strategy](https://en.wikipedia.org/wiki/CMA-ES)
is a stochastic derivative-free numerical optimization algorithm for optimization
problems in continuous search spaces.
You can also use [IPOP-CMA-ES](https://sci2s.ugr.es/sites/default/files/files/TematicWebSites/EAMHCO/contributionsCEC05/auger05ARCMA.pdf) and [BIPOP-CMA-ES](https://hal.inria.fr/inria-00382093/document), variant algorithms for restarting optimization when converges to local minimum.

Katib supports the following algorithm settings:

<div class="table-responsive">
  <table class="table table-bordered">
    <thead class="thead-light">
      <tr>
        <th>Setting name</th>
        <th>Description</th>
        <th>Example</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>random_state</td>
        <td>[int]: Set <code>random_state</code> to something other than None
          for reproducible results.</td>
        <td>10</td>
      </tr>
      <tr>
        <td>sigma</td>
        <td>[float]: Initial standard deviation of CMA-ES.</td>
        <td>0.001</td>
      </tr>
      <tr>
        <td>restart_strategy</td>
        <td>[string, "none", "ipop", or "bipop", default="none"]: Strategy for restarting CMA-ES optimization when converges to a local minimum.</td>
        <td>"ipop"</td>
      </tr>
    </tbody>
  </table>
</div>

### Sobol Quasirandom Sequence

The algorithm name in Katib is `sobol`.

Katib uses the [Goptuna](https://github.com/c-bata/goptuna) optimization
framework for its Sobol's quasirandom search.

The [Sobol's quasirandom sequence](https://dl.acm.org/doi/10.1145/641876.641879)
is a low-discrepancy sequence. And it is known that Sobol's quasirandom sequence can
provide better uniformity properties.

### Population Based Training

The algorithm name in Katib is `pbt`.

Review the population based training [paper](https://arxiv.org/abs/1711.09846) for more details about the algorithm.

The PBT service requires a Persistent Volume Claim with [RWX access mode](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes) to share resources between Suggestion and Trials. Currently, Katib Experiments should have <code>resumePolicy: FromVolume</code> to run the PBT algorithm. Learn more about resume policies in [this guide](/docs/components/katib/user-guides/resume-experiment/).

Katib supports the following algorithm settings:

<div class="table-responsive">
  <table class="table table-bordered">
    <thead class="thead-light">
      <tr>
        <th>Setting name</th>
        <th>Description</th>
        <th>Example</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>suggestion_trial_dir</td>
        <td>The location within the Trial container where checkpoints are saved</td>
        <td><code>/var/log/katib/checkpoints/</code></td>
      </tr>
      <tr>
        <td>n_population</td>
        <td>Number of Trial seeds per generation</td>
        <td>40</td>
      </tr>
      <tr>
        <td>resample_probability</td>
        <td>null (default): perturbs the hyperparameter by 0.8 or 1.2. 0-1: resamples the original distribution by the specified probability</td>
        <td>0.3</td>
      </tr>
      <tr>
        <td>truncation_threshold</td>
        <td>Exploit threshold for pruning low performing seeds</td>
        <td>0.4</td>
      </tr>
    </tbody>
  </table>
</div>

## Use Custom Algorithm in Katib

You can add an HP tuning algorithm to Katib yourself. The design of Katib follows the `ask-and-tell` pattern:

1. Ask for a new set of parameters
1. Walk to the Experiment and program in the new parameters
1. Observe the outcome of running the Experiment
1. Walk back to your laptop and tell the optimizer about the outcome 1. go to step 1

When an Experiment is created, one algorithm service as Kubernetes Deployment will be created.
Then Katib asks for new sets of parameters via `GetSuggestions` gRPC call. After that, Katib
creates new Trials according to the sets and observe the outcome. When the Trials are finished,
Katib tells the metrics of the finished Trials to the algorithm, and ask another new sets.

### Create a new Algorithm Service

The new algorithm needs to implement Suggestion service defined in [api.proto](https://github.com/kubeflow/katib/blob/4a2db414d85f29f17bc8ec6ff3462beef29585da/pkg/apis/manager/v1beta1/api.proto).

One sample algorithm looks like:

```python
from pkg.apis.manager.v1beta1.python import api_pb2
from pkg.apis.manager.v1beta1.python import api_pb2_grpc
from pkg.suggestion.v1beta1.internal.search_space import HyperParameter, HyperParameterSearchSpace
from pkg.suggestion.v1beta1.internal.trial import Trial, Assignment
from pkg.suggestion.v1beta1.hyperopt.base_service import BaseHyperoptService
from pkg.suggestion.v1beta1.internal.base_health_service import HealthServicer


# Inherit SuggestionServicer and implement GetSuggestions.
class HyperoptService(
        api_pb2_grpc.SuggestionServicer, HealthServicer):
    def ValidateAlgorithmSettings(self, request, context):
        # Optional, it is used to validate algorithm settings defined by users.
        pass
    def GetSuggestions(self, request, context):
        # Convert the Experiment in GRPC request to the search space.
        # search_space example:
        #   HyperParameterSearchSpace(
        #       goal: MAXIMIZE,
        #       params: [HyperParameter(name: param-1, type: INTEGER, min: 1, max: 5, step: 0),
        #                HyperParameter(name: param-2, type: CATEGORICAL, list: cat1, cat2, cat3),
        #                HyperParameter(name: param-3, type: DISCRETE, list: 3, 2, 6),
        #                HyperParameter(name: param-4, type: DOUBLE, min: 1, max: 5, step: )]
        #   )
        search_space = HyperParameterSearchSpace.convert(request.experiment)
        # Convert the Trials in GRPC request to the Trials in algorithm side.
        # Trials example:
        #   [Trial(
        #       assignment: [Assignment(name=param-1, value=2),
        #                    Assignment(name=param-2, value=cat1),
        #                    Assignment(name=param-3, value=2),
        #                    Assignment(name=param-4, value=3.44)],
        #       target_metric: Metric(name="metric-2" value="5643"),
        #       additional_metrics: [Metric(name=metric-1, value=435),
        #                            Metric(name=metric-3, value=5643)],
        #   Trial(
        #       assignment: [Assignment(name=param-1, value=3),
        #                    Assignment(name=param-2, value=cat2),
        #                    Assignment(name=param-3, value=6),
        #                    Assignment(name=param-4, value=4.44)],
        #       target_metric: Metric(name="metric-2" value="3242"),
        #       additional_metrics: [Metric(name=metric=1, value=123),
        #                            Metric(name=metric-3, value=543)],
        trials = Trial.convert(request.trials)
        #--------------------------------------------------------------
        # Your code here
        # Implement the logic to generate new assignments for the given current request number.
        # For example, if request.current_request_number is 2, you should return:
        # [
        #   [Assignment(name=param-1, value=3),
        #    Assignment(name=param-2, value=cat2),
        #    Assignment(name=param-3, value=3),
        #    Assignment(name=param-4, value=3.22)
        #   ],
        #   [Assignment(name=param-1, value=4),
        #    Assignment(name=param-2, value=cat4),
        #    Assignment(name=param-3, value=2),
        #    Assignment(name=param-4, value=4.32)
        #   ],
        # ]
        list_of_assignments = your_logic(search_space, trials, request.current_request_number)
        #--------------------------------------------------------------
        # Convert list_of_assignments to
        return api_pb2.GetSuggestionsReply(
            trials=Assignment.generate(list_of_assignments)
        )
```

### Build Docker Image for Algorithm Service

You should build Docker image for your Algorithm service, for that add a new Docker image under
`cmd/suggestion`, for example: [cmd/suggestion/hyperopt](https://github.com/kubeflow/katib/tree/6f372f68089c0a01d2c06e98489557a88e5a7183/cmd/suggestion/hyperopt/v1beta1).
The new gRPC server should serve in port **6789**.

After that you can build Docker image from your algorithm:

```shell
docker build . -f cmd/suggestion/<PATH_TO_DOCKER> -t <DOCKER_IMAGE>
```

### Update the Katib Config with

Update the [Katib config](/docs/components/katib/user-guides/katib-config/#suggestions-parameters)
with the new algorithm entity:

```diff
  runtime:
    suggestions:
      - algorithmName: random
        image: docker.io/kubeflowkatib/suggestion-hyperopt:$(KATIB_VERSION)
      - algorithmName: tpe
        image: docker.io/kubeflowkatib/suggestion-hyperopt:$(KATIB_VERSION)
+     - algorithmName: <new-algorithm-name>
+       image: <DOCKER_IMAGE>
```

### Contribute the Algorithm to Katib

If you want to contribute the algorithm to Katib, you could add unit test and/or e2e test for it
in the CI and submit a PR.

#### Add Unit Tests for the Algorithm

Here is an example [test_hyperopt_service.py](https://github.com/kubeflow/katib/blob/6f372f68089c0a01d2c06e98489557a88e5a7183/test/unit/v1beta1/suggestion/test_hyperopt_service.py):

```python
import grpc
import grpc_testing
import unittest

from pkg.apis.manager.v1beta1.python import api_pb2_grpc
from pkg.apis.manager.v1beta1.python import api_pb2

from pkg.suggestion.v1beta1.hyperopt.service import HyperoptService

class TestHyperopt(unittest.TestCase):
    def setUp(self):
        servicers = {
            api_pb2.DESCRIPTOR.services_by_name['Suggestion']: HyperoptService()
        }

        self.test_server = grpc_testing.server_from_dictionary(
            servicers, grpc_testing.strict_real_time())


if __name__ == '__main__':
    unittest.main()
```

You can setup the gRPC server using `grpc_testing`, then define your own test cases.



================================================
File: content/en/docs/components/katib/user-guides/hp-tuning/configure-experiment.md
================================================
+++
title = "How to Configure Experiment"
description = "Katib Experiment specification for hyperparameter tuning"
weight = 10
+++

This guide describes how to configure Katib Experiment for hyperparameter (HP) tuning.

## Create Image for Training Code

If you don't use `tune` API from Katib Python SDK, you must package your training code in a Docker
container image and make the image available in a registry. Check the
[Docker documentation](https://docs.docker.com/develop/develop-images/baseimages/) and the
[Kubernetes documentation](https://kubernetes.io/docs/concepts/containers/images/) to learn about it.

## Configuring the Experiment

You can configure your HP tuning job in Katib Experiment YAML file. The YAML file defines the range of
potential values (the search space) for the HPs that you want to optimize, the objective metric
to use when determining optimal values, the search algorithm to use during optimization,
and other configurations.

As a reference, you can use the YAML file of the
[random search algorithm example](https://github.com/kubeflow/katib/blob/fc858d15dd41ff69166a2020efa200199063f9ba/examples/v1beta1/hp-tuning/random.yaml).

The list below describes the fields in the YAML file for an Experiment.

- **objective**: The metric that you want to optimize in your hyperparameter tuning job. You should
  specify whether you want Katib to maximize or minimize the metric.

  Katib uses the `objectiveMetricName` and `additionalMetricNames` to monitor how the
  hyperparameters perform with the model. Katib records the value of the best `objectiveMetricName`
  metric (maximized or minimized based on `type`) and the corresponding hyperparameter set
  in the Experiment's `.status.currentOptimalTrial.parameterAssignments`. If the `objectiveMetricName`
  metric for a set of hyperparameters reaches the `goal`, Katib stops trying more hyperparameter combinations.

  You can run the Experiment without specifying the `goal`. In that case, Katib
  runs the Experiment until the corresponding successful Trials reach `maxTrialCount`.
  `maxTrialCount` parameter is described below.

  The default way to calculate the Experiment's objective is:

  - When the objective `type` is `maximize`, Katib compares all maximum metric values.

  - When the objective `type` is `minimize`, Katib compares all minimum metric values.

  To change this default setting, define `metricStrategies` with various rules
  (`min`, `max` or `latest`) to extract values for each metric from the Experiment's
  `objectiveMetricName` and `additionalMetricNames`. The Experiment's objective value is calculated in
  accordance with the selected strategy.

  For example, you can set the parameters in your Experiment as follows:

  ```yaml
  . . .
  objectiveMetricName: accuracy
  type: maximize
  metricStrategies:
    - name: accuracy
      value: latest
  . . .
  ```

  In that case, Katib controller searches for the best maximum from the all latest reported
  `accuracy` metrics for each Trial. Check the
  [metrics strategies example](https://github.com/kubeflow/katib/blob/fc858d15dd41ff69166a2020efa200199063f9ba/examples/v1beta1/metrics-collector/metrics-collection-strategy.yaml).

  The default strategy type for each metric is equal to the objective `type`.

- **algorithm**: The search algorithm that you want Katib to use to find the best HPs.
  Examples include random search, grid search, Bayesian optimization, and more.
  Check the [HP tuning algorithms](/docs/components/katib/user-guides/hp-tuning/configure-algorithm/)
  to learn how to configure them.

- **parallelTrialCount**: The maximum number of HP sets that Katib
  should train in parallel. The default value is 3.

- **maxTrialCount**: The maximum number of Trials to run. This is equivalent to the number o
  HP sets that Katib should generate to test the model. If the `maxTrialCount` value is
  **omitted**, your Experiment will be running until the objective goal is reached or the Experiment
  reaches a maximum number of failed Trials.

- **maxFailedTrialCount**: The maximum number of Trials allowed to fail. This is equivalent to the
  number of failed HP sets that Kat